".equals()" should not be used to test the values of "Atomic" classes
"@Override" annotation should be used on any method overriding (since Java 5) or implementing (since Java 6) another one
"BigDecimal(double)" should not be used
"Calendars" and "DateFormats" should not be static
"CHECKSTYLE:OFF" suppression comments should not be used
"clone" should not be overridden
"Cloneables" should implement "clone"
"compareTo" results should not be checked for specific values
"compareTo" should not return "Integer.MIN_VALUE"
"ConcurrentLinkedQueue.size()" should not be used
"DateUtils.truncate" from Apache Commons Lang library should not be used
"deleteOnExit" should not be used
"Double.longBitsToDouble" should not be used for "int"
"entrySet()" should be iterated when both the key and value are needed
"equals" methods should be symmetric and work for subclasses
"equals(Object obj)" and "hashCode()" should be overridden in pairs
"equals(Object obj)" should be overridden along with the "compareTo(T obj)" method
"equals(Object obj)" should test argument type
"Exception" should not be caught when not required by called methods
"File.createTempFile" should not be used to create a directory
"final" classes should not have "protected" members
"finalize" should not set fields to "null"
"FIXME" tags should be handled
"for" loop incrementers should modify the variable being tested in the loop's stop condition
"for" loop stop conditions should be invariant
"hashCode" and "toString" should not be called on array instances
"HttpServletRequest.getRequestedSessionId()" should not be used
"indexOf" checks should not be for positive numbers
"indexOf" checks should use a start position
"instanceof" operators that always return "true" or "false" should be removed
"Iterator.hasNext()" should not call "Iterator.next()"
"Iterator.next()" methods should throw "NoSuchElementException"
"java.lang.Error" should not be extended
"javax.crypto.NullCipher" should not be used for anything other than testing
"Lock" objects should not be "synchronized"
"main" should not "throw" anything
"NOPMD" suppression comments should not be used
"NOSONAR" should not be used to switch off issues
"notifyAll" should be used
"NullPointerException" should not be caught
"NullPointerException" should not be explicitly thrown
"object == null" should be used instead of "object.equals(null)"
"Object.finalize()" should remain protected (versus public) when overriding
"Object.wait(...)" and "Condition.await(...)" should be called inside a "while" loop
"Object.wait(...)" should never be called on objects that implement "java.util.concurrent.locks.Condition"
"PreparedStatement" and "ResultSet" methods should be called with valid indices
"private" methods that don't access instance data should be "static"
"public static" fields should be constant
"read" and "readLine" return values should be used
"readObject" should not be "synchronized"
"ResultSet.isLast()" should not be used
"return" statements should not occur in "finally" blocks
"runFinalizersOnExit" should not be called
"ScheduledThreadPoolExecutor" should not have 0 core threads
"Serializable" classes should have a version id
"Serializable" inner classes of "Serializable" classes should be static
"Serializable" inner classes of non-serializable classes should be "static"
"static final" arrays should be "private"
"static" members should be accessed statically
"StringBuilder" and "StringBuffer" should not be instantiated with a character
"switch case" clauses should not have too many lines
"switch" statements should end with a "default" clause
"switch" statements should have at least 3 "case" clauses
"switch" statements should not contain non-case labels
"switch" statements should not have too many "case" clauses
"Thread.sleep" should not be used in tests
"Threads" should not be used where "Runnables" are expected
"TODO" tags should be handled
"toString()" and "clone()" methods should not return null
"toString()" should never be called on a String object
"URL.hashCode" and "URL.equals" should be avoided
"wait(...)" should be used instead of "Thread.sleep(...)" when a lock is held
"wait(...)", "notify()" and "notifyAll()" methods should only be called when a lock is obviously held on an object
@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces
A "for" loop update clause should move the counter in the right direction
A "while" loop should be used instead of a "for" loop
A close curly brace should be located at the beginning of a line
A field should not duplicate the name of its containing class
Abstract class names should comply with a naming convention
Abstract classes without fields should be converted to interfaces
An abstract class should have both abstract and concrete methods
An open curly brace should be located at the beginning of a line
An open curly brace should be located at the end of a line
Annotation arguments should appear in the order in which they were declared
Annotation repetitions should not be wrapped
Anonymous inner classes containing only one method should become lambdas
Architectural constraints should be followed
Array designators "[]" should be located after the type in method signatures
Array designators "[]" should be on the type, not the variable
Assertions should be complete
Assignments should not be made from within sub-expressions
Blocks synchronized on fields should not contain assignments of new objects to those fields
Boolean checks should not be inverted
Boxing and unboxing should not be immediately reversed
Branches should have sufficient coverage by unit tests
Case insensitive string comparisons should be made without intermediate upper or lower casing
Checked Exception should not be thrown
Child class members should not shadow parent class members
Class names should comply with a naming convention
Class names should not shadow interfaces or superclasses
Class variable fields should not have public accessibility
Classes and enums with private members should have a constructor
Classes and methods that rely on the default system encoding should not be used
Classes extending java.lang.Thread should override the "run" method
Classes from "sun.*" packages should not be used
Classes named like "Exception" should extend "Exception" or a subclass
Classes should not be compared by name
Classes should not be coupled to too many other classes (Single Responsibility Principle)
Classes should not be empty
Classes should not be loaded dynamically
Classes should not be too complex
Classes should not have too many methods
Classes that override "clone" should be "Cloneable" and call "super.clone()"
Classes with only "static" methods should not be instantiated
Classes without "public" constructors should be "final"
Close curly brace and the next "else", "catch" and "finally" keywords should be located on the same line
Close curly brace and the next "else", "catch" and "finally" keywords should be on two different lines
Collapsible "if" statements should be merged
Collection.isEmpty() should be used to test for emptiness
Collections should not be passed as arguments to their own methods
Collections.emptyList(), emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET
Comments should not be located at the end of lines of code
Comparators should be "Serializable"
Conditions should not unconditionally evaluate to "TRUE" or to "FALSE"
Constant names should comply with a naming convention
Constants should not be defined in interfaces
Constructors should only call non-overridable methods
Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply
Control structures should use curly braces
Cookies should be "secure"
Copyright and license headers should be defined
Credentials should not be hard-coded
Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)
Custom serialization method signatures should meet requirements
Cycles between packages should be removed
Dead stores should be removed
Declarations should use Java collection interfaces such as "List" rather than specific implementation classes such as "LinkedList"
Deprecated classes and interfaces should not be extended/implemented
Deprecated code should be removed eventually
Deprecated elements should have both the annotation and the Javadoc tag
Deprecated methods should not be used
Disallowed methods should not be used
Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting
Empty arrays and collections should be returned instead of null
Empty statements should be removed
Enumeration should not be implemented
Escaped Unicode characters should not be used
Exception classes should be immutable
Exception handlers should preserve the original exception
Exception types should not be tested using "instanceof" in catch blocks
Exceptions should not be thrown from servlet methods
Exceptions should not be thrown in finally blocks
Execution of the Garbage Collector should be triggered only by the JVM
Exit methods should not be called
Expressions should not be too complex
Extensions and implementations should not be redundant
Failed unit tests should be fixed
Field names should comply with a naming convention
Fields and methods should not have conflicting names
Fields in a "Serializable" class should either be transient or serializable
Fields in non-serializable classes should not be "transient"
Fields should not be initialized to default values
Files should contain an empty new line at the end
Files should contain only one top-level class or interface each
Files should not be empty
Files should not have too many lines
Floating point numbers should not be tested for equality
Future keywords should not be used as names
Generic exceptions should never be thrown
Generic wildcard types should not be used in return parameters
HTTP referers should not be relied on
Identical expressions should not be used on both sides of a binary operator
IllegalMonitorStateException should not be caught
Inappropriate "Collection" calls should not be made
Increment (++) and decrement (--) operators should not be mixed with other operators in an expression
Inheritance tree of classes should not be too deep
Inner class calls to super class methods should be unambiguous
Inner classes should not have too many lines
Inner classes which do not reference their owning classes should be "static"
Instance methods should not write to "static" fields
Interface names should comply with a naming convention
Ints and longs should not be shifted by more than their number of bits-1
Invalid "Date" values should not be used
IP addresses should not be hardcoded
Java parser failure
JUnit assertions should include messages
JUnit assertions should not be used in "run" methods
JUnit framework methods should be declared properly
JUnit rules should be used
JUnit test cases should call super methods
Labels should not be used
Lambdas and anonymous classes should not have too many lines
Lambdas should be replaced with method references
Lamdbas containing only one statement should not nest this statement in a block
Lazy initialization of "static" fields should be "synchronized"
Limited dependence should be placed on operator precedence rules in expressions
Lines should have sufficient coverage by unit tests
Lines should not be too long
Literal boolean values should not be used in assertions
Literal boolean values should not be used in condition expressions
Literal suffixes should be upper case
Local variable and method parameter names should comply with a naming convention
Local Variables should not be declared and then immediately returned or thrown
Local variables should not shadow class fields
Locks should be released
Loggers should be "private static final" and should share a naming convention
Long suffix "L" should be upper case
Loop conditions should be true at least once
Loops should not contain more than a single "break" or "continue" statement
Magic numbers should not be used
Maps with keys that are enum values should be replaced with EnumMap
Math operands should be cast before assignment
Math should not be performed on floats
Member variable visibility should be specified
Method names should comply with a naming convention
Method parameters, caught exceptions and foreach variables should not be reassigned
Methods "wait(...)", "notify()" and "notifyAll()" should never be called on Thread instances
Methods and field names should not be the same or differ only by capitalization
Methods named "equals" should override Object.equals(Object)
Methods should not be empty
Methods should not be named "hashcode" or "equal"
Methods should not be too complex
Methods should not have too many lines
Methods should not have too many parameters
Methods should not have too many return statements
Modifiers should be declared in the correct order
Modulus results should not be checked for direct equality
Multiline blocks should be enclosed in curly braces
Multiple loops over the same set should be combined
Multiple variables should not be declared on the same line
Mutable fields should not be "public static"
Mutable members should not be stored or returned directly
Neither "Math.abs" nor negation should be used on numbers that could be "MIN_VALUE"
Neither DES (Data Encryption Standard) nor DESede (3DES) should be used
Nested "enum"s should not be declared static
Nested blocks of code should not be left empty
Nested code blocks should not be used
Non-constructor methods should not have the same name as the enclosing class
Non-public methods should not be "@Transactional"
Non-serializable classes should not be written
Non-serializable objects should not be stored in "HttpSessions"
Null pointers should not be dereferenced
Null should not be returned from a "Boolean" method
Objects should be compared with "equals()"
Objects should not be created only to "getClass"
Objects should not be created to be dropped immediately without being used
Octal values should not be used
Only standard cryptographic algorithms should be used
Only static class initializers should be used
Overriding methods should do more than simply call the same method in the super class
Package declaration should match source file directory
Package names should comply with a naming convention
Packages should have a javadoc file 'package-info.java'
Parentheses should be removed from a single lambda input parameter when its type is inferred
Parsing should be used to convert "Strings" to primitives
Primitive wrappers should not be instantiated only for "toString" or "compareTo" calls
Primitives should not be boxed just for "String" conversion
Printf-style format strings should not lead to unexpected behavior at runtime
Pseudorandom number generators (PRNGs) should not be used in secure contexts
Public constants and fields initialized at declaration should be "static final" rather than merely "final"
Public methods should not contain selector arguments
Public methods should throw at most one checked exception
Public types, methods and fields (API) should be documented with Javadoc
Redundant casts should not be used
Redundant modifiers should not be used
Reflection should not be used to check non-runtime annotations
Related "if/else if" statements should not have the same condition
Relational operators should be used in "for" loop termination conditions
Resources should be closed
Return of boolean expressions should not be wrapped into an "if-then-else" statement
Return values should not be ignored when function calls don't have any side effects
Sections of code should not be "commented out"
Servlets should never have mutable instance fields
SHA-1 and Message-Digest hash algorithms should not be used
Short-circuit logic should be used in boolean contexts
Short-circuit logic should be used to prevent null pointer dereferences in conditionals
Silly bit operations should not be performed
Silly equality checks should not be made
Silly math should not be performed
Skipped unit tests should be either removed or fixed
Skipped unit tests should be either removed or fixed
Source code should be indented consistently
Source files should have a sufficient density of comment lines
Source files should not have any duplicated blocks
Standard outputs should not be used directly to log anything
Statements should be on separate lines
Static non-final field names should comply with a naming convention
String literals should not be duplicated
String.valueOf() should not be appended to a String
Strings literals should be placed on the left side when checking for equality
Strings should be compared using "equals()"
Strings should not be concatenated using '+' in a loop
Subclasses that add fields should override "equals"
super.finalize() should be called at the end of Object.finalize() implementations
Switch cases should end with an unconditional "break" statement
Synchronization should not be based on Strings or boxed primitives
Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used
Tabulation characters should not be used
TestCases should contain tests
Tests should include assertions
The @SuppressWarnings annotation should not be used
The Array.equals(Object obj) method should not be used
The default unnamed package should not be used
The diamond operator ("&lt;&gt;") should be used
The members of an interface declaration or class should appear in a pre-defined order
The non-serializable super class of a "Serializable" class should have a no-argument constructor
The Object.finalize() method should not be called
The Object.finalize() method should not be overriden
The signature of "finalize()" should match that of "Object.finalize()"
The ternary operator should not be used
The value returned from a stream read should be checked
Thread.run() and Runnable.run() should not be called directly
Threads should not be started in constructors
Throwable and Error should not be caught
Throwable.printStackTrace(...) should not be called
Throws declarations should not be superfluous
Try-catch blocks should not be nested
Two branches in the same conditional structure should not have exactly the same implementation
Type parameter names should comply with a naming convention
Untrusted data should not be stored in sessions
Unused labels should be removed
Unused local variables should be removed
Unused method parameters should be removed
Unused private fields should be removed
Unused private method should be removed
Unused protected methods should be removed
Unused type parameters should be removed
Useless "if(true) {...}" and "if(false){...}" blocks should be removed
Useless imports should be removed
Useless parentheses around expressions should be removed to prevent any misunderstanding
Utility classes should not have public constructors
Values passed to LDAP queries should be sanitized
Values passed to OS commands should be sanitized
Values passed to SQL commands should be sanitized
Values should not be uselessly incremented
Variables should not be declared before they are relevant
Variables should not be self-assigned
Web applications should not have a "main" method
Wildcard imports should not be used