blocker;".equals()" should not be used to test the values of "Atomic" classes;Java, bug, multi-threading
minor;"@Deprecated" code should not be used;Java, cert, cwe, obsolete
critical;"@NonNull" values should not be set to null;Java, bug
major;"@Override" annotation should be used on any method overriding (since Java 5) or implementing (since Java 6) another one;Java, bad-practice
major;"action" mappings should not have too many "forward" entries;Java, brain-overload, struts
major;"assert" should only be used with boolean variables;Java, cert, suspicious
critical;"BigDecimal(double)" should not be used;Java, bug, cert
minor;"catch" clauses should do more than rethrow;Java, cert, clumsy, finding, unused
minor;"CHECKSTYLE:OFF" suppression comments should not be used;Java, bad-practice
major;"clone" should not be overridden;Java, suspicious
critical;"Cloneables" should implement "clone";Java, bug
major;"compareTo" results should not be checked for specific values;Java, unpredictable
critical;"compareTo" should not return "Integer.MIN_VALUE";Java, bug
critical;"ConcurrentLinkedQueue.size()" should not be used;Java, performance, security
major;"DateUtils.truncate" from Apache Commons Lang library should not be used;Java, java8, performance
major;"deleteOnExit" should not be used;Java, performance
blocker;"Double.longBitsToDouble" should not be used for "int";Java, bug
major;"entrySet()" should be iterated when both the key and value are needed;Java, performance
critical;"enum" fields should not be publicly mutable;Java, bad-practice, security
critical;"equals" methods should be symmetric and work for subclasses;Java, bug, cert
blocker;"equals(Object obj)" and "hashCode()" should be overridden in pairs;Java, bug, cert, cwe
critical;"equals(Object obj)" should be overridden along with the "compareTo(T obj)" method;Java, bug
blocker;"equals(Object obj)" should test argument type;Java, bug
critical;"Exception" should not be caught when not required by called methods;Java, cwe, error-handling, security
critical;"Externalizable" classes should have no-arguments constructors;Java, bug
critical;"File.createTempFile" should not be used to create a directory;Java, owasp-a9, security
major;"final" classes should not have "protected" members;Java, confusing
major;"finalize" should not set fields to "null";Java, clumsy, performance
major;"FIXME" tags should be handled;Java
major;"for" loop incrementers should modify the variable being tested in the loop's stop condition;Java, suspicious
major;"for" loop stop conditions should be invariant;Java, misra, pitfall
critical;"hashCode" and "toString" should not be called on array instances;Java, bug
critical;"HttpServletRequest.getRequestedSessionId()" should not be used;Java, cwe, owasp-a2, sans-top25-porous, security
major;"indexOf" checks should not be for positive numbers;Java, suspicious
major;"indexOf" checks should use a start position;Java, confusing
major;"instanceof" operators that always return "true" or "false" should be removed;Java, cwe, suspicious
critical;"InterruptedException" should not be ignored;Java, bug, cwe, multi-threading
blocker;"Iterator.hasNext()" should not call "Iterator.next()";Java, bug
major;"Iterator.next()" methods should throw "NoSuchElementException";Java, unpredictable
minor;"java.lang.Error" should not be extended;Java, error-handling
blocker;"javax.crypto.NullCipher" should not be used for anything other than testing;Java, cwe, owasp-a6, sans-top25-porous, security
major;"Lock" objects should not be "synchronized";Java, cert, clumsy, multi-threading
critical;"main" should not "throw" anything;Java, error-handling, security
minor;"NOPMD" suppression comments should not be used;Java, bad-practice
major;"NOSONAR" should not be used to switch off issues;Java, bad-practice
critical;"notifyAll" should be used;Java, bug, cert, multi-threading
major;"NullPointerException" should not be caught;Java, cert, cwe, error-handling
major;"NullPointerException" should not be explicitly thrown;Java, pitfall
critical;"object == null" should be used instead of "object.equals(null)";DEPRECATED, Java, bug
major;"Object.finalize()" should remain protected (versus public) when overriding;Java, cert, cwe, security
critical;"Object.wait(...)" and "Condition.await(...)" should be called inside a "while" loop;Java, bug, cert, multi-threading
major;"Object.wait(...)" should never be called on objects that implement "java.util.concurrent.locks.Condition";Java, suspicious
blocker;"PreparedStatement" and "ResultSet" methods should be called with valid indices;Java, bug, sql
major;"private" methods called only by inner classes should be moved to those classes;Java, confusing
minor;"private" methods that don't access instance data should be "static";Java, pitfall
critical;"public static" fields should be constant;Java, cert, cwe, security
blocker;"read" and "readLine" return values should be used;Java, bug
major;"readObject" should not be "synchronized";Java, confusing
major;"readResolve" methods should be inheritable;Java, pitfall
major;"ResultSet.isLast()" should not be used;Java, performance, pitfall, sql
blocker;"runFinalizersOnExit" should not be called;Java, bug, cert, security
blocker;"ScheduledThreadPoolExecutor" should not have 0 core threads;Java, bug
major;"Serializable" classes should have a version id;Java, cert, pitfall, serialization
major;"Serializable" inner classes of "Serializable" classes should be static;Java, cert, pitfall, serialization
critical;"Serializable" inner classes of non-serializable classes should be "static";Java, bug, cert, serialization
critical;"SingleConnectionFactory" instances should be set to "reconnectOnException";Java, bug, spring
critical;"static final" arrays should be "private";DEPRECATED, Java, cwe, security
major;"static" members should be accessed statically;Java, pitfall
major;"StringBuilder" and "StringBuffer" should not be instantiated with a character;Java, pitfall
major;"switch case" clauses should not have too many lines;Java, brain-overload
major;"switch" statements should end with "default" clauses;Java, cert, cwe, misra
minor;"switch" statements should have at least 3 "case" clauses;Java, misra
major;"switch" statements should not contain non-case labels;Java, misra, suspicious
major;"switch" statements should not have too many "case" clauses;Java, brain-overload
major;"Thread.sleep" should not be used in tests;Java, bad-practice
major;"Threads" should not be used where "Runnables" are expected;Java, multi-threading, pitfall
critical;"toArray" should be passed an array of the proper type;Java, bug
info;"TODO" tags should be handled;Java
critical;"toString()" and "clone()" methods should not return null;Java, bug, cwe
minor;"toString()" should never be called on a String object;Java, clumsy, finding
major;"URL.hashCode" and "URL.equals" should be avoided;Java, performance
critical;"wait(...)" should be used instead of "Thread.sleep(...)" when a lock is held;Java, cert, multi-threading, performance, security
critical;"wait(...)", "notify()" and "notifyAll()" methods should only be called when a lock is obviously held on an object;Java, bug, multi-threading
major;@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces;Java, java8
blocker;A "for" loop update clause should move the counter in the right direction;Java, bug, cert
minor;A "while" loop should be used instead of a "for" loop;Java, clumsy
minor;A close curly brace should be located at the beginning of a line;Java, convention
major;A field should not duplicate the name of its containing class;Java, brain-overload
minor;Abstract class names should comply with a naming convention;Java, convention
major;Abstract classes without fields should be converted to interfaces;Java, java8
major;Abstract methods should not be redundant;Java, confusing
minor;An abstract class should have both abstract and concrete methods;Java, convention
minor;An open curly brace should be located at the beginning of a line;Java, convention
minor;An open curly brace should be located at the end of a line;Java, convention
minor;Annotation arguments should appear in the order in which they were declared;Java, convention
major;Annotation repetitions should not be wrapped;Java, java8
major;Anonymous inner classes containing only one method should become lambdas;Java, java8
minor;Array designators "[]" should be located after the type in method signatures;Java, convention
minor;Array designators "[]" should be on the type, not the variable;Java, convention
minor;Artifact ids should follow a naming convention;Java, convention, maven
critical;Assertions should be complete;Java, bug, tests
major;Assignments should not be made from within sub-expressions;Java, cert, cwe, misra, suspicious
blocker;Blocks should be synchronized on "private final" fields;Java, cert, cwe, multi-threading, security
minor;Boolean checks should not be inverted;Java, pitfall
minor;Boolean literals should not be redundant;Java, clumsy
major;Boxing and unboxing should not be immediately reversed;Java, clumsy
major;Branches should have sufficient coverage by unit tests;Java, bad-practice
major;Case insensitive string comparisons should be made without intermediate upper or lower casing;Java, clumsy
major;Catches should be combined;Java, clumsy
major;Checked Exception should not be thrown;Java, error-handling
major;Child class fields should not shadow parent class fields;Java, confusing
major;Child class methods named for parent class methods should be overrides;Java, pitfall
minor;Class names should comply with a naming convention;Java, convention
major;Class names should not shadow interfaces or superclasses;Java, pitfall
major;Class variable fields should not have public accessibility;Java, cwe
major;Classes and enums with private members should have a constructor;Java, pitfall
major;Classes and methods that rely on the default system encoding should not be used;Java, cert, unpredictable
major;Classes extending java.lang.Thread should override the "run" method;Java, multi-threading, pitfall
major;Classes from "sun.*" packages should not be used;Java, lock-in, pitfall
major;Classes named like "Exception" should extend "Exception" or a subclass;Java, convention, pitfall
critical;Classes should not be compared by name;Java, bug, cert, cwe, security
major;Classes should not be coupled to too many other classes (Single Responsibility Principle);Java, brain-overload
major;Classes should not be empty;Java, clumsy
critical;Classes should not be loaded dynamically;Java, cwe, owasp-a1, security
major;Classes should not be too complex;Java, brain-overload
major;Classes should not have too many methods;Java, brain-overload
critical;Classes that don't define "hashCode()" should not be used in hashes;Java, bug
major;Classes that override "clone" should be "Cloneable" and call "super.clone()";Java, cert, cwe
major;Classes with only "static" methods should not be instantiated;Java, clumsy
major;Classes without "public" constructors should be "final";Java, design
minor;Close curly brace and the next "else", "catch" and "finally" keywords should be located on the same line;Java, convention
minor;Close curly brace and the next "else", "catch" and "finally" keywords should be on two different lines;Java, convention
major;Collapsible "if" statements should be merged;Java, clumsy
major;Collection.isEmpty() should be used to test for emptiness;Java, clumsy
critical;Collections should not be passed as arguments to their own methods;Java, bug
major;Collections.emptyList(), emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET;Java, obsolete, pitfall
info;Comments should not be located at the end of lines of code;Java, convention
major;Comparators should be "Serializable";Java, pitfall, serialization
critical;Conditions should not unconditionally evaluate to "TRUE" or to "FALSE";Java, bug, cert, cwe, misra
minor;Constant names should comply with a naming convention;Java, convention
minor;Constants should not be defined in interfaces;Java, bad-practice
major;Constructor injection should be used instead of field injection;Java, design, pitfall
major;Constructors should not be used to instantiate "String" and primitive-wrapper classes;Java, performance
major;Constructors should only call non-overridable methods;Java, cert, pitfall
major;Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply;Java, brain-overload
major;Control structures should use curly braces;Java, cert, misra, pitfall
critical;Cookies should be "secure";Java, cwe, owasp-a2, owasp-a6, security
blocker;Copyright and license headers should be defined;Java
critical;Credentials should not be hard-coded;Java, cert, cwe, owasp-a2, sans-top25-porous, security
critical;Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding);Java, cwe, owasp-a5, owasp-a6, sans-top25-porous, security
critical;Custom serialization method signatures should meet requirements;Java, bug, cert
major;Cycles between packages should be removed;Java, design
major;Dead stores should be removed;Java, cert, cwe, suspicious, unused
major;Declarations should use Java collection interfaces such as "List" rather than specific implementation classes such as "LinkedList";Java, bad-practice
blocker;Default EJB interceptors should be declared in "ejb-jar.xml";Java, bug
major;Dependencies should not have "system" scope;Java, lock-in, maven
major;Deprecated "${pom}" properties should not be used;Java, maven, obsolete
major;Deprecated classes and interfaces should not be extended/implemented;DEPRECATED, Java, cwe, obsolete
info;Deprecated code should be removed eventually;Java, obsolete
major;Deprecated elements should have both the annotation and the Javadoc tag;Java, bad-practice, obsolete
critical;Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting;Java, bug
major;EJB interceptor exclusions should be declared as annotations;Java, pitfall
major;Empty arrays and collections should be returned instead of null;Java, cert
minor;Empty statements should be removed;Java, cert, misra, unused
major;Enumeration should not be implemented;Java, obsolete
major;Equality operators should not be used in "for" loop termination conditions;Java, cert, cwe, misra, suspicious
major;Escaped Unicode characters should not be used;Java, confusing
major;Exception classes should be immutable;Java, error-handling
major;Exception handlers should preserve the original exceptions;Java, cert, error-handling, suspicious
major;Exception types should not be tested using "instanceof" in catch blocks;Java, cert, error-handling
critical;Exceptions should not be thrown from servlet methods;Java, cert, cwe, error-handling, owasp-a6, security
major;Exceptions should not be thrown in finally blocks;Java, cert, error-handling, suspicious
major;Execution of the Garbage Collector should be triggered only by the JVM;Java, bad-practice, unpredictable
major;Exit methods should not be called;Java, cert, cwe, suspicious
major;Expressions should not be too complex;Java, brain-overload
minor;Extensions and implementations should not be redundant;Java, clumsy
major;Failed unit tests should be fixed;Java, bug
minor;Field names should comply with a naming convention;Java, convention
major;Fields and methods should not have conflicting names;DEPRECATED, Java, brain-overload
critical;Fields in a "Serializable" class should either be transient or serializable;Java, bug, cwe, serialization
minor;Fields in non-serializable classes should not be "transient";Java, serialization, unused
minor;Fields should not be initialized to default values;Java, convention, finding
minor;Files should contain an empty new line at the end;Java, convention
major;Files should contain only one top-level class or interface each;Java, brain-overload
major;Files should not be empty;Java, unused
major;Files should not have too many lines;Java, brain-overload
critical;Floating point numbers should not be tested for equality;Java, bug, misra
info;Functions should not be defined with a variable number of arguments;Java, cert, misra, pitfall
major;Future keywords should not be used as names;Java, obsolete, pitfall
critical;Generic exceptions should never be thrown;Java, cert, cwe, error-handling, security
major;Generic wildcard types should not be used in return parameters;Java, pitfall
critical;Getters and setters should be synchronized in pairs;Java, bug, cert, multi-threading
minor;Group ids should follow a naming convention;Java, convention, maven
critical;HTTP referers should not be relied on;Java, cwe, owasp-a2, sans-top25-porous, security
critical;Identical expressions should not be used on both sides of a binary operator;Java, bug, cert
critical;IllegalMonitorStateException should not be caught;Java, bug, multi-threading
critical;Inappropriate "Collection" calls should not be made;Java, bug, cert
critical;Inappropriate regular expressions should not be used;Java, bug
major;Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression;Java, cert, misra
major;Inheritance tree of classes should not be too deep;Java, design
major;Inner class calls to super class methods should be unambiguous;Java, pitfall
major;Inner classes should not have too many lines;Java, brain-overload
major;Inner classes which do not reference their owning classes should be "static";Java, performance
critical;Instance methods should not write to "static" fields;Java, bug, multi-threading
minor;Interface names should comply with a naming convention;Java, convention
critical;Ints and longs should not be shifted by zero or more than their number of bits-1;Java, bug, cert
critical;Invalid "Date" values should not be used;Java, bug
critical;IP addresses should not be hardcoded;Java, cert, security
major;Java parser failure;Java, suspicious
blocker;Jump statements should not occur in "finally" blocks;Java, bug, cert, cwe, error-handling
major;JUnit assertions should include messages;Java, tests
critical;JUnit assertions should not be used in "run" methods;Java, bug, tests
critical;JUnit framework methods should be declared properly;Java, bug, tests
major;JUnit rules should be used;Java, tests, unused
critical;JUnit test cases should call super methods;Java, bug, tests
major;Labels should not be used;Java, confusing
major;Lambdas and anonymous classes should not have too many lines;Java, java8
minor;Lambdas should be replaced with method references;Java, java8
major;Lamdbas containing only one statement should not nest this statement in a block;Java, java8
critical;Lazy initialization of "static" fields should be "synchronized";Java, bug, multi-threading
major;Limited dependence should be placed on operator precedence rules in expressions;Java, cert, cwe, misra
major;Lines should have sufficient coverage by unit tests;Java, bad-practice
minor;Lines should not be too long;Java, convention
major;Literal boolean values should not be used in assertions;Java, junit
minor;Literal suffixes should be upper case;Java, cert, convention, misra, pitfall
minor;Local variable and method parameter names should comply with a naming convention;Java, convention
minor;Local Variables should not be declared and then immediately returned or thrown;Java, clumsy
major;Local variables should not shadow class fields;Java, cert, pitfall
major;Locale should be used in String operations;Java, cert, unpredictable
critical;Locks should be released;Java, bug, cwe, multi-threading
minor;Loggers should be "private static final" and should share a naming convention;Java, convention
minor;Long suffix "L" should be upper case;DEPRECATED, Java, convention
critical;Loop conditions should be true at least once;Java, bug
blocker;Loops should not be infinite;Java, bug, cert
major;Loops should not contain more than a single "break" or "continue" statement;Java, brain-overload
minor;Magic numbers should not be used;Java, brain-overload
major;Maps with keys that are enum values should be replaced with EnumMap;Java, performance
critical;Math operands should be cast before assignment;Java, bug, cert, cwe, sans-top25-risky
critical;Math should not be performed on floats;Java, bug, cert
critical;Member variable visibility should be specified;Java, security
minor;Method names should comply with a naming convention;Java, convention
major;Method overrides should not change contracts;Java, suspicious
major;Method parameters, caught exceptions and foreach variables should not be reassigned;Java, misra, pitfall
blocker;Methods "wait(...)", "notify()" and "notifyAll()" should not be called on Thread instances;Java, bug, multi-threading
major;Methods and field names should not be the same or differ only by capitalization;Java, confusing
major;Methods named "equals" should override Object.equals(Object);Java, suspicious
major;Methods of "Random" that return floating point values should not be used in random integer generation;Java, clumsy
major;Methods should not be empty;Java, suspicious
critical;Methods should not be named "hashcode" or "equal";Java, bug, pitfall
major;Methods should not be too complex;Java, brain-overload
major;Methods should not have too many lines;Java, brain-overload
major;Methods should not have too many parameters;Java, brain-overload
major;Methods should not have too many return statements;Java, brain-overload
major;Methods should not return constants;Java, confusing
minor;Modifiers should be declared in the correct order;Java, convention, psr2
major;Modulus results should not be checked for direct equality;Java, cert, suspicious
critical;Multiline blocks should be enclosed in curly braces;Java, bug, cert, cwe
major;Multiple loops over the same set should be combined;Java, performance
minor;Multiple variables should not be declared on the same line;Java, cert, convention, misra
critical;Mutable fields should not be "public static";Java, cert, cwe, security, unpredictable
critical;Mutable members should not be stored or returned directly;Java, cert, cwe, security, unpredictable
critical;Neither "Math.abs" nor negation should be used on numbers that could be "MIN_VALUE";Java, bug
critical;Neither DES (Data Encryption Standard) nor DESede (3DES) should be used;Java, cert, cwe, owasp-a6, sans-top25-porous, security
major;Nested "enum"s should not be declared static;Java, clumsy
major;Nested blocks of code should not be left empty;Java, suspicious
major;Nested code blocks should not be used;Java, bad-practice
major;Non-constructor methods should not have the same name as the enclosing class;Java, pitfall
critical;Non-public methods should not be "@Transactional";Java, bug, spring
critical;Non-serializable classes should not be written;Java, bug, serialization
critical;Non-serializable objects should not be stored in "HttpSession" objects;Java, bug, cwe
critical;Non-thread-safe fields should not be static;Java, bug, multi-threading
blocker;Null pointers should not be dereferenced;Java, bug, cert, cwe, owasp-a1, owasp-a2, owasp-a6, security
major;Null should not be returned from a "Boolean" method;Java, pitfall
major;Objects should be compared with "equals()";Java, cert, cwe
major;Objects should not be created only to "getClass";Java, performance
critical;Objects should not be created to be dropped immediately without being used;DEPRECATED, Java, bug
major;Octal values should not be used;Java, cert, misra, pitfall
blocker;Only standard cryptographic algorithms should be used;Java, cwe, owasp-a6, sans-top25-porous, security
major;Only static class initializers should be used;Java, pitfall
minor;Overriding methods should do more than simply call the same method in the super class;Java, clumsy
major;Package declaration should match source file directory;Java, pitfall
minor;Package names should comply with a naming convention;Java, convention
minor;Packages should have a javadoc file 'package-info.java';Java, convention
minor;Parentheses should be removed from a single lambda input parameter when its type is inferred;Java, java8
major;Parsing should be used to convert "Strings" to primitives;Java, performance
minor;pom elements should be in the recommended order;Java, convention, maven
major;Primitive wrappers should not be instantiated only for "toString" or "compareTo" calls;Java, clumsy
major;Primitives should not be boxed just for "String" conversion;Java, performance
critical;Printf-style format strings should not lead to unexpected behavior at runtime;Java, bug, cert, pitfall
critical;Pseudorandom number generators (PRNGs) should not be used in secure contexts;Java, cert, cwe, owasp-a6, security
minor;Public constants and fields initialized at declaration should be "static final" rather than merely "final";Java, convention
major;Public methods should not contain selector arguments;Java, design
major;Public methods should throw at most one checked exception;Java, error-handling
minor;Public types, methods and fields (API) should be documented with Javadoc;Java, convention
critical;Raw byte values should not be used in bitwise operations in combination with shifts;Java, bug, cert
minor;Redundant casts should not be used;Java, clumsy
minor;Redundant modifiers should not be used;Java, clumsy, finding
blocker;Reflection should not be used to check non-runtime annotations;Java, bug
critical;Related "if/else if" statements should not have the same condition;Java, bug, cert, pitfall, unused
blocker;Resources should be closed;Java, bug, cert, cwe, denial-of-service, leak, security
minor;Return of boolean expressions should not be wrapped into an "if-then-else" statement;Java, clumsy
critical;Return values should not be ignored when function calls don't have any side effects;Java, bug, cert, misra
critical;Return values should not be ignored when they contain the operation status code;Java, cert, cwe, error-handling, misra, security
major;Sections of code should not be "commented out";Java, misra, unused
critical;Security constraints should be defined;Java, cwe, jee, owasp-a7, security, websphere
critical;Servlets should not have mutable instance fields;Java, bug, cert, multi-threading, struts
major;Sets with elements that are enum values should be replaced with EnumSet;Java, performance
critical;SHA-1 and Message-Digest hash algorithms should not be used;Java, cwe, owasp-a6, sans-top25-porous, security
critical;Short-circuit logic should be used in boolean contexts;Java, bug, cert
blocker;Short-circuit logic should be used to prevent null pointer dereferences in conditionals;Java, bug
major;Silly bit operations should not be performed;Java, suspicious
critical;Silly equality checks should not be made;Java, bug, cert, unused
major;Silly math should not be performed;Java, clumsy
major;Skipped unit tests should be either removed or fixed;Java, pitfall
minor;Source code should be indented consistently;Java, convention
major;Source files should have a sufficient density of comment lines;Java, convention
major;Source files should not have any duplicated blocks;Java, pitfall
major;Standard outputs should not be used directly to log anything;Java, bad-practice, cert
minor;Statements should be on separate lines;Java, convention
minor;Static non-final field names should comply with a naming convention;Java, convention
minor;String function use should be optimized for single characters;Java, clumsy, performance
minor;String literals should not be duplicated;Java, design
minor;String.valueOf() should not be appended to a String;Java, clumsy
major;Strings literals should be placed on the left side when checking for equality;Java, bad-practice
critical;Strings should be compared using "equals()";DEPRECATED, Java, bug, cwe
major;Strings should not be concatenated using '+' in a loop;Java, performance
critical;Struts validation forms should have unique names;Java, bug, cwe, struts
major;Subclasses that add fields should override "equals";Java, suspicious
blocker;super.finalize() should be called at the end of Object.finalize() implementations;Java, bug, cert, cwe
major;Switch cases should end with an unconditional "break" statement;Java, cert, cwe, misra, suspicious
blocker;Synchronization should not be based on Strings or boxed primitives;Java, bug, cert, multi-threading
major;Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used;Java, multi-threading, performance
minor;Tabulation characters should not be used;Java, convention
major;TestCases should contain tests;Java, confusing, tests, unused
critical;Tests should include assertions;Java, tests
major;Tests should not be ignored;Java, suspicious, tests
info;The @SuppressWarnings annotation should not be used;Java
critical;The Array.equals(Object obj) method should not be used;DEPRECATED, Java, bug
minor;The default unnamed package should not be used;Java, convention
major;The diamond operator ("&lt;&gt;") should be used;Java, clumsy
minor;The members of an interface declaration or class should appear in a pre-defined order;Java, convention
critical;The non-serializable super class of a "Serializable" class should have a no-argument constructor;Java, bug, serialization
critical;The Object.finalize() method should not be called;Java, cert, cwe, security
major;The Object.finalize() method should not be overriden;Java, cert, unpredictable
major;The signature of "finalize()" should match that of "Object.finalize()";Java, pitfall
major;The ternary operator should not be used;Java, brain-overload
blocker;The value returned from a stream read should be checked;Java, bug, cert
critical;Thread.run() should not be called directly;Java, bug, cert, cwe, multi-threading
major;Threads should not be started in constructors;Java, multi-threading, pitfall
blocker;Throwable and Error should not be caught;Java, cert, cwe, error-handling, security
critical;Throwable.printStackTrace(...) should not be called;Java, error-handling, security
minor;Throws declarations should not be superfluous;Java, clumsy, unused
major;Try-catch blocks should not be nested;Java, confusing
major;Try-with-resources should be used;Java, cert, pitfall
major;Two branches in the same conditional structure should not have exactly the same implementation;Java, design, suspicious
minor;Type parameter names should comply with a naming convention;Java, convention
critical;Untrusted data should not be stored in sessions;Java, cwe, security
major;Unused "private" fields should be removed;Java, cert, unused
major;Unused "private" methods should be removed;Java, cert, unused
major;Unused labels should be removed;Java, cert, misra, unused
major;Unused local variables should be removed;Java, unused
major;Unused method parameters should be removed;Java, cert, misra, unused
major;Unused protected methods should be removed;Java, unused
major;Unused type parameters should be removed;Java, cert, unused
major;Useless "if(true) {...}" and "if(false){...}" blocks should be removed;Java, bug, cwe, misra, security
minor;Useless imports should be removed;Java, unused
major;Useless parentheses around expressions should be removed to prevent any misunderstanding;Java, confusing
major;Utility classes should not have public constructors;Java, design
critical;Values passed to LDAP queries should be sanitized;Java, cert, cwe, owasp-a1, security
critical;Values passed to OS commands should be sanitized;Java, cwe, owasp-a1, sans-top25-insecure, security
critical;Values passed to SQL commands should be sanitized;Java, cert, cwe, hibernate, owasp-a1, sans-top25-insecure, security, sql
critical;Values should not be uselessly incremented;Java, bug
major;Variables should not be declared before they are relevant;Java, brain-overload
critical;Variables should not be self-assigned;Java, bug, cert
critical;Web applications should not have a "main" method;Java, cert, cwe, jee, security
critical;Web applications should use validation filters;Java, injection, owasp-a1, security
major;Wildcard imports should not be used;Java, pitfall