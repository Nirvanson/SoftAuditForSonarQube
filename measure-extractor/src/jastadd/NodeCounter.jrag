aspect NodeCounter {
	coll java.util.Collection<CompilationUnit> Program.extractedSourceFiles() [new java.util.ArrayList<CompilationUnit>()] with add root Program;
	CompilationUnit contributes this when this.fromSource() to Program.extractedSourceFiles();
	
	coll java.util.Collection<MethodDecl> Program.extractedMethodDeclarations() [new java.util.ArrayList<MethodDecl>()] with add root Program;
	MethodDecl contributes this when !this.isPrivate() to Program.extractedMethodDeclarations();
	
	coll java.util.Collection<MethodDecl> Program.extractedPrivateMethodDeclarations() [new java.util.ArrayList<MethodDecl>()] with add root Program;
	MethodDecl contributes this when this.isPrivate() to Program.extractedPrivateMethodDeclarations();
	
	coll java.util.Collection<IfStmt> Program.extractedIfStatements() [new java.util.ArrayList<IfStmt>()] with add root Program;
	IfStmt contributes this to Program.extractedIfStatements();
	
	coll java.util.Collection<BranchTargetStmt> Program.extractedLoopStatements() [new java.util.ArrayList<BranchTargetStmt>()] with add root Program;
	DoStmt contributes this to Program.extractedLoopStatements();
	WhileStmt contributes this to Program.extractedLoopStatements();
	ForStmt contributes this to Program.extractedLoopStatements();
	EnhancedForStmt contributes this to Program.extractedLoopStatements();
	
	coll java.util.Collection<SwitchStmt> Program.extractedSwitchStatements() [new java.util.ArrayList<SwitchStmt>()] with add root Program;
	SwitchStmt contributes this to Program.extractedSwitchStatements();
	
	coll java.util.Collection<Case> Program.extractedSwitchCases() [new java.util.ArrayList<Case>()] with add root Program;
	Case contributes this to Program.extractedSwitchCases();
	
	coll java.util.Collection<ClassDecl> Program.extractedClassDeclarations() [new java.util.ArrayList<ClassDecl>()] with add root Program;
	ClassDecl contributes this to Program.extractedClassDeclarations();
	
	coll java.util.Collection<NumericLiteral> Program.extractedNumericLiterals() [new java.util.ArrayList<NumericLiteral>()] with add root Program;
	NumericLiteral contributes this to Program.extractedNumericLiterals();
	
	coll java.util.Collection<InterfaceDecl> Program.extractedInterfaceDeclarations() [new java.util.ArrayList<InterfaceDecl>()] with add root Program;
	InterfaceDecl contributes this to Program.extractedInterfaceDeclarations();
	
	coll java.util.Collection<StringLiteral> Program.extractedStringLiterals() [new java.util.ArrayList<StringLiteral>()] with add root Program;
	StringLiteral contributes this to Program.extractedStringLiterals();
	
	coll java.util.Collection<ParameterDeclaration> Program.extractedParameters() [new java.util.ArrayList<ParameterDeclaration>()] with add root Program;
	ParameterDeclaration contributes this when !this.isExceptionHandlerParameter() to Program.extractedParameters();
	
	coll java.util.Collection<ReturnStmt> Program.extractedReturnStatements() [new java.util.ArrayList<ReturnStmt>()] with add root Program;
	ReturnStmt contributes this to Program.extractedReturnStatements();
	
	coll java.util.Collection<Stmt> Program.extractedStatements() [new java.util.ArrayList<Stmt>()] with add root Program;
	Stmt contributes this to Program.extractedStatements();
	
	coll java.util.Collection<ASTNode> Program.extractedImports() [new java.util.ArrayList<ASTNode>()] with add root Program;
	ImportDecl contributes this to Program.extractedImports();
	CompilationUnit contributes this when this.hasPackageDecl() to Program.extractedImports();
}