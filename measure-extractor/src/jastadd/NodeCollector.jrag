aspect NodeCollector {
	// BRA - Branches (2 for each loop, if and try; 1 for each case, catch and return)
	coll java.util.Collection<String> Program.extractedBranches() [new java.util.ArrayList<String>()] with add root Program;
	IfStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";If-True-Branch") to Program.extractedBranches();
	IfStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";If-False-Branch") to Program.extractedBranches();
	DoStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";Do-True-Branch") to Program.extractedBranches();
	WhileStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";While-True-Branch") to Program.extractedBranches();
	ForStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";For-True-Branch") to Program.extractedBranches();
	EnhancedForStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";EnhancedFor-True-Branch") to Program.extractedBranches();
	DoStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";Do-False-Branch") to Program.extractedBranches();
	WhileStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";While-False-Branch") to Program.extractedBranches();
	ForStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";For-False-Branch") to Program.extractedBranches();
	EnhancedForStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";EnhancedFor-False-Branch") to Program.extractedBranches();
	TryStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";Try-Success-Branch") to Program.extractedBranches();
	TryStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";Try-Failed-Branch") to Program.extractedBranches();
	CatchClause contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";Catch-Branch") to Program.extractedBranches();
	ReturnStmt contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";Return-Branch") to Program.extractedBranches();
	Case contributes ("BRA;" + this.compilationUnit().pathName() + ";" + this.location() + ";Case-Branch") to Program.extractedBranches();
		
	// CLA - Class declarations
	coll java.util.Collection<String> Program.extractedClassDeclarations() [new java.util.ArrayList<String>()] with add root Program;
	ClassDecl contributes ("CLA;" + this.compilationUnit().pathName() + ";" + this.location() + ";") to Program.extractedClassDeclarations();
	LocalClassDeclStmt contributes ("CLA;" + this.compilationUnit().pathName() + ";" + this.location() + ";Local") to Program.extractedClassDeclarations();
		
	// DTY - Data types (HashSet)
	coll java.util.Collection<String> Program.extractedDataTypes() [new java.util.HashSet<String>()] with add root Program;
	TypeDecl contributes ("DTY;" + this.name()) to Program.extractedDataTypes();
	TypeAccess contributes ("DTY;" + this.name()) to Program.extractedDataTypes();
		
	// FMC - Foreign method calls (not standard java and not in measured program)
	coll java.util.Collection<String> Program.extractedForeignMethodCalls() [new java.util.ArrayList<String>()] with add root Program;
	MethodAccess contributes ("FMC;" + this.compilationUnit().pathName() + ";" + this.location() + ";") when (this.decl().name().equals("unknown")) to Program.extractedForeignMethodCalls();
			
	// GVA - Global variable declarations (fields)
	coll java.util.Collection<String> Program.extractedGlobalVariables() [new java.util.ArrayList<String>()] with add root Program;
	FieldDeclarator contributes ("GVA;" + this.compilationUnit().pathName() + ";" + this.location() + ";" + this.name()) to Program.extractedGlobalVariables();
		
	// IFS - If-statements (and Try-statements)
	coll java.util.Collection<String> Program.extractedIfStatements() [new java.util.ArrayList<String>()] with add root Program;
	IfStmt contributes ("IFS;" + this.compilationUnit().pathName() + ";" + this.location() + ";If") to Program.extractedIfStatements();
	TryStmt contributes ("IFS;" + this.compilationUnit().pathName() + ";" + this.location() + ";Try") to Program.extractedIfStatements();
		
	// IMP - Imports (including package declaration)
	coll java.util.Collection<String> Program.extractedImports() [new java.util.ArrayList<String>()] with add root Program;
	ImportDecl contributes ("IMP;" + this.compilationUnit().pathName() + ";" + this.location() + ";Import") to Program.extractedImports();
	CompilationUnit contributes ("IMP;" + this.pathName() + ";;Package") when (this.hasPackageDecl()) to Program.extractedImports();
		
	// INT - Interface declarations
	coll java.util.Collection<String> Program.extractedInterfaceDeclarations() [new java.util.ArrayList<String>()] with add root Program;
	InterfaceDecl contributes ("INT;" + this.compilationUnit().pathName() + ";" + this.location() + ";") to Program.extractedInterfaceDeclarations();
		
	// LOS - Loop-statements (DoWhile, While, For, EnhancedFor)
	coll java.util.Collection<String> Program.extractedLoopStatements() [new java.util.ArrayList<String>()] with add root Program;
	DoStmt contributes ("LOS;" + this.compilationUnit().pathName() + ";" + this.location() + ";DoWhile") to Program.extractedLoopStatements();
	WhileStmt contributes ("LOS;" + this.compilationUnit().pathName() + ";" + this.location() + ";While") to Program.extractedLoopStatements();
	ForStmt contributes ("LOS;" + this.compilationUnit().pathName() + ";" + this.location() + ";For") to Program.extractedLoopStatements();
	EnhancedForStmt contributes ("LOS;" + this.compilationUnit().pathName() + ";" + this.location() + ";EnhancedFor") to Program.extractedLoopStatements();
			
	// MEC - Method calls
	coll java.util.Collection<String> Program.extractedMethodCalls() [new java.util.ArrayList<String>()] with add root Program;
	MethodAccess contributes ("MEC;" + this.compilationUnit().pathName() + ";" + this.location() + ";") to Program.extractedMethodCalls();
		
	// MPA - Method parameters
	coll java.util.Collection<String> Program.extractedParameters() [new java.util.ArrayList<String>()] with add root Program;
	ParameterDeclaration contributes ("MPA;" + this.compilationUnit().pathName() + ";" + this.location() + ";") when (!this.isExceptionHandlerParameter()) to Program.extractedParameters();
		
	// NPR - Non-predicate-references
	coll java.util.Collection<String> Program.extractedNonPredicates() [new java.util.ArrayList<String>()] with add root Program;
	VarAccess contributes ("NPR;" + this.compilationUnit().pathName() + ";" + this.location() + ";") when (!this.isPredicate()) to Program.extractedNonPredicates();
		
	// NUL - Numeric literals
	coll java.util.Collection<String> Program.extractedNumericLiterals() [new java.util.ArrayList<String>()] with add root Program;
	NumericLiteral contributes ("NUL;" + this.compilationUnit().pathName() + ";" + this.location() + ";" + this.getLITERAL()) when (this.getLITERAL().length()>5 || !(Double.valueOf(this.getLITERAL()).equals(0.0D) || Double.valueOf(this.getLITERAL()).equals(1.0D) || Double.valueOf(this.getLITERAL()).equals(-1.0D))) to Program.extractedNumericLiterals();
		
	// PRE - Predicates (variable references in loop/if/switch-conditions)
	coll java.util.Collection<String> Program.extractedPredicates() [new java.util.ArrayList<String>()] with add root Program;
	VarAccess contributes ("PRE;" + this.compilationUnit().pathName() + ";" + this.location() + ";") when (this.isPredicate()) to Program.extractedPredicates();
		
	// PRM - Private method declarations
	coll java.util.Collection<String> Program.extractedPrivateMethodDeclarations() [new java.util.ArrayList<String>()] with add root Program;
	MethodDecl contributes ("PRM;" + this.compilationUnit().pathName() + ";" + this.location() + ";") when (this.isPrivate()) to Program.extractedPrivateMethodDeclarations();
		
	// PUM - Non private method declarations
	coll java.util.Collection<String> Program.extractedPublicMethodDeclarations() [new java.util.ArrayList<String>()] with add root Program;
	MethodDecl contributes ("PUM;" + this.compilationUnit().pathName() + ";" + this.location() + ";") when (!this.isPrivate()) to Program.extractedPublicMethodDeclarations();
		
	// RES - Return statements
	coll java.util.Collection<String> Program.extractedReturnStatements() [new java.util.ArrayList<String>()] with add root Program;
	ReturnStmt contributes ("RES;" + this.compilationUnit().pathName() + ";" + this.location() + ";") to Program.extractedReturnStatements();
		
	// RUM - Reusable methods
	coll java.util.Collection<String> Program.extractedReusableMethods() [new java.util.ArrayList<String>()] with add root Program;
	MethodDecl contributes ("RUM;" + this.compilationUnit().pathName() + ";" + this.location() + ";") when (this.containingForeignMethodCalls().isEmpty()) to Program.extractedReusableMethods();
		
	// SOF - Scanned source-files
	coll java.util.Collection<String> Program.extractedSourceFiles() [new java.util.ArrayList<String>()] with add root Program;
	CompilationUnit contributes ("SOF;" + this.pathName() + ";;") when (this.fromSource()) to Program.extractedSourceFiles();
	
	// STA - Statements
	coll java.util.Collection<String> Program.extractedStatements() [new java.util.ArrayList<String>()] with add root Program;
	Stmt contributes ("STA;" + this.compilationUnit().pathName() + ";" + this.location() + ";") to Program.extractedStatements();
		
	// STL - String literals
	coll java.util.Collection<String> Program.extractedStringLiterals() [new java.util.ArrayList<String>()] with add root Program;
	StringLiteral contributes ("STL;" + this.compilationUnit().pathName() + ";" + this.location() + ";") to Program.extractedStringLiterals();

	// STY - Statement types (HashSet)
	coll java.util.Collection<String> Program.extractedStatementTypes() [new java.util.HashSet<String>()] with add root Program;
	IfStmt contributes ("STY;If-Statement") to Program.extractedStatementTypes();
	AssertStmt contributes ("STY;Assert-Statement") to Program.extractedStatementTypes();
	MonitorExit contributes ("STY;Monitor-Exit-Statement") to Program.extractedStatementTypes();
	NTAFinallyBlock contributes ("STY;NTA-Finally-Statement") to Program.extractedStatementTypes();
	Block contributes ("STY;Block-Statement") when (!(this instanceof MonitorExit || this instanceof NTAFinallyBlock)) to Program.extractedStatementTypes();
	DoStmt contributes ("STY;Do-While-Statement") to Program.extractedStatementTypes();
	EnhancedForStmt contributes ("STY;Enhanced-For-Statement") to Program.extractedStatementTypes();
	ForStmt contributes ("STY;For-Statement") to Program.extractedStatementTypes();
	LabeledStmt contributes ("STY;Labeled-Statement") to Program.extractedStatementTypes();
	SwitchStmt contributes ("STY;Switch-Statement") to Program.extractedStatementTypes();
	WhileStmt contributes ("STY;While-Statement") to Program.extractedStatementTypes();
	BranchTargetStmt contributes ("STY;Branch-Target-Statement") when (!(this instanceof DoStmt || this instanceof EnhancedForStmt || this instanceof ForStmt || this instanceof LabeledStmt || this instanceof SwitchStmt || this instanceof WhileStmt)) to Program.extractedStatementTypes();
	ConstCase contributes ("STY;Const-Case-Statement") to Program.extractedStatementTypes();
	DefaultCase contributes ("STY;Default-Case-Statement") to Program.extractedStatementTypes();
	Case contributes ("STY;Case-Statement") when (!(this instanceof ConstCase || this instanceof DefaultCase)) to Program.extractedStatementTypes();
	ContinueStmt contributes ("STY;Continue-Statement") to Program.extractedStatementTypes();
	EmptyStmt contributes ("STY;Empty-Statement") to Program.extractedStatementTypes();
	ExprStmt contributes ("STY;Expression-Statement in " + this.compilationUnit().pathName() + " on line " + this.location()) to Program.extractedStatementTypes();
	LocalClassDeclStmt contributes ("STY;Local-Class-Declaration-Statement") to Program.extractedStatementTypes();
	ReturnStmt contributes ("STY;Return-Statement") to Program.extractedStatementTypes();
	SynchronizedStmt contributes ("STY;Synchronized-Statement") to Program.extractedStatementTypes();
	ThrowStmt contributes ("STY;Throw-Statement") to Program.extractedStatementTypes();
	TryWithResources contributes ("STY;Try-With-Resources-Statement") to Program.extractedStatementTypes();
	TryStmt contributes ("STY;Try-Statement") when (!(this instanceof TryWithResources)) to Program.extractedStatementTypes();
	VarDeclStmt contributes ("STY;Variable-Declaration-Statement") to Program.extractedStatementTypes();
	BreakStmt contributes ("STY;Break-Statement") to Program.extractedStatementTypes();
	Stmt contributes ("STY;Statement in " + this.compilationUnit().pathName() + " on line " + this.location()) when (!(this instanceof BreakStmt || this instanceof IfStmt || this instanceof AssertStmt || this instanceof MonitorExit || this instanceof NTAFinallyBlock || this instanceof Block || this instanceof DoStmt || this instanceof EnhancedForStmt || this instanceof ForStmt || this instanceof LabeledStmt || this instanceof SwitchStmt || this instanceof WhileStmt || this instanceof BranchTargetStmt || this instanceof ConstCase || this instanceof DefaultCase || this instanceof Case || this instanceof ContinueStmt || this instanceof EmptyStmt || this instanceof ExprStmt || this instanceof LocalClassDeclStmt || this instanceof ReturnStmt || this instanceof SynchronizedStmt || this instanceof ThrowStmt || this instanceof TryWithResources || this instanceof TryStmt || this instanceof VarDeclStmt)) to Program.extractedStatementTypes();

	// SWC - Switch-cases
	coll java.util.Collection<String> Program.extractedSwitchCases() [new java.util.ArrayList<String>()] with add root Program;
	Case contributes ("SWC;" + this.compilationUnit().pathName() + ";" + this.location() + ";") to Program.extractedSwitchCases();
		
	// SWS - Switch-statements
	coll java.util.Collection<String> Program.extractedSwitchStatements() [new java.util.ArrayList<String>()] with add root Program;
	SwitchStmt contributes ("SWS;" + this.compilationUnit().pathName() + ";" + this.location() + ";") to Program.extractedSwitchStatements();
	
	// VAR - Variable declarations (fields and local variables)
	coll java.util.Collection<String> Program.extractedVariables() [new java.util.ArrayList<String>()] with add root Program;
	VariableDeclarator contributes ("VAR;" + this.compilationUnit().pathName() + ";" + this.location() + ";Local") when (this.isLocalVariable()) to Program.extractedVariables();
	FieldDeclarator contributes ("VAR;" + this.compilationUnit().pathName() + ";" + this.location() + ";Field") to Program.extractedVariables();
	
	// VRE - Variable references
	coll java.util.Collection<String> Program.extractedVariableReferences() [new java.util.ArrayList<String>()] with add root Program;
	VarAccess contributes ("VRE;" + this.compilationUnit().pathName() + ";" + this.location() + ";") to Program.extractedVariableReferences();
}