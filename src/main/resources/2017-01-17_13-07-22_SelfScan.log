 ---------- File: FileNormalizer.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:22:837
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:22:844
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:22:848
*** Step 4 - Expand model with details
*** Finished at 13:07:22:869
PACKAGE - Statement:[package, plugin, ., analyser, ;]
IMPORT - Statement:[import, java, ., io, ., BufferedReader, ;]
IMPORT - Statement:[import, java, ., io, ., File, ;]
IMPORT - Statement:[import, java, ., io, ., FileReader, ;]
IMPORT - Statement:[import, java, ., util, ., ArrayList, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
IMPORT - Statement:[import, plugin, ., util, ., Logger, ;]
IMPORT - Statement:[import, plugin, ., util, ., ParsingException, ;]
IMPORT - Statement:[import, plugin, ., model, ., KeyWord, ;]
CLASS with name: FileNormalizer and Body:
	METHOD with name: doFileNormalization, Returntype: List < WordInFile > , Parameters: File  file and Body:
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[List, <, String, >, normalizedLines, =, prepareFile, (, file, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[String, singleLineCode, =, FileNormalizer, ., convertToSingleString, (, normalizedLines, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[List, <, WordInFile, >, wordList, =, FileNormalizer, ., createJavaWordList, (, singleLineCode, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 2 methods:[Logger, ., getLogger, (, null, ), ., printWords, (, wordList, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, wordList, ;]
	METHOD with name: prepareFile, Returntype: List < String > , Parameters: File  file and Body:
		TRY - ControlStatement / declaring 1 variables / with try-block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, String, >, result, =, new, ArrayList, , String, , (, ), ;]
			ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 2 methods:[BufferedReader, br, =, new, BufferedReader, (, new, FileReader, (, file, ), ), ;]
			VARDECLARATION - Statement / declaring 1 variables:[String, fileline, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[boolean, isLiteralA, =, false, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[boolean, isLiteralB, =, false, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[boolean, blockComment, =, false, ;]
			WHILE - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (( fileline = br . readLine ( ) ) ! = null ) with content:
				ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[String, line, =, fileline, ., trim, (, ), ;]
				ASSIGNMENT - Statement / declaring 1 variables:[String, newLine, =, ", ;]
				ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[String, [, ], chars, =, line, ., split, (, ", ), ;]
				FOR - ControlStatement / declaring 1 variables / referencing 3 variables / With initialization: (int i = 0 ) termination: (i < chars . length ) increment: (i + + ) and content:
					ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables:[String, c, =, chars, [, i, ], ;]
					IF - ControlStatement / referencing 3 variables / Checking condition: (! blockComment & & ! isLiteralA & & ! isLiteralB ) with if-block:
						SWITCH - ControlStatement / referencing 1 variables / over value of : (c ) and cases:
							CASE - ControlStatement / for case: (" ) and content:
								ASSIGNMENT - Statement / referencing 1 variables:[isLiteralA, =, true, ;]
								ASSIGNMENT - Statement / referencing 1 variables:[newLine, +, =, ', ;]
								BREAK - ControlStatement / :[break, ;]
							CASE - ControlStatement / for case: (" ) and content:
								ASSIGNMENT - Statement / referencing 1 variables:[isLiteralB, =, true, ;]
								ASSIGNMENT - Statement / referencing 1 variables:[newLine, +, =, ", ;]
								BREAK - ControlStatement / :[break, ;]
							CASE - ControlStatement / for case: (" ) and content:
								IF - ControlStatement / referencing 4 variables / calling 1 methods / Checking condition: (chars . length > i + 1 & & chars [ i + 1 ] . equals ( " ) ) with if-block:
									ASSIGNMENT - Statement / referencing 2 variables:[i, =, chars, ., length, ;]
								ELSE - block:
									IF - ControlStatement / referencing 4 variables / calling 1 methods / Checking condition: (chars . length > i + 1 & & chars [ i + 1 ] . equals ( " ) ) with if-block:
										ASSIGNMENT - Statement / referencing 1 variables:[blockComment, =, true, ;]
										INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
									ELSE - block:
										ASSIGNMENT - Statement / referencing 2 variables:[newLine, +, =, c, ;]
								BREAK - ControlStatement / :[break, ;]
							CASE - ControlStatement / for case: (default ) and content:
								ASSIGNMENT - Statement / referencing 2 variables:[newLine, +, =, c, ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / Checking condition: (blockComment ) with if-block:
							IF - ControlStatement / referencing 5 variables / calling 2 methods / Checking condition: (c . equals ( " ) & & chars . length > i + 1 & & chars [ i + 1 ] . equals ( " ) ) with if-block:
								INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
								ASSIGNMENT - Statement / referencing 1 variables:[newLine, +, =, ", ;]
								ASSIGNMENT - Statement / referencing 1 variables:[blockComment, =, false, ;]
						ELSE - block:
							IF - ControlStatement / referencing 2 variables / Checking condition: (isLiteralA | | isLiteralB ) with if-block:
								IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (c . equals ( " ) ) with if-block:
									INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / Checking condition: (isLiteralA ) with if-block:
										IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (c . equals ( " ) ) with if-block:
											ASSIGNMENT - Statement / referencing 1 variables:[isLiteralA, =, false, ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / Checking condition: (isLiteralB ) with if-block:
											IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (c . equals ( " ) ) with if-block:
												ASSIGNMENT - Statement / referencing 1 variables:[isLiteralB, =, false, ;]
				ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[String, resultLine, =, newLine, ., trim, (, ), ;]
				WHILE - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (resultLine . contains ( " ) ) with content:
					ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[resultLine, =, resultLine, ., replaceAll, (, ", ,, ", ), ;]
				IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! resultLine . isEmpty ( ) ) with if-block:
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, resultLine, ), ;]
			METHODCALL - Statement / referencing 1 variables / calling 1 methods:[br, ., close, (, ), ;]
			RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: convertToSingleString, Returntype: String , Parameters: List < String >  lines and Body:
		TRY - ControlStatement / declaring 1 variables / with try-block:
			ASSIGNMENT - Statement / declaring 1 variables:[String, fullCode, =, ", ;]
			FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (String line : lines ) with content:
				ASSIGNMENT - Statement / referencing 2 variables:[fullCode, +, =, (, line, +, ", ), ;]
			ASSIGNMENT - Statement / declaring 1 variables:[String, normalizedCode, =, ", ;]
			ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[String, [, ], chars, =, fullCode, ., split, (, ", ), ;]
			FOR - ControlStatement / declaring 1 variables / referencing 3 variables / With initialization: (int i = 0 ) termination: (i < chars . length ) increment: (i + + ) and content:
				IF - ControlStatement / referencing 6 variables / calling 2 methods / Checking condition: (chars [ i ] . equals ( " ) & & chars . length > i + 1 & & ModelBuildHelper . breaks . contains ( chars [ i + 1 ] ) ) with if-block:
					CONTINUE - ControlStatement / :[continue, ;]
				ASSIGNMENT - Statement / referencing 3 variables:[normalizedCode, +, =, chars, [, i, ], ;]
				IF - ControlStatement / referencing 6 variables / calling 2 methods / Checking condition: (ModelBuildHelper . breaks . contains ( chars [ i ] ) & & chars . length > i + 1 & & chars [ i + 1 ] . equals ( " ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			RETURN - ControlStatement / referencing 1 variables / :[return, normalizedCode, ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: createJavaWordList, Returntype: List < WordInFile > , Parameters: String  normalizedCode and Body:
		TRY - ControlStatement / declaring 1 variables / with try-block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, step1, =, new, ArrayList, , WordInFile, , (, ), ;]
			ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[String, [, ], chars, =, normalizedCode, ., split, (, ", ), ;]
			ASSIGNMENT - Statement / declaring 1 variables:[String, word, =, ", ;]
			FOR - ControlStatement / declaring 1 variables / referencing 3 variables / With initialization: (int i = 0 ) termination: (i < chars . length ) increment: (i + + ) and content:
				IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (ModelBuildHelper . breaks . contains ( chars [ i ] ) ) with if-block:
					IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! word . isEmpty ( ) ) with if-block:
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[step1, ., add, (, KeyWord, ., findKeyword, (, word, ), ), ;]
						ASSIGNMENT - Statement / referencing 1 variables:[word, =, ", ;]
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[step1, ., add, (, KeyWord, ., findKeyword, (, chars, [, i, ], ), ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (chars [ i ] . equals ( " ) ) with if-block:
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[step1, ., add, (, KeyWord, ., findKeyword, (, word, ), ), ;]
						ASSIGNMENT - Statement / referencing 1 variables:[word, =, ", ;]
					ELSE - block:
						ASSIGNMENT - Statement / referencing 3 variables:[word, +, =, chars, [, i, ], ;]
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, result, =, new, ArrayList, , WordInFile, , (, ), ;]
			ASSIGNMENT - Statement / declaring 1 variables:[int, annotationState, =, 0, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[int, openParentheses, =, 0, ;]
			FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < step1 . size ( ) ) increment: (i + + ) and content:
				ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[WordInFile, wordInStep1, =, step1, ., get, (, i, ), ;]
				SWITCH - ControlStatement / referencing 1 variables / over value of : (annotationState ) and cases:
					CASE - ControlStatement / for case: (0 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (wordInStep1 . equals ( KeyWord . ANNOTATION ) ) with if-block:
							INCREMENT - Statement / referencing 1 variables:[annotationState, +, +, ;]
						ELSE - block:
							IF - ControlStatement / referencing 9 variables / calling 10 methods / Checking condition: (( wordInStep1 . equals ( KeyWord . WORD ) & & ModelBuildHelper . isNumber ( wordInStep1 . getWord ( ) ) ) | | ( wordInStep1 . equals ( KeyWord . DOT ) ) & & i < step1 . size ( ) - 1 & & step1 . get ( i + 1 ) . getWord ( ) ! = null & & ModelBuildHelper . isNumber ( step1 . get ( i + 1 ) . getWord ( ) ) ) with if-block:
								ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[i, =, collectNumberWords, (, result, ,, step1, ,, i, ), ;]
							ELSE - block:
								IF - ControlStatement / referencing 3 variables / calling 4 methods / Checking condition: (( wordInStep1 . equals ( KeyWord . WORD ) & & ! wordInStep1 . getWord ( ) . isEmpty ( ) ) | | ! wordInStep1 . equals ( KeyWord . WORD ) ) with if-block:
									METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, wordInStep1, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (1 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (wordInStep1 . equals ( KeyWord . INTERFACE ) ) with if-block:
							ASSIGNMENT - Statement / referencing 1 variables:[annotationState, =, 0, ;]
							METHODCALL - Statement / referencing 1 variables / calling 2 methods:[result, ., add, (, new, WordInFile, (, null, ,, KeyWord, ., ANNOTATIONINTERFACE, ), ), ;]
						ELSE - block:
							METHODCALL - Statement / referencing 3 variables / calling 2 methods:[result, ., add, (, step1, ., get, (, i, -, 1, ), ), ;]
							INCREMENT - Statement / referencing 1 variables:[annotationState, +, +, ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (2 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (wordInStep1 . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
							INCREMENT - Statement / referencing 1 variables:[annotationState, +, +, ;]
							INCREMENT - Statement / referencing 1 variables:[openParentheses, +, +, ;]
						ELSE - block:
							ASSIGNMENT - Statement / referencing 1 variables:[annotationState, =, 0, ;]
							DECREMENT - Statement / referencing 1 variables:[i, -, -, ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (3 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (wordInStep1 . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
							INCREMENT - Statement / referencing 1 variables:[openParentheses, +, +, ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (wordInStep1 . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
								DECREMENT - Statement / referencing 1 variables:[openParentheses, -, -, ;]
								IF - ControlStatement / referencing 1 variables / Checking condition: (openParentheses = = 0 ) with if-block:
									ASSIGNMENT - Statement / referencing 1 variables:[annotationState, =, 0, ;]
						BREAK - ControlStatement / :[break, ;]
			RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: collectNumberWords, Returntype: int , Parameters: List < WordInFile >  resultList < WordInFile >  step1int  i and Body:
		ASSIGNMENT - Statement / declaring 1 variables:[boolean, endfound, =, false, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[String, resultingNumber, =, ", ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (! endfound ) with content:
			IF - ControlStatement / referencing 4 variables / calling 5 methods / Checking condition: (step1 . get ( i ) . equals ( KeyWord . WORD ) & & ModelBuildHelper . isNumber ( step1 . get ( i ) . getWord ( ) ) ) with if-block:
				ASSIGNMENT - Statement / referencing 3 variables / calling 2 methods:[resultingNumber, +, =, step1, ., get, (, i, ), ., getWord, (, ), ;]
			ELSE - block:
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (step1 . get ( i ) . equals ( KeyWord . DOT ) ) with if-block:
					ASSIGNMENT - Statement / referencing 1 variables:[resultingNumber, +, =, ", ;]
				ELSE - block:
					IF - ControlStatement / referencing 3 variables / calling 4 methods / Checking condition: (resultingNumber . toLowerCase ( ) . endsWith ( " ) & & step1 . get ( i ) . equals ( KeyWord . SUB ) ) with if-block:
						ASSIGNMENT - Statement / referencing 1 variables:[resultingNumber, +, =, ", ;]
					ELSE - block:
						ASSIGNMENT - Statement / referencing 1 variables:[endfound, =, true, ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordInFile, (, resultingNumber, ,, KeyWord, ., CONSTANT, ), ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, -, 2, ;]
*** Step 5 - Count measures
*** Finished at 13:07:22:898
Arguments: 27.0
If-Statements: 31.0
Literals: 35.0
Classes: 1.0
Methods: 5.0
Branches: 94.0
References: 215.0
Function-Calls: 86.0
Cases: 8.0
Secure Statements: 230.0
Variables: 41.0
Imports: 10.0
Loop-Statements: 8.0
Statements: 230.0
Parameters: 7.0
Return-Statements: 5.0
Results: 60.0
Predicates: 81.0
Constants: 1.0
Foreign-Function-Calls: 82.0
Switch-Statements: 2.0
---------- File: MetricCalculator.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:22:972
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:22:976
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:22:977
*** Step 4 - Expand model with details
*** Finished at 13:07:22:992
PACKAGE - Statement:[package, plugin, ., analyser, ;]
IMPORT - Statement:[import, java, ., util, ., HashMap, ;]
IMPORT - Statement:[import, java, ., util, ., Map, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., measures, ., Metric, ;]
IMPORT - Statement:[import, plugin, ., SoftAuditMetrics, ;]
CLASS with name: MetricCalculator and Body:
	METHOD with name: calculate, Returntype: Map < Metric < ? > , Double > , Parameters: Map < Metric < ? > , Double >  measures and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[Map, <, Metric, <, ?, >, ,, Double, >, result, =, new, HashMap, , Metric, , , , , Double, , (, ), ;]
		METHODCALL - Statement / referencing 5 variables / calling 5 methods:[result, ., put, (, SoftAuditMetrics, ., OBP, ,, (, measures, ., get, (, SoftAuditMetrics, ., CLA, ), *, 4, ), +, (, measures, ., get, (, SoftAuditMetrics, ., MET, ), *, 3, ), +, (, measures, ., get, (, SoftAuditMetrics, ., INT, ), *, 2, ), +, measures, ., get, (, SoftAuditMetrics, ., VAR, ), ), ;]
		METHODCALL - Statement / referencing 7 variables / calling 7 methods:[result, ., put, (, SoftAuditMetrics, ., DCO, ,, (, (, measures, ., get, (, SoftAuditMetrics, ., PRE, ), *, 2, ), +, (, measures, ., get, (, SoftAuditMetrics, ., RES, ), *, 1.5, ), +, measures, ., get, (, SoftAuditMetrics, ., ARG, ), +, (, measures, ., get, (, SoftAuditMetrics, ., PAR, ), *, 0.5, ), ), /, (, measures, ., get, (, SoftAuditMetrics, ., STM, ), +, measures, ., get, (, SoftAuditMetrics, ., REF, ), ), ), ;]
		METHODCALL - Statement / referencing 3 variables / calling 3 methods:[result, ., put, (, SoftAuditMetrics, ., DFC, ,, 1, -, (, (, measures, ., get, (, SoftAuditMetrics, ., VAR, ), *, 2, ), /, measures, ., get, (, SoftAuditMetrics, ., REF, ), ), ), ;]
		METHODCALL - Statement / referencing 3 variables / calling 3 methods:[result, ., put, (, SoftAuditMetrics, ., ICO, ,, measures, ., get, (, SoftAuditMetrics, ., FFC, ), /, measures, ., get, (, SoftAuditMetrics, ., FUC, ), ), ;]
		METHODCALL - Statement / referencing 7 variables / calling 7 methods:[result, ., put, (, SoftAuditMetrics, ., CFC, ,, (, measures, ., get, (, SoftAuditMetrics, ., BRA, ), -, (, measures, ., get, (, SoftAuditMetrics, ., IFS, ), +, measures, ., get, (, SoftAuditMetrics, ., SWI, ), +, measures, ., get, (, SoftAuditMetrics, ., LOP, ), +, measures, ., get, (, SoftAuditMetrics, ., RET, ), ), ), /, measures, ., get, (, SoftAuditMetrics, ., BRA, ), ), ;]
		METHODCALL - Statement / referencing 6 variables / calling 6 methods:[result, ., put, (, SoftAuditMetrics, ., COC, ,, (, measures, ., get, (, SoftAuditMetrics, ., IFS, ), +, measures, ., get, (, SoftAuditMetrics, ., SWI, ), +, measures, ., get, (, SoftAuditMetrics, ., CAS, ), +, measures, ., get, (, SoftAuditMetrics, ., LOP, ), +, 1, ), /, (, measures, ., get, (, SoftAuditMetrics, ., MET, ), *, 4, ), ), ;]
		METHODCALL - Statement / referencing 5 variables / calling 5 methods:[result, ., put, (, SoftAuditMetrics, ., BRC, ,, (, (, measures, ., get, (, SoftAuditMetrics, ., FFC, ), *, 2, ), +, (, measures, ., get, (, SoftAuditMetrics, ., RET, ), *, 2, ), +, measures, ., get, (, SoftAuditMetrics, ., FUC, ), ), /, measures, ., get, (, SoftAuditMetrics, ., STM, ), ), ;]
		METHODCALL - Statement / referencing 6 variables / calling 6 methods:[result, ., put, (, SoftAuditMetrics, ., LCM, ,, (, (, measures, ., get, (, SoftAuditMetrics, ., STY, ), /, measures, ., get, (, SoftAuditMetrics, ., STM, ), ), +, (, measures, ., get, (, SoftAuditMetrics, ., DTY, ), /, (, measures, ., get, (, SoftAuditMetrics, ., VAR, ), +, measures, ., get, (, SoftAuditMetrics, ., CON, ), ), ), ), /, 2, ), ;]
		METHODCALL - Statement / referencing 8 variables / calling 8 methods:[result, ., put, (, SoftAuditMetrics, ., ACM, ,, (, result, ., get, (, SoftAuditMetrics, ., DCO, ), +, result, ., get, (, SoftAuditMetrics, ., DFC, ), +, result, ., get, (, SoftAuditMetrics, ., ICO, ), +, result, ., get, (, SoftAuditMetrics, ., CFC, ), +, result, ., get, (, SoftAuditMetrics, ., COC, ), +, result, ., get, (, SoftAuditMetrics, ., BRC, ), +, result, ., get, (, SoftAuditMetrics, ., LCM, ), ), /, 7, ), ;]
		METHODCALL - Statement / referencing 11 variables / calling 11 methods:[result, ., put, (, SoftAuditMetrics, ., MOD, ,, (, (, (, (, measures, ., get, (, SoftAuditMetrics, ., CLA, ), *, 4, ), +, (, measures, ., get, (, SoftAuditMetrics, ., MET, ), *, 2, ), ), /, (, (, measures, ., get, (, SoftAuditMetrics, ., IMP, ), *, 4, ), +, measures, ., get, (, SoftAuditMetrics, ., VAR, ), ), ), +, (, 1, -, (, measures, ., get, (, SoftAuditMetrics, ., FFC, ), /, (, measures, ., get, (, SoftAuditMetrics, ., FUC, ), +, measures, ., get, (, SoftAuditMetrics, ., MET, ), ), ), ), +, (, (, measures, ., get, (, SoftAuditMetrics, ., STM, ), /, measures, ., get, (, SoftAuditMetrics, ., SRC, ), ), /, measures, ., get, (, SoftAuditMetrics, ., OMS, ), ), ), /, 3, ), ;]
		METHODCALL - Statement / referencing 5 variables / calling 5 methods:[result, ., put, (, SoftAuditMetrics, ., TST, ,, (, (, 1, -, (, (, measures, ., get, (, SoftAuditMetrics, ., BRA, ), *, 2, ), /, measures, ., get, (, SoftAuditMetrics, ., STM, ), ), ), +, (, 1, -, (, (, measures, ., get, (, SoftAuditMetrics, ., PRE, ), *, 2, ), /, measures, ., get, (, SoftAuditMetrics, ., REF, ), ), ), ), /, 2, ), ;]
		METHODCALL - Statement / referencing 3 variables / calling 3 methods:[result, ., put, (, SoftAuditMetrics, ., REU, ,, measures, ., get, (, SoftAuditMetrics, ., RUM, ), /, measures, ., get, (, SoftAuditMetrics, ., MET, ), ), ;]
		METHODCALL - Statement / referencing 3 variables / calling 3 methods:[result, ., put, (, SoftAuditMetrics, ., SEC, ,, (, measures, ., get, (, SoftAuditMetrics, ., SST, ), /, 1.2, ), /, measures, ., get, (, SoftAuditMetrics, ., STM, ), ), ;]
		METHODCALL - Statement / referencing 4 variables / calling 4 methods:[result, ., put, (, SoftAuditMetrics, ., FLE, ,, 1, -, (, (, measures, ., get, (, SoftAuditMetrics, ., LIT, ), +, measures, ., get, (, SoftAuditMetrics, ., CON, ), ), /, measures, ., get, (, SoftAuditMetrics, ., STM, ), ), ), ;]
		METHODCALL - Statement / referencing 6 variables / calling 6 methods:[result, ., put, (, SoftAuditMetrics, ., COF, ,, 1, -, (, (, (, measures, ., get, (, SoftAuditMetrics, ., SED, ), *, 2, ), +, (, measures, ., get, (, SoftAuditMetrics, ., MAD, ), *, 1.5, ), +, measures, ., get, (, SoftAuditMetrics, ., MED, ), +, (, measures, ., get, (, SoftAuditMetrics, ., MID, ), *, 0.5, ), ), /, measures, ., get, (, SoftAuditMetrics, ., STM, ), ), ), ;]
		METHODCALL - Statement / referencing 8 variables / calling 8 methods:[result, ., put, (, SoftAuditMetrics, ., MAM, ,, (, (, 1, -, result, ., get, (, SoftAuditMetrics, ., ACM, ), ), +, (, (, result, ., get, (, SoftAuditMetrics, ., MOD, ), +, result, ., get, (, SoftAuditMetrics, ., SEC, ), +, result, ., get, (, SoftAuditMetrics, ., TST, ), +, result, ., get, (, SoftAuditMetrics, ., REU, ), +, result, ., get, (, SoftAuditMetrics, ., FLE, ), +, (, result, ., get, (, SoftAuditMetrics, ., COF, ), /, 2, ), ), /, 6, ), ), /, 2, ), ;]
		METHODCALL - Statement / referencing 8 variables / calling 8 methods:[result, ., put, (, SoftAuditMetrics, ., AQM, ,, (, result, ., get, (, SoftAuditMetrics, ., MOD, ), +, result, ., get, (, SoftAuditMetrics, ., TST, ), +, result, ., get, (, SoftAuditMetrics, ., REU, ), +, result, ., get, (, SoftAuditMetrics, ., SEC, ), +, result, ., get, (, SoftAuditMetrics, ., FLE, ), +, result, ., get, (, SoftAuditMetrics, ., COF, ), +, result, ., get, (, SoftAuditMetrics, ., MAM, ), ), /, 7, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
*** Step 5 - Count measures
*** Finished at 13:07:22:995
Literals: 0.0
Classes: 1.0
Methods: 1.0
Branches: 1.0
References: 101.0
Function-Calls: 99.0
Secure Statements: 28.0
Variables: 2.0
Imports: 5.0
Statements: 28.0
Parameters: 1.0
Return-Statements: 1.0
Results: 2.0
Constants: 14.0
Foreign-Function-Calls: 99.0
---------- File: ModelAnalyser.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:23:593
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:23:602
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:23:622
*** Step 4 - Expand model with details
*** Finished at 13:07:23:640
PACKAGE - Statement:[package, plugin, ., analyser, ;]
IMPORT - Statement:[import, java, ., util, ., Arrays, ;]
IMPORT - Statement:[import, java, ., util, ., HashMap, ;]
IMPORT - Statement:[import, java, ., util, ., HashSet, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, java, ., util, ., Map, ;]
IMPORT - Statement:[import, java, ., util, ., Set, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., measures, ., Metric, ;]
IMPORT - Statement:[import, plugin, ., SoftAuditMetrics, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., KeyWord, ;]
IMPORT - Statement:[import, plugin, ., model, ., StatementType, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordType, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaClass, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaControlStatement, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaEnumValues, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaMethod, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaStatement, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaStatementWithAnonymousClass, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaVariable, ;]
IMPORT - Statement:[import, plugin, ., util, ., AnalyzeException, ;]
IMPORT - Statement:[import, plugin, ., util, ., Logger, ;]
CLASS with name: ModelAnalyser and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, Set, <, StatementType, >, usedStatementTypes, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, Set, <, String, >, usedDataTypes, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, double, scannedSourceFiles, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, double, optimalModuleSize, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, Set, <, String, >, declaredMethods, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, double, insecureStatements, ;]
	METHOD with name: ModelAnalyser and Body:
		ASSIGNMENT - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, =, new, HashSet, , StatementType, , (, ), ;]
		ASSIGNMENT - Statement / referencing 1 variables / calling 1 methods:[usedDataTypes, =, new, HashSet, , String, , (, ), ;]
		ASSIGNMENT - Statement / referencing 1 variables:[scannedSourceFiles, =, 0.000, ;]
		ASSIGNMENT - Statement / referencing 1 variables:[optimalModuleSize, =, 200.000, ;]
	METHOD with name: doFileModelAnalysis, Returntype: Map < Metric < ? > , Double > , Parameters: List < JavaFileContent >  fileModelList < WordInFile >  wordList and Body:
		INCREMENT - Statement / referencing 1 variables:[scannedSourceFiles, +, +, ;]
		ASSIGNMENT - Statement / referencing 1 variables:[insecureStatements, =, 0.0, ;]
		ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[declaredMethods, =, collectDeclaredMethods, (, fileModel, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[Map, <, Metric, <, ?, >, ,, Double, >, result, =, analyzeContentList, (, fileModel, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[includeContentScan, (, result, ,, countLiteralsAndConstants, (, wordList, ), ), ;]
		METHODCALL - Statement / referencing 3 variables / calling 2 methods:[result, ., put, (, SoftAuditMetrics, ., SST, ,, result, ., get, (, SoftAuditMetrics, ., STM, ), -, insecureStatements, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 2 methods:[Logger, ., getLogger, (, null, ), ., printFileMeasures, (, result, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
	METHOD with name: countLiteralsAndConstants, Returntype: Map < Metric < ? > , Double > , Parameters: List < WordInFile >  wordList and Body:
		ASSIGNMENT - Statement / declaring 1 variables:[double, constants, =, 0.0, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[double, literals, =, 0.0, ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (WordInFile word : wordList ) with content:
			IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (word . equals ( KeyWord . STRINGLITERAL ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[literals, +, +, ;]
			ELSE - block:
				IF - ControlStatement / referencing 4 variables / calling 7 methods / Checking condition: (word . equals ( KeyWord . CONSTANT ) & & ! ( word . getWord ( ) . equals ( " ) | | word . getWord ( ) . equals ( " ) | | word . getWord ( ) . equals ( " ) ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[constants, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[Map, <, Metric, <, ?, >, ,, Double, >, result, =, new, HashMap, , Metric, , , , , Double, , (, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., put, (, SoftAuditMetrics, ., LIT, ,, literals, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., put, (, SoftAuditMetrics, ., CON, ,, constants, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
	METHOD with name: getNumberOfStatementTypes, Returntype: double  and Body:
		RETURN - ControlStatement / referencing 1 variables / calling 1 methods / :[return, (, double, ), usedStatementTypes, ., size, (, ), ;]
	METHOD with name: getNumberOfDataTypes, Returntype: double  and Body:
		RETURN - ControlStatement / referencing 1 variables / calling 1 methods / :[return, (, double, ), usedDataTypes, ., size, (, ), ;]
	METHOD with name: getScannedSourceFiles, Returntype: double  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, scannedSourceFiles, ;]
	METHOD with name: getOptimalModuleSize, Returntype: double  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, optimalModuleSize, ;]
	METHOD with name: analyzeContentList, Returntype: Map < Metric < ? > , Double > , Parameters: List < JavaFileContent >  contentlist and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[Map, <, Metric, <, ?, >, ,, Double, >, result, =, new, HashMap, , Metric, , , , , Double, , (, ), ;]
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (contentlist = = null | | contentlist . isEmpty ( ) ) with if-block:
			RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contentlist ) with content:
			IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaClass ) with if-block:
				ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaClass, theClass, =, (, JavaClass, ), content, ;]
				IF - ControlStatement / referencing 7 variables / calling 11 methods / Checking condition: (( theClass . getImplementing ( ) ! = null & & ( theClass . getImplementing ( ) . contains ( " ) | | theClass . getImplementing ( ) . contains ( " ) ) ) | | ( theClass . getExtending ( ) ! = null & & ! theClass . getExtending ( ) . isEmpty ( ) & & ( theClass . getModifiers ( ) = = null | | ! theClass . getModifiers ( ) . contains ( KeyWord . FINAL ) ) ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[insecureStatements, +, +, ;]
				FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (JavaFileContent classcontent : theClass . getContent ( ) ) with content:
					IF - ControlStatement / referencing 3 variables / calling 3 methods / Checking condition: (classcontent instanceof JavaStatement & & ( ( JavaStatement ) classcontent ) . getDeclaredVariables ( ) ! = null & & ! ( ( JavaStatement ) classcontent ) . getDeclaredVariables ( ) . isEmpty ( ) ) with if-block:
						FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile wordInStatement : ( ( JavaStatement ) classcontent ) . getStatementText ( ) ) with content:
							IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (wordInStatement . equals ( KeyWord . PUBLIC ) ) with if-block:
								INCREMENT - Statement / referencing 1 variables:[insecureStatements, +, +, ;]
								BREAK - ControlStatement / :[break, ;]
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
				SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theClass . getType ( ) ) and cases:
					CASE - ControlStatement / for case: (CLASS ) and content:
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., CLASSDECLARATION, ), ;]
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., CLA, ,, 1.0, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (INTERFACE , ANNOTATIONINTERFACE ) and content:
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., INTERFACEDECLARATION, ), ;]
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., INT, ,, 1.0, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (ENUM ) and content:
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., ENUMDECLARATION, ), ;]
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (theClass . getContent ( ) . size ( ) > 1 ) with if-block:
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., CLA, ,, 1.0, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (default ) and content:
						THROW - ControlStatement / referencing 1 variables / calling 2 methods / :[throw, new, AnalyzeException, (, ", +, theClass, ., getType, (, ), ), ;]
				METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theClass, ., getContent, (, ), ), ), ;]
			ELSE - block:
				IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaMethod ) with if-block:
					ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaMethod, theMethod, =, (, JavaMethod, ), content, ;]
					METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
					METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., MET, ,, 1.0, ), ;]
					METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., METHODDECLARATION, ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[usedDataTypes, ., add, (, parseDataType, (, theMethod, ., getReturntype, (, ), ), ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., PAR, ,, theMethod, ., getParameters, (, ), ., size, (, ), ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., VAR, ,, theMethod, ., getParameters, (, ), ., size, (, ), ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., REF, ,, theMethod, ., getParameters, (, ), ., size, (, ), ), ;]
					FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable parameter : theMethod . getParameters ( ) ) with content:
						METHODCALL - Statement / referencing 2 variables / calling 3 methods:[usedDataTypes, ., add, (, parseDataType, (, parameter, ., getType, (, ), ), ), ;]
					ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 2 methods:[Map, <, Metric, <, ?, >, ,, Double, >, contentScan, =, analyzeContentList, (, theMethod, ., getContent, (, ), ), ;]
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! contentScan . containsKey ( SoftAuditMetrics . FFC ) | | contentScan . get ( SoftAuditMetrics . FFC ) = = 0.0 ) with if-block:
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., RUM, ,, 1.0, ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[includeContentScan, (, result, ,, contentScan, ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaEnumValues ) with if-block:
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., LIT, ,, (, (, JavaEnumValues, ), content, ), ., getValues, (, ), ., size, (, ), ), ;]
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., ENUMVALUES, ), ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatementWithAnonymousClass ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatementWithAnonymousClass, theStatement, =, (, JavaStatementWithAnonymousClass, ), content, ;]
							METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getContent, (, ), ), ), ;]
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 3.0, ), ;]
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., CLA, ,, 1.0, ), ;]
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[measureSimpleStatement, (, theStatement, ,, result, ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaControlStatement ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaControlStatement, theStatement, =, (, JavaControlStatement, ), content, ;]
								SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
									CASE - ControlStatement / for case: (FOR ) and content:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., LOP, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., BRA, ,, 2.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getContent, (, ), ), ), ;]
										IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . isContentInBlock ( ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
										ELSE - block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable theStatement . getDeclaredVariables ( ) ) with content:
											METHODCALL - Statement / referencing 2 variables / calling 3 methods:[usedDataTypes, ., add, (, parseDataType, (, variable, ., getType, (, ), ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., VAR, ,, theStatement, ., getDeclaredVariables, (, ), ., size, (, ), ), ;]
										METHODCALL - Statement / referencing 3 variables / calling 5 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., REF, ,, theStatement, ., getDeclaredVariables, (, ), ., size, (, ), +, theStatement, ., getReferencedVariables, (, ), ., size, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FUC, ,, theStatement, ., getCalledMethods, (, ), ., size, (, ), ), ;]
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getCalledMethods ( ) ) with content:
											IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! declaredMethods . contains ( function . getWord ( ) ) ) with if-block:
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FFC, ,, 1.0, ), ;]
										ASSIGNMENT - Statement / declaring 1 variables:[boolean, assignFound, =, false, ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getInitialization ( ) ! = null & & ! theStatement . getInitialization ( ) . isEmpty ( ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., FOR, ), ;]
											FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getInitialization ( ) ) with content:
												IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . ASSIGNMENT ) ) with if-block:
													ASSIGNMENT - Statement / referencing 1 variables:[assignFound, =, true, ;]
												IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . VARIDENT ) ) with if-block:
													IF - ControlStatement / referencing 1 variables / Checking condition: (assignFound ) with if-block:
														METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., ARG, ,, 1.0, ), ;]
													ELSE - block:
														METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., RES, ,, 1.0, ), ;]
											IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getCondition ( ) ! = null & & ! theStatement . getCondition ( ) . isEmpty ( ) ) with if-block:
												FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getCondition ( ) ) with content:
													IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . VARIDENT ) ) with if-block:
														METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., PRE, ,, 1.0, ), ;]
										ELSE - block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., ENHANCEDFOR, ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (WHILE , DOWHILE ) and content:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[usedStatementTypes, ., add, (, theStatement, ., getType, (, ), ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., LOP, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., BRA, ,, 2.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getContent, (, ), ), ), ;]
										IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . isContentInBlock ( ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
										ELSE - block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., REF, ,, theStatement, ., getReferencedVariables, (, ), ., size, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FUC, ,, theStatement, ., getCalledMethods, (, ), ., size, (, ), ), ;]
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getCalledMethods ( ) ) with content:
											IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! declaredMethods . contains ( function . getWord ( ) ) ) with if-block:
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FFC, ,, 1.0, ), ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getCondition ( ) ! = null & & ! theStatement . getCondition ( ) . isEmpty ( ) ) with if-block:
											FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getCondition ( ) ) with content:
												IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . VARIDENT ) ) with if-block:
													METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., PRE, ,, 1.0, ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (IF ) and content:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[usedStatementTypes, ., add, (, theStatement, ., getType, (, ), ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., IFS, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., BRA, ,, 2.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getContent, (, ), ), ), ;]
										IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . isContentInBlock ( ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
										ELSE - block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null & & ! theStatement . getOthercontent ( ) . isEmpty ( ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., ELSE, ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getOthercontent, (, ), ), ), ;]
											IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . isOtherContentInBlock ( ) ) with if-block:
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
											ELSE - block:
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., REF, ,, theStatement, ., getReferencedVariables, (, ), ., size, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FUC, ,, theStatement, ., getCalledMethods, (, ), ., size, (, ), ), ;]
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getCalledMethods ( ) ) with content:
											IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! declaredMethods . contains ( function . getWord ( ) ) ) with if-block:
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FFC, ,, 1.0, ), ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getCondition ( ) ! = null & & ! theStatement . getCondition ( ) . isEmpty ( ) ) with if-block:
											FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getCondition ( ) ) with content:
												IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . VARIDENT ) ) with if-block:
													METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., PRE, ,, 1.0, ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (TRY ) and content:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., IFS, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., BRA, ,, 2.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getContent, (, ), ), ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getResources ( ) ! = null & & ! theStatement . getResources ( ) . isEmpty ( ) ) with if-block:
											METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getResources, (, ), ), ), ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., TRYWITHRESOURCES, ), ;]
										ELSE - block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., TRY, ), ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null & & ! theStatement . getOthercontent ( ) . isEmpty ( ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., FINALLY, ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getOthercontent, (, ), ), ), ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getCatchedExceptions ( ) ! = null & & ! theStatement . getCatchedExceptions ( ) . isEmpty ( ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[usedStatementTypes, ., add, (, StatementType, ., CATCH, ), ;]
											FOR - ControlStatement / declaring 1 variables / calling 2 methods / Enhanced version scanning: (List < WordInFile > theStatement . getCatchedExceptions ( ) . keySet ( ) ) with content:
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., VAR, ,, 1.0, ), ;]
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., BRA, ,, 1.0, ), ;]
												METHODCALL - Statement / referencing 2 variables / calling 4 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getCatchedExceptions, (, ), ., get, (, exception, ), ), ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (BREAK , CONTINUE , ASSERT ) and content:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[usedStatementTypes, ., add, (, theStatement, ., getType, (, ), ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (RETURN ) and content:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[usedStatementTypes, ., add, (, theStatement, ., getType, (, ), ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., BRA, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., RET, ,, 1.0, ), ;]
										IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (theStatement . getStatementText ( ) . size ( ) > 2 ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., RES, ,, 1.0, ), ;]
											FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable theStatement . getDeclaredVariables ( ) ) with content:
												METHODCALL - Statement / referencing 2 variables / calling 3 methods:[usedDataTypes, ., add, (, parseDataType, (, variable, ., getType, (, ), ), ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., REF, ,, theStatement, ., getReferencedVariables, (, ), ., size, (, ), ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FUC, ,, theStatement, ., getCalledMethods, (, ), ., size, (, ), ), ;]
											FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getCalledMethods ( ) ) with content:
												IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! declaredMethods . contains ( function . getWord ( ) ) ) with if-block:
													METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FFC, ,, 1.0, ), ;]
											FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getStatementText ( ) ) with content:
												ASSIGNMENT - Statement / declaring 1 variables:[double, potentialpredicates, =, 0, ;]
												ASSIGNMENT - Statement / declaring 1 variables:[boolean, comparation, =, false, ;]
												IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . VARIDENT ) ) with if-block:
													INCREMENT - Statement / referencing 1 variables:[potentialpredicates, +, +, ;]
												ELSE - block:
													IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . COMPARATOR ) ) with if-block:
														ASSIGNMENT - Statement / referencing 1 variables:[comparation, =, true, ;]
												IF - ControlStatement / referencing 1 variables / Checking condition: (comparation ) with if-block:
													METHODCALL - Statement / referencing 2 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., PRE, ,, potentialpredicates, ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (THROW ) and content:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[usedStatementTypes, ., add, (, theStatement, ., getType, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., REF, ,, theStatement, ., getReferencedVariables, (, ), ., size, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FUC, ,, theStatement, ., getCalledMethods, (, ), ., size, (, ), ), ;]
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getCalledMethods ( ) ) with content:
											IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! declaredMethods . contains ( function . getWord ( ) ) ) with if-block:
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FFC, ,, 1.0, ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (BLOCK ) and content:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[usedStatementTypes, ., add, (, theStatement, ., getType, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getContent, (, ), ), ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (SYNCHRONIZED , SWITCH ) and content:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., SWI, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[usedStatementTypes, ., add, (, theStatement, ., getType, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getContent, (, ), ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., REF, ,, theStatement, ., getReferencedVariables, (, ), ., size, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FUC, ,, theStatement, ., getCalledMethods, (, ), ., size, (, ), ), ;]
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile theStatement . getCalledMethods ( ) ) with content:
											IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! declaredMethods . contains ( function . getWord ( ) ) ) with if-block:
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FFC, ,, 1.0, ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (CASE ) and content:
										IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . isContentInBlock ( ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 2.0, ), ;]
										ELSE - block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., CAS, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., BRA, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[usedStatementTypes, ., add, (, theStatement, ., getType, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[includeContentScan, (, result, ,, analyzeContentList, (, theStatement, ., getContent, (, ), ), ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (default ) and content:
										THROW - ControlStatement / referencing 1 variables / calling 2 methods / :[throw, new, AnalyzeException, (, ", +, theStatement, ., getType, (, ), ), ;]
							ELSE - block:
								IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatement ) with if-block:
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (! ( ( JavaStatement ) content ) . getType ( ) . equals ( StatementType . ANNOTATION ) ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., STM, ,, 1.0, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[measureSimpleStatement, (, (, JavaStatement, ), content, ,, result, ), ;]
								ELSE - block:
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
	METHOD with name: measureSimpleStatement, Returntype: void , Parameters: JavaStatement  theStatementMap < Metric < ? > , Double >  result and Body:
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[usedStatementTypes, ., add, (, theStatement, ., getType, (, ), ), ;]
		IF - ControlStatement / referencing 2 variables / calling 4 methods / Checking condition: (theStatement . getType ( ) . equals ( StatementType . IMPORT ) | | theStatement . getType ( ) . equals ( StatementType . PACKAGE ) ) with if-block:
			METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., IMP, ,, 1.0, ), ;]
		ELSE - block:
			IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getCalledMethods ( ) ! = null ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FUC, ,, theStatement, ., getCalledMethods, (, ), ., size, (, ), ), ;]
				FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile function : theStatement . getCalledMethods ( ) ) with content:
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! declaredMethods . contains ( function . getWord ( ) ) ) with if-block:
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., FFC, ,, 1.0, ), ;]
			IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getReferencedVariables ( ) ! = null ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., REF, ,, theStatement, ., getReferencedVariables, (, ), ., size, (, ), ), ;]
			IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getDeclaredVariables ( ) ! = null ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., REF, ,, theStatement, ., getDeclaredVariables, (, ), ., size, (, ), ), ;]
				IF - ControlStatement / referencing 3 variables / calling 6 methods / Checking condition: (theStatement . getType ( ) . equals ( StatementType . ASSIGNMENT ) | | theStatement . getType ( ) . equals ( StatementType . VARDECLARATION ) | | theStatement . getType ( ) . equals ( StatementType . UNSPECIFIED ) ) with if-block:
					FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable variable : theStatement . getDeclaredVariables ( ) ) with content:
						METHODCALL - Statement / referencing 2 variables / calling 3 methods:[usedDataTypes, ., add, (, parseDataType, (, variable, ., getType, (, ), ), ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., VAR, ,, theStatement, ., getDeclaredVariables, (, ), ., size, (, ), ), ;]
					IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (theStatement . getType ( ) . equals ( StatementType . ASSIGNMENT ) ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables:[boolean, assignFound, =, false, ;]
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., RES, ,, 1.0, ), ;]
						FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile word : theStatement . getStatementText ( ) ) with content:
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . ASSIGNMENT ) ) with if-block:
								ASSIGNMENT - Statement / referencing 1 variables:[assignFound, =, true, ;]
							IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . VARIDENT ) & & assignFound ) with if-block:
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[countFinding, (, result, ,, SoftAuditMetrics, ., ARG, ,, 1.0, ), ;]
	METHOD with name: collectDeclaredMethods, Returntype: Set < String > , Parameters: List < JavaFileContent >  contentlist and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[Set, <, String, >, result, =, new, HashSet, , String, , (, ), ;]
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (contentlist = = null | | contentlist . isEmpty ( ) ) with if-block:
			RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contentlist ) with content:
			IF - ControlStatement / referencing 2 variables / Checking condition: (content instanceof JavaClass | | content instanceof JavaStatementWithAnonymousClass ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredMethods, (, content, ., getContent, (, ), ), ), ;]
			ELSE - block:
				IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaMethod ) with if-block:
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredMethods, (, content, ., getContent, (, ), ), ), ;]
					IF - ControlStatement / referencing 3 variables / calling 4 methods / Checking condition: (( ( JavaMethod ) content ) . getReturntype ( ) . isEmpty ( ) & & result . contains ( ( ( JavaMethod ) content ) . getName ( ) ) ) with if-block:
						INCREMENT - Statement / referencing 1 variables:[insecureStatements, +, +, ;]
					ELSE - block:
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, (, (, JavaMethod, ), content, ), ., getName, (, ), ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
	METHOD with name: includeContentScan, Returntype: void , Parameters: Map < Metric < ? > , Double >  resultmapMap < Metric < ? > , Double >  partialResult and Body:
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (Metric < ? > measureToCount : partialResult . keySet ( ) ) with content:
			IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (resultmap . containsKey ( measureToCount ) ) with if-block:
				METHODCALL - Statement / referencing 6 variables / calling 3 methods:[resultmap, ., put, (, measureToCount, ,, resultmap, ., get, (, measureToCount, ), +, partialResult, ., get, (, measureToCount, ), ), ;]
			ELSE - block:
				METHODCALL - Statement / referencing 4 variables / calling 2 methods:[resultmap, ., put, (, measureToCount, ,, partialResult, ., get, (, measureToCount, ), ), ;]
	METHOD with name: countFinding, Returntype: void , Parameters: Map < Metric < ? > , Double >  resultmapMetric < ? >  measureToCountdouble  findings and Body:
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (resultmap . containsKey ( measureToCount ) ) with if-block:
			METHODCALL - Statement / referencing 5 variables / calling 2 methods:[resultmap, ., put, (, measureToCount, ,, resultmap, ., get, (, measureToCount, ), +, findings, ), ;]
		ELSE - block:
			METHODCALL - Statement / referencing 3 variables / calling 1 methods:[resultmap, ., put, (, measureToCount, ,, findings, ), ;]
	METHOD with name: parseDataType, Returntype: String , Parameters: List < WordInFile >  type and Body:
		ASSIGNMENT - Statement / declaring 1 variables:[String, result, =, ", ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (WordInFile word : type ) with content:
			IF - ControlStatement / referencing 2 variables / calling 6 methods / Checking condition: (! word . getKey ( ) . getType ( ) . equals ( WordType . MODIFIER ) & & ! word . getKey ( ) . getType ( ) . equals ( WordType . STATEMENTORMODIFIER ) ) with if-block:
				ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, String, >, modifiers, =, Arrays, ., asList, (, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ), ;]
				IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (word . getWord ( ) = = null ) with if-block:
					ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[result, +, =, word, ., getKey, (, ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! modifiers . contains ( word . getWord ( ) ) ) with if-block:
						ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[result, +, =, word, ., getWord, (, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
*** Step 5 - Count measures
*** Finished at 13:07:23:672
Arguments: 9.0
If-Statements: 62.0
Literals: 18.0
Classes: 1.0
Methods: 13.0
Branches: 200.0
References: 427.0
Function-Calls: 404.0
Cases: 15.0
Secure Statements: 481.0
Variables: 61.0
Reusable Methods: 2.0
Imports: 23.0
Loop-Statements: 25.0
Statements: 481.0
Parameters: 13.0
Return-Statements: 11.0
Results: 39.0
Predicates: 102.0
Constants: 66.0
Foreign-Function-Calls: 281.0
Switch-Statements: 2.0
---------- File: ModelBuilder.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:24:641
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:24:657
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:24:686
*** Step 4 - Expand model with details
*** Finished at 13:07:24:742
PACKAGE - Statement:[package, plugin, ., analyser, ;]
IMPORT - Statement:[import, java, ., util, ., ArrayList, ;]
IMPORT - Statement:[import, java, ., util, ., Arrays, ;]
IMPORT - Statement:[import, java, ., util, ., Collections, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., KeyWord, ;]
IMPORT - Statement:[import, plugin, ., model, ., StatementType, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordList, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordType, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaClass, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaEnumValues, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaMethod, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaStatement, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaStatementWithAnonymousClass, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaVariable, ;]
IMPORT - Statement:[import, plugin, ., util, ., Logger, ;]
IMPORT - Statement:[import, plugin, ., util, ., ParsingException, ;]
CLASS with name: ModelBuilder and Body:
	METHOD with name: parseBasicModel, Returntype: List < JavaFileContent > , Parameters: List < WordInFile >  wordList and Body:
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[List, <, JavaFileContent, >, fileModel, =, parseClassStructure, (, wordList, ), ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : fileModel ) with content:
			IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaClass ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 2 methods:[content, ., setContent, (, parseClassContent, (, content, ), ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 2 methods:[Logger, ., getLogger, (, null, ), ., printModel, (, ", ,, fileModel, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, fileModel, ;]
	METHOD with name: parseClassStructure, Returntype: List < JavaFileContent > , Parameters: List < WordInFile >  wordList and Body:
		TRY - ControlStatement / declaring 1 variables / with try-block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, fileModel, =, new, ArrayList, , JavaFileContent, , (, ), ;]
			ASSIGNMENT - Statement / declaring 1 variables:[boolean, packageStatement, =, false, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[boolean, importStatement, =, false, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[int, classDefinitionState, =, 0, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 0, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[JavaClass, foundClass, =, null, ;]
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, content, =, new, ArrayList, , WordInFile, , (, ), ;]
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, temporary, =, new, ArrayList, , WordInFile, , (, ), ;]
			ASSIGNMENT - Statement / declaring 1 variables:[String, typeString, =, ", ;]
			FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < wordList . size ( ) ) increment: (i + + ) and content:
				ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[WordInFile, word, =, wordList, ., get, (, i, ), ;]
				IF - ControlStatement / referencing 1 variables / Checking condition: (packageStatement ) with if-block:
					IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (word . equals ( KeyWord . SEMICOLON ) ) with if-block:
						ASSIGNMENT - Statement / referencing 1 variables:[packageStatement, =, false, ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
						ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, statementcontent, =, new, ArrayList, , WordInFile, , (, ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[statementcontent, ., addAll, (, content, ), ;]
						ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaStatement, packagestatement, =, new, JavaStatement, (, StatementType, ., PACKAGE, ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[packagestatement, ., setStatementText, (, statementcontent, ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[fileModel, ., add, (, packagestatement, ), ;]
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
					ELSE - block:
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (importStatement ) with if-block:
						IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (word . equals ( KeyWord . SEMICOLON ) ) with if-block:
							ASSIGNMENT - Statement / referencing 1 variables:[importStatement, =, false, ;]
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
							ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, statementcontent, =, new, ArrayList, , WordInFile, , (, ), ;]
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[statementcontent, ., addAll, (, content, ), ;]
							ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaStatement, importstatement, =, new, JavaStatement, (, StatementType, ., IMPORT, ), ;]
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[importstatement, ., setStatementText, (, statementcontent, ), ;]
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[fileModel, ., add, (, importstatement, ), ;]
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
						ELSE - block:
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
					ELSE - block:
						SWITCH - ControlStatement / referencing 1 variables / over value of : (classDefinitionState ) and cases:
							CASE - ControlStatement / for case: (0 ) and content:
								IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (word . equals ( KeyWord . ANNOTATION ) ) with if-block:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[fileModel, ., add, (, new, JavaStatement, (, StatementType, ., ANNOTATION, ), ), ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (word . equals ( KeyWord . IMPORT ) ) with if-block:
										ASSIGNMENT - Statement / referencing 1 variables:[importStatement, =, true, ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
										IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
											ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, someContent, =, new, ArrayList, , WordInFile, , (, ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[someContent, ., addAll, (, content, ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 2 methods:[fileModel, ., add, (, new, WordList, (, someContent, ), ), ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (word . equals ( KeyWord . PACKAGE ) ) with if-block:
											ASSIGNMENT - Statement / referencing 1 variables:[packageStatement, =, true, ;]
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
											IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
												ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, someContent, =, new, ArrayList, , WordInFile, , (, ), ;]
												METHODCALL - Statement / referencing 2 variables / calling 1 methods:[someContent, ., addAll, (, content, ), ;]
												METHODCALL - Statement / referencing 2 variables / calling 2 methods:[fileModel, ., add, (, new, WordList, (, someContent, ), ), ;]
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
										ELSE - block:
											IF - ControlStatement / referencing 2 variables / calling 5 methods / Checking condition: (word . getKey ( ) . getType ( ) . equals ( WordType . MODIFIER ) | | word . getKey ( ) . equals ( KeyWord . SYNCHRONIZED ) ) with if-block:
												METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
											ELSE - block:
												IF - ControlStatement / referencing 3 variables / calling 5 methods / Checking condition: (! wordList . get ( i - 1 ) . equals ( KeyWord . DOT ) & & ( word . getKey ( ) . getType ( ) . equals ( WordType . DECLARATOR ) ) ) with if-block:
													INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
													IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
														ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, someContent, =, new, ArrayList, , WordInFile, , (, ), ;]
														METHODCALL - Statement / referencing 2 variables / calling 1 methods:[someContent, ., addAll, (, content, ), ;]
														METHODCALL - Statement / referencing 2 variables / calling 2 methods:[fileModel, ., add, (, new, WordList, (, someContent, ), ), ;]
														METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
													IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! temporary . isEmpty ( ) ) with if-block:
														ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, modifiers, =, new, ArrayList, , WordInFile, , (, ), ;]
														METHODCALL - Statement / referencing 2 variables / calling 1 methods:[modifiers, ., addAll, (, temporary, ), ;]
														METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
														ASSIGNMENT - Statement / referencing 5 variables / calling 6 methods:[foundClass, =, new, JavaClass, (, wordList, ., get, (, i, +, 1, ), ., getWord, (, ), ,, null, ,, word, ., getKey, (, ), ,, modifiers, ,, new, ArrayList, , String, , (, ), ,, new, ArrayList, , String, , (, ), ), ;]
													ELSE - block:
														ASSIGNMENT - Statement / referencing 4 variables / calling 7 methods:[foundClass, =, new, JavaClass, (, wordList, ., get, (, i, +, 1, ), ., getWord, (, ), ,, null, ,, word, ., getKey, (, ), ,, new, ArrayList, , WordInFile, , (, ), ,, new, ArrayList, , String, , (, ), ,, new, ArrayList, , String, , (, ), ), ;]
													INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
												ELSE - block:
													IF - ControlStatement / referencing 3 variables / calling 4 methods / Checking condition: (( word . equals ( KeyWord . WORD ) & & ! word . getWord ( ) . isEmpty ( ) ) | | ! word . equals ( KeyWord . WORD ) ) with if-block:
														METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
														METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
														METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
								BREAK - ControlStatement / :[break, ;]
							CASE - ControlStatement / for case: (1 ) and content:
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
									ASSIGNMENT - Statement / referencing 1 variables:[classDefinitionState, =, 4, ;]
									INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . EXTENDS ) ) with if-block:
										INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . IMPLEMENTS ) ) with if-block:
											INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
											INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
								BREAK - ControlStatement / :[break, ;]
							CASE - ControlStatement / for case: (2 ) and content:
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . IMPLEMENTS ) ) with if-block:
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getExtending, (, ), ., add, (, typeString, ), ;]
										ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
									INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . WORD ) ) with if-block:
										ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[typeString, +, =, word, ., getWord, (, ), ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordList . get ( i + 1 ) . getKey ( ) . equals ( KeyWord . LESS ) ) with if-block:
											INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
											ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[int, endOfGeneric, =, ModelBuildHelper, ., parseGeneric, (, wordList, ,, i, +, 1, ), ;]
											WHILE - ControlStatement / referencing 2 variables / Checking condition: (i < endOfGeneric ) with content:
												INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . DOT ) ) with if-block:
											ASSIGNMENT - Statement / referencing 1 variables:[typeString, +, =, ", ;]
										ELSE - block:
											IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . COMMA ) ) with if-block:
												IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
													METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getExtending, (, ), ., add, (, typeString, ), ;]
													ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
											ELSE - block:
												IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
													IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
														METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getExtending, (, ), ., add, (, typeString, ), ;]
														ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
													ASSIGNMENT - Statement / referencing 1 variables:[classDefinitionState, =, 4, ;]
													INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
								BREAK - ControlStatement / :[break, ;]
							CASE - ControlStatement / for case: (3 ) and content:
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . EXTENDS ) ) with if-block:
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getImplementing, (, ), ., add, (, typeString, ), ;]
										ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
									DECREMENT - Statement / referencing 1 variables:[classDefinitionState, -, -, ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . WORD ) ) with if-block:
										ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[typeString, +, =, word, ., getWord, (, ), ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordList . get ( i + 1 ) . getKey ( ) . equals ( KeyWord . LESS ) ) with if-block:
											INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
											ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[int, endOfGeneric, =, ModelBuildHelper, ., parseGeneric, (, wordList, ,, i, +, 1, ), ;]
											WHILE - ControlStatement / referencing 2 variables / Checking condition: (i < endOfGeneric ) with content:
												INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . DOT ) ) with if-block:
											ASSIGNMENT - Statement / referencing 1 variables:[typeString, +, =, ", ;]
										ELSE - block:
											IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . COMMA ) ) with if-block:
												IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
													METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getImplementing, (, ), ., add, (, typeString, ), ;]
													ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
											ELSE - block:
												IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
													IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
														METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getImplementing, (, ), ., add, (, typeString, ), ;]
														ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
													INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
													INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
								BREAK - ControlStatement / :[break, ;]
							CASE - ControlStatement / for case: (4 ) and content:
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
									DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
									IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces = = 0 ) with if-block:
										ASSIGNMENT - Statement / referencing 1 variables:[classDefinitionState, =, 0, ;]
										ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, classcontent, =, new, ArrayList, , WordInFile, , (, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[classcontent, ., addAll, (, content, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[foundClass, ., setContent, (, Arrays, ., asList, (, new, WordList, (, classcontent, ), ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[fileModel, ., add, (, foundClass, ), ;]
										ASSIGNMENT - Statement / referencing 1 variables:[foundClass, =, null, ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
									ELSE - block:
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
										INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
									METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
								BREAK - ControlStatement / :[break, ;]
			IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 2 methods:[fileModel, ., add, (, new, WordList, (, content, ), ), ;]
			RETURN - ControlStatement / referencing 1 variables / :[return, fileModel, ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: parseClassContent, Returntype: List < JavaFileContent > , Parameters: JavaFileContent  parent and Body:
		TRY - ControlStatement / declaring 1 variables / with try-block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, result, =, new, ArrayList, , JavaFileContent, , (, ), ;]
			ASSIGNMENT - Statement / declaring 1 variables:[JavaFileContent, content, =, null, ;]
			IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (parent . getContent ( ) ! = null & & ! parent . getContent ( ) . isEmpty ( ) ) with if-block:
				ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[content, =, parent, ., getContent, (, ), ., get, (, 0, ), ;]
			ASSIGNMENT - Statement / declaring 1 variables:[KeyWord, parenttype, =, null, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (parent instanceof JavaClass ) with if-block:
				ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[parenttype, =, (, (, JavaClass, ), parent, ), ., getType, (, ), ;]
			ELSE - block:
				IF - ControlStatement / referencing 1 variables / Checking condition: (parent instanceof JavaStatementWithAnonymousClass ) with if-block:
					ASSIGNMENT - Statement / referencing 1 variables:[parenttype, =, KeyWord, ., CLASS, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof WordList ) with if-block:
				IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (parenttype ! = null & & parenttype . equals ( KeyWord . ENUM ) ) with if-block:
					ASSIGNMENT - Statement / referencing 3 variables / calling 2 methods:[content, =, parseEnumValues, (, result, ,, (, (, WordList, ), content, ), ., getWordlist, (, ), ), ;]
				IF - ControlStatement / referencing 1 variables / Checking condition: (content ! = null ) with if-block:
					ASSIGNMENT - Statement / declaring 1 variables:[boolean, abstractClass, =, false, ;]
					IF - ControlStatement / referencing 3 variables / calling 3 methods / Checking condition: (parent instanceof JavaClass & & parenttype = = KeyWord . CLASS & & ( ( JavaClass ) parent ) . getModifiers ( ) . contains ( new WordInFile ( null , KeyWord . ABSTRACT ) ) ) with if-block:
						ASSIGNMENT - Statement / referencing 1 variables:[abstractClass, =, true, ;]
					FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 2 methods / Enhanced version scanning: (JavaFileContent classcontent : parseMethodsAndClasses ( ( ( WordList ) content ) . getWordlist ( ) , parenttype , abstractClass ) ) with content:
						IF - ControlStatement / referencing 3 variables / Checking condition: (classcontent instanceof JavaClass | | classcontent instanceof JavaMethod | | classcontent instanceof JavaStatementWithAnonymousClass ) with if-block:
							METHODCALL - Statement / referencing 2 variables / calling 2 methods:[classcontent, ., setContent, (, parseClassContent, (, classcontent, ), ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, classcontent, ), ;]
			ELSE - block:
				IF - ControlStatement / referencing 1 variables / Checking condition: (content = = null ) with if-block:
					ASSIGNMENT - Statement / referencing 1 variables:[result, =, null, ;]
			RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: parseMethodsAndClasses, Returntype: List < JavaFileContent > , Parameters: List < WordInFile >  wordlistKeyWord  parenttypeboolean  abstractClass and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, result, =, new, ArrayList, , JavaFileContent, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 0, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, methodDetectionState, =, 0, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, classDefinitionState, =, 0, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[JavaClass, foundClass, =, null, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[String, typeString, =, ", ;]
		ASSIGNMENT - Statement / declaring 1 variables:[String, maybeMethodName, =, null, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, maybeReturnType, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, modifiers, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, content, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, temporary, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaVariable, >, parameter, =, new, ArrayList, , JavaVariable, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[JavaMethod, method, =, null, ;]
		FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < wordlist . size ( ) ) increment: (i + + ) and content:
			ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[WordInFile, word, =, wordlist, ., get, (, i, ), ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (classDefinitionState > 0 ) with if-block:
				SWITCH - ControlStatement / referencing 1 variables / over value of : (classDefinitionState ) and cases:
					CASE - ControlStatement / for case: (1 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
							ASSIGNMENT - Statement / referencing 1 variables:[classDefinitionState, =, 4, ;]
							INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . EXTENDS ) ) with if-block:
								INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
							ELSE - block:
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . IMPLEMENTS ) ) with if-block:
									INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
									INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (2 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . IMPLEMENTS ) ) with if-block:
							IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
								METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getExtending, (, ), ., add, (, typeString, ), ;]
								ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
							INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . WORD ) ) with if-block:
								ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[typeString, +, =, word, ., getWord, (, ), ;]
								IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i + 1 ) . getKey ( ) . equals ( KeyWord . LESS ) ) with if-block:
									INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
									ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[int, endOfGeneric, =, ModelBuildHelper, ., parseGeneric, (, wordlist, ,, i, +, 1, ), ;]
									WHILE - ControlStatement / referencing 2 variables / Checking condition: (i < endOfGeneric ) with content:
										INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
							ELSE - block:
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . DOT ) ) with if-block:
									ASSIGNMENT - Statement / referencing 1 variables:[typeString, +, =, ", ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . COMMA ) ) with if-block:
										IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
											METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getExtending, (, ), ., add, (, typeString, ), ;]
											ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
											IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
												METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getExtending, (, ), ., add, (, typeString, ), ;]
												ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
											ASSIGNMENT - Statement / referencing 1 variables:[classDefinitionState, =, 4, ;]
											INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (3 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . EXTENDS ) ) with if-block:
							IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
								METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getImplementing, (, ), ., add, (, typeString, ), ;]
								ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
							DECREMENT - Statement / referencing 1 variables:[classDefinitionState, -, -, ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . WORD ) ) with if-block:
								ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[typeString, +, =, word, ., getWord, (, ), ;]
								IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i + 1 ) . getKey ( ) . equals ( KeyWord . LESS ) ) with if-block:
									INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
									ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[int, endOfGeneric, =, ModelBuildHelper, ., parseGeneric, (, wordlist, ,, i, +, 1, ), ;]
									WHILE - ControlStatement / referencing 2 variables / Checking condition: (i < endOfGeneric ) with content:
										INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
							ELSE - block:
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . DOT ) ) with if-block:
									ASSIGNMENT - Statement / referencing 1 variables:[typeString, +, =, ", ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . COMMA ) ) with if-block:
										IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
											METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getImplementing, (, ), ., add, (, typeString, ), ;]
											ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
											IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! typeString . isEmpty ( ) ) with if-block:
												METHODCALL - Statement / referencing 2 variables / calling 2 methods:[foundClass, ., getImplementing, (, ), ., add, (, typeString, ), ;]
												ASSIGNMENT - Statement / referencing 1 variables:[typeString, =, ", ;]
											INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
											INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (4 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
							DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
							IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces = = 0 ) with if-block:
								ASSIGNMENT - Statement / referencing 1 variables:[classDefinitionState, =, 0, ;]
								ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, classcontent, =, new, ArrayList, , WordInFile, , (, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[classcontent, ., addAll, (, content, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 3 methods:[foundClass, ., setContent, (, Arrays, ., asList, (, new, WordList, (, classcontent, ), ), ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, foundClass, ), ;]
								ASSIGNMENT - Statement / referencing 1 variables:[foundClass, =, null, ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
							ELSE - block:
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
								INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
						BREAK - ControlStatement / :[break, ;]
			ELSE - block:
				SWITCH - ControlStatement / referencing 1 variables / over value of : (methodDetectionState ) and cases:
					CASE - ControlStatement / for case: (0 ) and content:
						IF - ControlStatement / referencing 3 variables / calling 2 methods / Checking condition: (( parenttype ! = null ) & & ! parenttype . equals ( KeyWord . ENUM ) & & word . equals ( KeyWord . ANNOTATION ) ) with if-block:
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
							IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, somecontent, =, new, ArrayList, , WordInFile, , (, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[somecontent, ., addAll, (, content, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordList, (, somecontent, ), ), ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
							METHODCALL - Statement / referencing 1 variables / calling 2 methods:[result, ., add, (, new, JavaStatement, (, StatementType, ., ANNOTATION, ), ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 2 variables / calling 5 methods / Checking condition: (word . getKey ( ) . getType ( ) . equals ( WordType . MODIFIER ) | | word . getKey ( ) . equals ( KeyWord . SYNCHRONIZED ) ) with if-block:
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[modifiers, ., add, (, word, ), ;]
							ELSE - block:
								IF - ControlStatement / referencing 4 variables / calling 5 methods / Checking condition: (( i = = 0 | | ! wordlist . get ( i - 1 ) . equals ( KeyWord . DOT ) ) & & ( word . getKey ( ) . getType ( ) . equals ( WordType . DECLARATOR ) ) ) with if-block:
									INCREMENT - Statement / referencing 1 variables:[classDefinitionState, +, +, ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
										ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, someContent, =, new, ArrayList, , WordInFile, , (, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[someContent, ., addAll, (, content, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordList, (, someContent, ), ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! temporary . isEmpty ( ) ) with if-block:
										ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, classmodifiers, =, new, ArrayList, , WordInFile, , (, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[classmodifiers, ., addAll, (, temporary, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
										ASSIGNMENT - Statement / referencing 5 variables / calling 6 methods:[foundClass, =, new, JavaClass, (, wordlist, ., get, (, i, +, 1, ), ., getWord, (, ), ,, null, ,, word, ., getKey, (, ), ,, classmodifiers, ,, new, ArrayList, , String, , (, ), ,, new, ArrayList, , String, , (, ), ), ;]
									ELSE - block:
										ASSIGNMENT - Statement / referencing 4 variables / calling 7 methods:[foundClass, =, new, JavaClass, (, wordlist, ., get, (, i, +, 1, ), ., getWord, (, ), ,, null, ,, word, ., getKey, (, ), ,, new, ArrayList, , WordInFile, , (, ), ,, new, ArrayList, , String, , (, ), ,, new, ArrayList, , String, , (, ), ), ;]
									INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . NEW ) ) with if-block:
										ASSIGNMENT - Statement / referencing 1 variables:[maybeMethodName, =, null, ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
										ASSIGNMENT - Statement / referencing 1 variables:[methodDetectionState, =, 0, ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
										ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[int, start, =, i, ;]
										ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, anonymousClassType, =, new, ArrayList, , WordInFile, , (, ), ;]
										INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) ) with if-block:
											METHODCALL - Statement / referencing 3 variables / calling 2 methods:[anonymousClassType, ., add, (, wordlist, ., get, (, i, ), ), ;]
											IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i + 1 ) . getKey ( ) . equals ( KeyWord . LESS ) ) with if-block:
												INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
												ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[int, endOfGeneric, =, ModelBuildHelper, ., parseGeneric, (, wordlist, ,, i, +, 1, ), ;]
												WHILE - ControlStatement / referencing 2 variables / Checking condition: (i < endOfGeneric ) with content:
													METHODCALL - Statement / referencing 3 variables / calling 2 methods:[anonymousClassType, ., add, (, wordlist, ., get, (, i, ), ), ;]
													INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
												METHODCALL - Statement / referencing 3 variables / calling 2 methods:[anonymousClassType, ., add, (, wordlist, ., get, (, i, ), ), ;]
												INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
											IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i ) . getKey ( ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
												ASSIGNMENT - Statement / declaring 1 variables:[int, openParantheses, =, 1, ;]
												METHODCALL - Statement / referencing 3 variables / calling 2 methods:[anonymousClassType, ., add, (, wordlist, ., get, (, i, ), ), ;]
												WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParantheses > 0 ) with content:
													INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
													IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i ) . getKey ( ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
														INCREMENT - Statement / referencing 1 variables:[openParantheses, +, +, ;]
													ELSE - block:
														IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i ) . getKey ( ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
															DECREMENT - Statement / referencing 1 variables:[openParantheses, -, -, ;]
													METHODCALL - Statement / referencing 3 variables / calling 2 methods:[anonymousClassType, ., add, (, wordlist, ., get, (, i, ), ), ;]
												INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
												IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i ) . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
													ASSIGNMENT - Statement / declaring 1 variables:[int, openBracesOfClass, =, 1, ;]
													ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, statementbefore, =, new, ArrayList, , WordInFile, , (, ), ;]
													ASSIGNMENT - Statement / declaring 1 variables:[boolean, finished, =, false, ;]
													ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[int, position, =, content, ., size, (, ), -, 1, ;]
													ASSIGNMENT - Statement / declaring 1 variables:[int, openParanthesesInStatement, =, 0, ;]
													WHILE - ControlStatement / referencing 2 variables / Checking condition: (! finished & & position > = 0 ) with content:
														IF - ControlStatement / referencing 6 variables / calling 6 methods / Checking condition: (content . get ( position ) . equals ( KeyWord . OPENBRACE ) | | content . get ( position ) . equals ( KeyWord . CLOSEBRACE ) | | content . get ( position ) . equals ( KeyWord . SEMICOLON ) ) with if-block:
															ASSIGNMENT - Statement / referencing 1 variables:[finished, =, true, ;]
														ELSE - block:
															IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( position ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
																INCREMENT - Statement / referencing 1 variables:[openParanthesesInStatement, +, +, ;]
															ELSE - block:
																IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( position ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
																	DECREMENT - Statement / referencing 1 variables:[openParanthesesInStatement, -, -, ;]
															METHODCALL - Statement / referencing 3 variables / calling 2 methods:[statementbefore, ., add, (, content, ., get, (, position, ), ), ;]
															METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., remove, (, position, ), ;]
															DECREMENT - Statement / referencing 1 variables:[position, -, -, ;]
													METHODCALL - Statement / referencing 1 variables / calling 1 methods:[Collections, ., reverse, (, statementbefore, ), ;]
													IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
														ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, somecontent, =, new, ArrayList, , WordInFile, , (, ), ;]
														METHODCALL - Statement / referencing 2 variables / calling 1 methods:[somecontent, ., addAll, (, content, ), ;]
														METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordList, (, somecontent, ), ), ;]
														METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
													ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[JavaStatementWithAnonymousClass, anoclass, =, new, JavaStatementWithAnonymousClass, (, statementbefore, ,, anonymousClassType, ), ;]
													ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, classBody, =, new, ArrayList, , WordInFile, , (, ), ;]
													WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBracesOfClass > 0 ) with content:
														INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
														IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i ) . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
															INCREMENT - Statement / referencing 1 variables:[openBracesOfClass, +, +, ;]
														ELSE - block:
															IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (wordlist . get ( i ) . getKey ( ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
																DECREMENT - Statement / referencing 1 variables:[openBracesOfClass, -, -, ;]
														IF - ControlStatement / referencing 1 variables / Checking condition: (openBracesOfClass > 0 ) with if-block:
															METHODCALL - Statement / referencing 3 variables / calling 2 methods:[classBody, ., add, (, wordlist, ., get, (, i, ), ), ;]
													METHODCALL - Statement / referencing 2 variables / calling 3 methods:[anoclass, ., setContent, (, Arrays, ., asList, (, new, WordList, (, classBody, ), ), ), ;]
													ASSIGNMENT - Statement / referencing 1 variables:[finished, =, false, ;]
													ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, statementafter, =, new, ArrayList, , WordInFile, , (, ), ;]
													WHILE - ControlStatement / referencing 3 variables / calling 1 methods / Checking condition: (! finished & & i < wordlist . size ( ) ) with content:
														INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
														IF - ControlStatement / referencing 1 variables / Checking condition: (openParanthesesInStatement > 0 ) with if-block:
															IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (wordlist . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
																INCREMENT - Statement / referencing 1 variables:[openParanthesesInStatement, +, +, ;]
															ELSE - block:
																IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (wordlist . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
																	DECREMENT - Statement / referencing 1 variables:[openParanthesesInStatement, -, -, ;]
														ELSE - block:
															IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (wordlist . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
																INCREMENT - Statement / referencing 1 variables:[openParanthesesInStatement, +, +, ;]
															ELSE - block:
																IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (wordlist . get ( i ) . equals ( KeyWord . SEMICOLON ) ) with if-block:
																	ASSIGNMENT - Statement / referencing 1 variables:[finished, =, true, ;]
														METHODCALL - Statement / referencing 3 variables / calling 2 methods:[statementafter, ., add, (, wordlist, ., get, (, i, ), ), ;]
													METHODCALL - Statement / referencing 2 variables / calling 1 methods:[anoclass, ., setStatementAfterClass, (, statementafter, ), ;]
													METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, anoclass, ), ;]
												ELSE - block:
													ASSIGNMENT - Statement / referencing 2 variables:[i, =, start, ;]
													METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
											ELSE - block:
												ASSIGNMENT - Statement / referencing 2 variables:[i, =, start, ;]
												METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
										ELSE - block:
											ASSIGNMENT - Statement / referencing 2 variables:[i, =, start, ;]
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
									ELSE - block:
										IF - ControlStatement / referencing 3 variables / calling 5 methods / Checking condition: (( parenttype ! = null ) & & ( word . getKey ( ) . equals ( KeyWord . WORD ) | | word . getKey ( ) . getType ( ) . equals ( WordType . DATATYPE ) ) ) with if-block:
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[maybeReturnType, ., add, (, word, ), ;]
											IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . WORD ) ) with if-block:
												ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[maybeMethodName, =, word, ., getWord, (, ), ;]
											INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
										ELSE - block:
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (1 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
							INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
							INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
						ELSE - block:
							IF - ControlStatement / referencing 3 variables / calling 5 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . DOT ) & & wordlist . get ( i + 1 ) . getKey ( ) . equals ( KeyWord . WORD ) ) with if-block:
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
								METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, +, 1, ), ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[maybeReturnType, ., add, (, word, ), ;]
								METHODCALL - Statement / referencing 3 variables / calling 2 methods:[maybeReturnType, ., add, (, wordlist, ., get, (, i, +, 1, ), ), ;]
								INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
							ELSE - block:
								IF - ControlStatement / referencing 3 variables / calling 5 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . WORD ) & & wordlist . get ( i + 1 ) . getKey ( ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
									METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
									METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, +, 1, ), ), ;]
									ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[maybeMethodName, =, word, ., getWord, (, ), ;]
									INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
									INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
									INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
								ELSE - block:
									IF - ControlStatement / referencing 3 variables / calling 5 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACKET ) & & wordlist . get ( i + 1 ) . getKey ( ) . equals ( KeyWord . CLOSEBRACKET ) ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
										METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, +, 1, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[maybeReturnType, ., add, (, word, ), ;]
										METHODCALL - Statement / referencing 3 variables / calling 2 methods:[maybeReturnType, ., add, (, wordlist, ., get, (, i, +, 1, ), ), ;]
										INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
										INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . LESS ) ) with if-block:
											ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[int, endOfGeneric, =, ModelBuildHelper, ., parseGeneric, (, wordlist, ,, i, +, 1, ), ;]
											IF - ControlStatement / referencing 1 variables / Checking condition: (endOfGeneric = = 0 ) with if-block:
												DECREMENT - Statement / referencing 1 variables:[i, -, -, ;]
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
												ASSIGNMENT - Statement / referencing 1 variables:[maybeMethodName, =, null, ;]
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
												ASSIGNMENT - Statement / referencing 1 variables:[methodDetectionState, =, 0, ;]
												METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
											ELSE - block:
												WHILE - ControlStatement / referencing 2 variables / Checking condition: (i < endOfGeneric ) with content:
													METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, ), ), ;]
													METHODCALL - Statement / referencing 3 variables / calling 2 methods:[maybeReturnType, ., add, (, wordlist, ., get, (, i, ), ), ;]
													INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
												METHODCALL - Statement / referencing 3 variables / calling 2 methods:[maybeReturnType, ., add, (, wordlist, ., get, (, i, ), ), ;]
												METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, ), ), ;]
												INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
										ELSE - block:
											DECREMENT - Statement / referencing 1 variables:[i, -, -, ;]
											ASSIGNMENT - Statement / referencing 1 variables:[maybeMethodName, =, null, ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
											ASSIGNMENT - Statement / referencing 1 variables:[methodDetectionState, =, 0, ;]
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (2 ) and content:
						IF - ControlStatement / referencing 3 variables / calling 5 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . WORD ) & & wordlist . get ( i + 1 ) . getKey ( ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
							METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, +, 1, ), ), ;]
							ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[maybeMethodName, =, word, ., getWord, (, ), ;]
							INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
							INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
						ELSE - block:
							DECREMENT - Statement / referencing 1 variables:[i, -, -, ;]
							ASSIGNMENT - Statement / referencing 1 variables:[maybeMethodName, =, null, ;]
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
							ASSIGNMENT - Statement / referencing 1 variables:[methodDetectionState, =, 0, ;]
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (3 ) and content:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 3 variables / calling 3 methods:[WordInFile, param, =, ModelBuildHelper, ., isVariableDeclaration, (, wordlist, ., subList, (, i, ,, wordlist, ., size, (, ), -, 1, ), ,, false, ), ;]
						IF - ControlStatement / referencing 1 variables / Checking condition: (param ! = null ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, paramtype, =, new, ArrayList, , WordInFile, , (, ), ;]
							WHILE - ControlStatement / referencing 3 variables / calling 2 methods / Checking condition: (! wordlist . get ( i ) . equals ( param ) ) with content:
								METHODCALL - Statement / referencing 3 variables / calling 2 methods:[paramtype, ., add, (, wordlist, ., get, (, i, ), ), ;]
								METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, ), ), ;]
								INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
							METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, ), ), ;]
							METHODCALL - Statement / referencing 3 variables / calling 3 methods:[parameter, ., add, (, new, JavaVariable, (, param, ., getWord, (, ), ,, paramtype, ), ), ;]
							INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
								INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
								INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
							ELSE - block:
								DECREMENT - Statement / referencing 1 variables:[i, -, -, ;]
								ASSIGNMENT - Statement / referencing 1 variables:[methodDetectionState, =, 0, ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
								ASSIGNMENT - Statement / referencing 1 variables:[maybeMethodName, =, null, ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (4 ) and content:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 3 variables / calling 3 methods:[WordInFile, secondaryparam, =, ModelBuildHelper, ., isVariableDeclaration, (, wordlist, ., subList, (, i, ,, wordlist, ., size, (, ), -, 1, ), ,, true, ), ;]
						IF - ControlStatement / referencing 1 variables / Checking condition: (secondaryparam ! = null ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, paramtype, =, new, ArrayList, , WordInFile, , (, ), ;]
							INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
							WHILE - ControlStatement / referencing 3 variables / calling 2 methods / Checking condition: (! wordlist . get ( i ) . equals ( secondaryparam ) ) with content:
								METHODCALL - Statement / referencing 3 variables / calling 2 methods:[paramtype, ., add, (, wordlist, ., get, (, i, ), ), ;]
								METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, ), ), ;]
								INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
							METHODCALL - Statement / referencing 3 variables / calling 2 methods:[temporary, ., add, (, wordlist, ., get, (, i, ), ), ;]
							METHODCALL - Statement / referencing 3 variables / calling 3 methods:[parameter, ., add, (, new, JavaVariable, (, secondaryparam, ., getWord, (, ), ,, paramtype, ), ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
								INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
							ELSE - block:
								DECREMENT - Statement / referencing 1 variables:[i, -, -, ;]
								ASSIGNMENT - Statement / referencing 1 variables:[methodDetectionState, =, 0, ;]
								ASSIGNMENT - Statement / referencing 1 variables:[maybeMethodName, =, null, ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parameter, ., clear, (, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (5 ) and content:
						IF - ControlStatement / referencing 3 variables / calling 6 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . THROWS ) | | word . getKey ( ) . equals ( KeyWord . WORD ) | | word . getKey ( ) . equals ( KeyWord . COMMA ) ) with if-block:
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temporary, ., add, (, word, ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 3 variables / calling 3 methods / Checking condition: (( parenttype . equals ( KeyWord . INTERFACE ) | | abstractClass ) & & word . getKey ( ) . equals ( KeyWord . SEMICOLON ) ) with if-block:
								IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
									ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, somecontent, =, new, ArrayList, , WordInFile, , (, ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 1 methods:[somecontent, ., addAll, (, content, ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordList, (, somecontent, ), ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
								ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, methodmodifiers, =, new, ArrayList, , WordInFile, , (, ), ;]
								IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! modifiers . isEmpty ( ) ) with if-block:
									METHODCALL - Statement / referencing 2 variables / calling 1 methods:[methodmodifiers, ., addAll, (, modifiers, ), ;]
								ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, methodreturntype, =, new, ArrayList, , WordInFile, , (, ), ;]
								IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! maybeReturnType . isEmpty ( ) ) with if-block:
									METHODCALL - Statement / referencing 2 variables / calling 1 methods:[methodreturntype, ., addAll, (, maybeReturnType, ), ;]
								ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaVariable, >, params, =, new, ArrayList, , JavaVariable, , (, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[params, ., addAll, (, parameter, ), ;]
								ASSIGNMENT - Statement / referencing 5 variables / calling 1 methods:[method, =, new, JavaMethod, (, maybeMethodName, ,, methodreturntype, ,, methodmodifiers, ,, params, ,, null, ), ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
								ASSIGNMENT - Statement / referencing 1 variables:[maybeMethodName, =, null, ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parameter, ., clear, (, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, method, ), ;]
								ASSIGNMENT - Statement / referencing 1 variables:[method, =, null, ;]
								ASSIGNMENT - Statement / referencing 1 variables:[methodDetectionState, =, 0, ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
							ELSE - block:
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
										ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, somecontent, =, new, ArrayList, , WordInFile, , (, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[somecontent, ., addAll, (, content, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordList, (, somecontent, ), ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
									INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
									INCREMENT - Statement / referencing 1 variables:[methodDetectionState, +, +, ;]
									ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaVariable, >, params, =, new, ArrayList, , JavaVariable, , (, ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 1 methods:[params, ., addAll, (, parameter, ), ;]
									ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, methodmodifiers, =, new, ArrayList, , WordInFile, , (, ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! modifiers . isEmpty ( ) ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[methodmodifiers, ., addAll, (, modifiers, ), ;]
									ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, methodreturntype, =, new, ArrayList, , WordInFile, , (, ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! maybeReturnType . isEmpty ( ) ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[methodreturntype, ., addAll, (, maybeReturnType, ), ;]
									ASSIGNMENT - Statement / referencing 5 variables / calling 1 methods:[method, =, new, JavaMethod, (, maybeMethodName, ,, methodreturntype, ,, methodmodifiers, ,, params, ,, null, ), ;]
									ASSIGNMENT - Statement / referencing 1 variables:[maybeMethodName, =, null, ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parameter, ., clear, (, ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
								ELSE - block:
									DECREMENT - Statement / referencing 1 variables:[i, -, -, ;]
									ASSIGNMENT - Statement / referencing 1 variables:[methodDetectionState, =, 0, ;]
									ASSIGNMENT - Statement / referencing 1 variables:[maybeMethodName, =, null, ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[maybeReturnType, ., clear, (, ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[modifiers, ., clear, (, ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parameter, ., clear, (, ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[temporary, ., clear, (, ), ;]
						BREAK - ControlStatement / :[break, ;]
					CASE - ControlStatement / for case: (6 ) and content:
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
							DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
							IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces = = 0 ) with if-block:
								ASSIGNMENT - Statement / referencing 1 variables:[methodDetectionState, =, 0, ;]
								ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, methodcontent, =, new, ArrayList, , WordInFile, , (, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[methodcontent, ., addAll, (, content, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 3 methods:[method, ., setContent, (, Arrays, ., asList, (, new, WordList, (, methodcontent, ), ), ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, method, ), ;]
								ASSIGNMENT - Statement / referencing 1 variables:[method, =, null, ;]
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[content, ., clear, (, ), ;]
							ELSE - block:
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
								INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., add, (, word, ), ;]
						BREAK - ControlStatement / :[break, ;]
		IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! temporary . isEmpty ( ) ) with if-block:
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., addAll, (, temporary, ), ;]
		IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! content . isEmpty ( ) ) with if-block:
			METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordList, (, content, ), ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
	METHOD with name: parseEnumValues, Returntype: JavaFileContent , Parameters: List < JavaFileContent >  resultList < WordInFile >  wordlist and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 2 methods:[JavaEnumValues, values, =, new, JavaEnumValues, (, new, ArrayList, , List, , WordInFile, , , (, ), ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[WordList, offcut, =, null, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, otherContent, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[boolean, endOfValues, =, false, ;]
		FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < wordlist . size ( ) ) increment: (i + + ) and content:
			IF - ControlStatement / referencing 1 variables / Checking condition: (! endOfValues ) with if-block:
				ASSIGNMENT - Statement / declaring 1 variables:[boolean, endOfValue, =, false, ;]
				ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, value, =, new, ArrayList, , WordInFile, , (, ), ;]
				ASSIGNMENT - Statement / declaring 1 variables:[int, openParantheses, =, 0, ;]
				WHILE - ControlStatement / referencing 1 variables / Checking condition: (! endOfValue ) with content:
					IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (i = = wordlist . size ( ) ) with if-block:
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[values, ., getValues, (, ), ., add, (, value, ), ;]
						ASSIGNMENT - Statement / referencing 1 variables:[endOfValue, =, true, ;]
						ASSIGNMENT - Statement / referencing 1 variables:[endOfValues, =, true, ;]
					ELSE - block:
						IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (wordlist . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
							INCREMENT - Statement / referencing 1 variables:[openParantheses, +, +, ;]
						ELSE - block:
							IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (wordlist . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
								DECREMENT - Statement / referencing 1 variables:[openParantheses, -, -, ;]
						IF - ControlStatement / referencing 5 variables / calling 4 methods / Checking condition: (openParantheses = = 0 & & ( wordlist . get ( i ) . equals ( KeyWord . COMMA ) | | wordlist . get ( i ) . equals ( KeyWord . SEMICOLON ) ) ) with if-block:
							ASSIGNMENT - Statement / referencing 1 variables:[endOfValue, =, true, ;]
							METHODCALL - Statement / referencing 2 variables / calling 2 methods:[values, ., getValues, (, ), ., add, (, value, ), ;]
							IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (wordlist . get ( i ) . equals ( KeyWord . SEMICOLON ) ) with if-block:
								ASSIGNMENT - Statement / referencing 1 variables:[endOfValues, =, true, ;]
						ELSE - block:
							METHODCALL - Statement / referencing 3 variables / calling 2 methods:[value, ., add, (, wordlist, ., get, (, i, ), ), ;]
							INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ELSE - block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[otherContent, ., add, (, wordlist, ., get, (, i, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, values, ), ;]
		IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! otherContent . isEmpty ( ) ) with if-block:
			ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[offcut, =, new, WordList, (, otherContent, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, offcut, ;]
*** Step 5 - Count measures
*** Finished at 13:07:24:796
Arguments: 64.0
If-Statements: 135.0
Literals: 21.0
Classes: 1.0
Methods: 5.0
Branches: 329.0
References: 921.0
Function-Calls: 619.0
Cases: 16.0
Secure Statements: 923.0
Variables: 95.0
Imports: 19.0
Loop-Statements: 18.0
Statements: 923.0
Parameters: 8.0
Return-Statements: 5.0
Results: 166.0
Predicates: 227.0
Constants: 12.0
Foreign-Function-Calls: 614.0
Switch-Statements: 3.0
---------- File: ModelBuildHelper.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:24:872
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:24:875
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:24:890
*** Step 4 - Expand model with details
*** Finished at 13:07:24:892
PACKAGE - Statement:[package, plugin, ., analyser, ;]
IMPORT - Statement:[import, java, ., util, ., Arrays, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., KeyWord, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordType, ;]
CLASS with name: ModelBuildHelper and Body:
	ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[public, final, static, List, <, KeyWord, >, keywords, =, Arrays, ., asList, (, KeyWord, ., SWITCH, ,, KeyWord, ., DO, ,, KeyWord, ., WHILE, ,, KeyWord, ., FOR, ,, KeyWord, ., IF, ,, KeyWord, ., TRY, ,, KeyWord, ., RETURN, ,, KeyWord, ., SYNCHRONIZED, ,, KeyWord, ., BREAK, ,, KeyWord, ., CONTINUE, ,, KeyWord, ., ASSERT, ,, KeyWord, ., THROW, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[public, final, static, List, <, String, >, breaks, =, Arrays, ., asList, (, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ,, ", ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[public, final, static, List, <, KeyWord, >, operators, =, Arrays, ., asList, (, KeyWord, ., ADD, ,, KeyWord, ., SUB, ,, KeyWord, ., MULT, ,, KeyWord, ., DIV, ,, KeyWord, ., MOD, ,, KeyWord, ., AND, ,, KeyWord, ., OR, ,, KeyWord, ., BITXOR, ), ;]
	METHOD with name: isNumber, Returntype: boolean , Parameters: String  potentialNumber and Body:
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[String, [, ], chars, =, potentialNumber, ., split, (, ", ), ;]
		IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! chars [ 0 ] . matches ( " ) ) with if-block:
			RETURN - ControlStatement / :[return, false, ;]
		FOR - ControlStatement / declaring 1 variables / referencing 3 variables / With initialization: (int i = 1 ) termination: (i < chars . length - 1 ) increment: (i + + ) and content:
			IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (! chars [ i ] . matches ( " ) ) with if-block:
				RETURN - ControlStatement / :[return, false, ;]
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (! chars [ chars . length - 1 ] . matches ( " ) ) with if-block:
			RETURN - ControlStatement / :[return, false, ;]
		RETURN - ControlStatement / :[return, true, ;]
	METHOD with name: isVariableDeclaration, Returntype: WordInFile , Parameters: List < WordInFile >  wordsboolean  withSeparator and Body:
		TRY - ControlStatement / declaring 1 variables / with try-block:
			ASSIGNMENT - Statement / declaring 1 variables:[int, position, =, 0, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (withSeparator ) with if-block:
				IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (! words . get ( position ) . getKey ( ) . equals ( KeyWord . COMMA ) ) with if-block:
					RETURN - ControlStatement / :[return, null, ;]
				ELSE - block:
					INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			WHILE - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . ANNOTATION ) ) with content:
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			WHILE - ControlStatement / referencing 4 variables / calling 8 methods / Checking condition: (words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . MODIFIER ) | | words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . STATEMENTORMODIFIER ) ) with content:
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			IF - ControlStatement / referencing 4 variables / calling 7 methods / Checking condition: (! ( words . get ( position ) . getKey ( ) . equals ( KeyWord . WORD ) | | words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . DATATYPE ) ) ) with if-block:
				RETURN - ControlStatement / :[return, null, ;]
			ELSE - block:
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
				IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (position > = words . size ( ) ) with if-block:
					RETURN - ControlStatement / :[return, null, ;]
			IF - ControlStatement / referencing 4 variables / calling 6 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . DOT ) & & ! words . get ( position + 1 ) . getKey ( ) . equals ( KeyWord . DOT ) ) with if-block:
				WHILE - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . DOT ) ) with content:
					INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
					IF - ControlStatement / referencing 4 variables / calling 7 methods / Checking condition: (! ( words . get ( position ) . getKey ( ) . equals ( KeyWord . WORD ) | | words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . DATATYPE ) ) ) with if-block:
						RETURN - ControlStatement / :[return, null, ;]
					ELSE - block:
						INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			IF - ControlStatement / referencing 4 variables / calling 6 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . OPENBRACKET ) & & words . get ( position + 1 ) . getKey ( ) . equals ( KeyWord . CLOSEBRACKET ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			ELSE - block:
				IF - ControlStatement / referencing 6 variables / calling 9 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . DOT ) & & words . get ( position + 1 ) . getKey ( ) . equals ( KeyWord . DOT ) & & words . get ( position + 2 ) . getKey ( ) . equals ( KeyWord . DOT ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
					INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
					INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
				ELSE - block:
					IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . LESS ) ) with if-block:
						INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
						ASSIGNMENT - Statement / referencing 3 variables / calling 1 methods:[position, =, parseGeneric, (, words, ,, position, ), ;]
						IF - ControlStatement / referencing 1 variables / Checking condition: (position = = 0 ) with if-block:
							RETURN - ControlStatement / :[return, null, ;]
						INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . WORD ) ) with if-block:
				RETURN - ControlStatement / referencing 2 variables / calling 1 methods / :[return, words, ., get, (, position, ), ;]
			RETURN - ControlStatement / :[return, null, ;]
		CATCH - (Exception e ) And catch-block:
			RETURN - ControlStatement / :[return, null, ;]
	METHOD with name: parseGeneric, Returntype: int , Parameters: List < WordInFile >  wordsint  position and Body:
		TRY - ControlStatement / declaring 1 variables / with try-block:
			IF - ControlStatement / referencing 4 variables / calling 7 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . WORD ) | | words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . DATATYPE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			ELSE - block:
				IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . QUESTIONMARK ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
					IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . EXTENDS ) ) with if-block:
						INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
						IF - ControlStatement / referencing 4 variables / calling 7 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . WORD ) | | words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . DATATYPE ) ) with if-block:
							INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
				ELSE - block:
					RETURN - ControlStatement / :[return, 0, ;]
			WHILE - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . DOT ) ) with content:
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
				IF - ControlStatement / referencing 4 variables / calling 7 methods / Checking condition: (! ( words . get ( position ) . getKey ( ) . equals ( KeyWord . WORD ) | | words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . DATATYPE ) ) ) with if-block:
					RETURN - ControlStatement / :[return, 0, ;]
				ELSE - block:
					INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			IF - ControlStatement / referencing 4 variables / calling 6 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . OPENBRACKET ) & & words . get ( position + 1 ) . getKey ( ) . equals ( KeyWord . CLOSEBRACKET ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			ELSE - block:
				IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . LESS ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
					ASSIGNMENT - Statement / referencing 3 variables / calling 1 methods:[position, =, parseGeneric, (, words, ,, position, ), ;]
					IF - ControlStatement / referencing 1 variables / Checking condition: (position = = 0 ) with if-block:
						RETURN - ControlStatement / :[return, 0, ;]
					INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . COMMA ) ) with if-block:
				ASSIGNMENT - Statement / declaring 1 variables:[boolean, comma, =, true, ;]
				INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
				WHILE - ControlStatement / referencing 1 variables / Checking condition: (comma ) with content:
					IF - ControlStatement / referencing 4 variables / calling 7 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . WORD ) | | words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . DATATYPE ) ) with if-block:
						INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
					ELSE - block:
						IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . QUESTIONMARK ) ) with if-block:
							INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
							IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . EXTENDS ) ) with if-block:
								INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
								IF - ControlStatement / referencing 4 variables / calling 7 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . WORD ) | | words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . DATATYPE ) ) with if-block:
									INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
						ELSE - block:
							RETURN - ControlStatement / :[return, 0, ;]
					WHILE - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . DOT ) ) with content:
						INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
						IF - ControlStatement / referencing 4 variables / calling 7 methods / Checking condition: (! ( words . get ( position ) . getKey ( ) . equals ( KeyWord . WORD ) | | words . get ( position ) . getKey ( ) . getType ( ) . equals ( WordType . DATATYPE ) ) ) with if-block:
							RETURN - ControlStatement / :[return, 0, ;]
						ELSE - block:
							INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
					IF - ControlStatement / referencing 4 variables / calling 6 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . OPENBRACKET ) & & words . get ( position + 1 ) . getKey ( ) . equals ( KeyWord . CLOSEBRACKET ) ) with if-block:
						INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
						INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
					ELSE - block:
						IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . LESS ) ) with if-block:
							INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
							ASSIGNMENT - Statement / referencing 3 variables / calling 1 methods:[position, =, parseGeneric, (, words, ,, position, ), ;]
							IF - ControlStatement / referencing 1 variables / Checking condition: (position = = 0 ) with if-block:
								RETURN - ControlStatement / :[return, 0, ;]
							INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
					IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (! words . get ( position ) . getKey ( ) . equals ( KeyWord . COMMA ) ) with if-block:
						ASSIGNMENT - Statement / referencing 1 variables:[comma, =, false, ;]
					ELSE - block:
						INCREMENT - Statement / referencing 1 variables:[position, +, +, ;]
			IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (words . get ( position ) . getKey ( ) . equals ( KeyWord . GREATER ) ) with if-block:
				RETURN - ControlStatement / referencing 1 variables / :[return, position, ;]
			RETURN - ControlStatement / :[return, 0, ;]
		CATCH - (Exception e ) And catch-block:
			RETURN - ControlStatement / :[return, 0, ;]
*** Step 5 - Count measures
*** Finished at 13:07:24:898
Arguments: 7.0
If-Statements: 35.0
Literals: 31.0
Classes: 1.0
Methods: 3.0
Branches: 107.0
References: 166.0
Function-Calls: 157.0
Secure Statements: 187.0
Variables: 14.0
Imports: 6.0
Loop-Statements: 7.0
Statements: 190.0
Parameters: 5.0
Return-Statements: 21.0
Results: 32.0
Predicates: 104.0
Constants: 0.0
Foreign-Function-Calls: 154.0
---------- File: ModelDetailExpander.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:25:972
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:25:984
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:25:993
*** Step 4 - Expand model with details
*** Finished at 13:07:26:022
PACKAGE - Statement:[package, plugin, ., analyser, ;]
IMPORT - Statement:[import, java, ., util, ., ArrayList, ;]
IMPORT - Statement:[import, java, ., util, ., HashMap, ;]
IMPORT - Statement:[import, java, ., util, ., HashSet, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, java, ., util, ., Map, ;]
IMPORT - Statement:[import, java, ., util, ., Set, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., KeyWord, ;]
IMPORT - Statement:[import, plugin, ., model, ., StatementType, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordList, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordType, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaClass, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaControlStatement, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaMethod, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaStatement, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaStatementWithAnonymousClass, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaVariable, ;]
IMPORT - Statement:[import, plugin, ., util, ., Logger, ;]
IMPORT - Statement:[import, plugin, ., util, ., ParsingException, ;]
CLASS with name: ModelDetailExpander and Body:
	METHOD with name: parseModelDetails, Returntype: List < JavaFileContent > , Parameters: List < JavaFileContent >  fileModel and Body:
		ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[fileModel, =, parseRemainingWordListsToStatements, (, fileModel, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parseDeclarationsAndCalls, (, fileModel, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parseReferences, (, fileModel, ,, null, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parseAssignments, (, fileModel, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parseRemainingStatementTypes, (, fileModel, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parseComparators, (, fileModel, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 2 methods:[Logger, ., getLogger, (, null, ), ., printModel, (, ", ,, fileModel, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, fileModel, ;]
	METHOD with name: parseRemainingWordListsToStatements, Returntype: List < JavaFileContent > , Parameters: List < JavaFileContent >  contents and Body:
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (contents = = null | | contents . isEmpty ( ) ) with if-block:
			RETURN - ControlStatement / referencing 1 variables / :[return, contents, ;]
		TRY - ControlStatement / declaring 1 variables / with try-block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, result, =, new, ArrayList, , JavaFileContent, , (, ), ;]
			FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contents ) with content:
				IF - ControlStatement / referencing 4 variables / Checking condition: (content instanceof JavaClass | | content instanceof JavaMethod | | content instanceof JavaControlStatement | | content instanceof JavaStatementWithAnonymousClass ) with if-block:
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[content, ., setContent, (, parseRemainingWordListsToStatements, (, content, ., getContent, (, ), ), ), ;]
				IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaControlStatement ) with if-block:
					ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaControlStatement, ctrlstm, =, (, JavaControlStatement, ), content, ;]
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[ctrlstm, ., setOthercontent, (, parseRemainingWordListsToStatements, (, ctrlstm, ., getOthercontent, (, ), ), ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[ctrlstm, ., setResources, (, parseRemainingWordListsToStatements, (, ctrlstm, ., getResources, (, ), ), ), ;]
					IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (ctrlstm . getCatchedExceptions ( ) ! = null ) with if-block:
						FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 2 methods / Enhanced version scanning: (List < WordInFile > exception : ctrlstm . getCatchedExceptions ( ) . keySet ( ) ) with content:
							METHODCALL - Statement / referencing 4 variables / calling 5 methods:[ctrlstm, ., getCatchedExceptions, (, ), ., put, (, exception, ,, parseRemainingWordListsToStatements, (, ctrlstm, ., getCatchedExceptions, (, ), ., get, (, exception, ), ), ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, ctrlstm, ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (! ( content instanceof WordList ) ) with if-block:
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, content, ), ;]
					ELSE - block:
						METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, parseWordListToStatements, (, (, (, WordList, ), content, ), ., getWordlist, (, ), ), ), ;]
			RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: parseDeclarationsAndCalls, Returntype: void , Parameters: List < JavaFileContent >  contents and Body:
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (contents = = null | | contents . isEmpty ( ) ) with if-block:
			RETURN - ControlStatement / :[return, ;]
		TRY - ControlStatement / declaring 1 variables / with try-block:
			FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contents ) with content:
				IF - ControlStatement / referencing 2 variables / Checking condition: (content instanceof JavaClass | | content instanceof JavaMethod ) with if-block:
					METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, content, ., getContent, (, ), ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatementWithAnonymousClass ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatementWithAnonymousClass, theStatement, =, (, JavaStatementWithAnonymousClass, ), content, ;]
						METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, theStatement, ., getContent, (, ), ), ;]
						ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, textToScan, =, new, ArrayList, , WordInFile, , (, ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[textToScan, ., addAll, (, theStatement, ., getStatementBeforeClass, (, ), ), ;]
						METHODCALL - Statement / referencing 1 variables / calling 2 methods:[textToScan, ., add, (, new, WordInFile, (, null, ,, KeyWord, ., NEW, ), ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[textToScan, ., addAll, (, theStatement, ., getClassType, (, ), ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[textToScan, ., addAll, (, theStatement, ., getStatementAfterClass, (, ), ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[theStatement, ., setStatementText, (, textToScan, ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseDeclarationsAndCallsInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ), ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaControlStatement ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaControlStatement, theStatement, =, (, JavaControlStatement, ), content, ;]
							SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
								CASE - ControlStatement / for case: (SWITCH , WHILE , DOWHILE , SYNCHRONIZED , CASE ) and content:
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseDeclarationsAndCallsInStatement, (, theStatement, ,, theStatement, ., getCondition, (, ), ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, theStatement, ., getContent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (FOR ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, theStatement, ., getContent, (, ), ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseDeclarationsAndCallsInStatement, (, theStatement, ,, theStatement, ., getCondition, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getInitialization ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseDeclarationsAndCallsInStatement, (, theStatement, ,, theStatement, ., getInitialization, (, ), ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseDeclarationsAndCallsInStatement, (, theStatement, ,, theStatement, ., getIncrement, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (IF ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, theStatement, ., getContent, (, ), ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseDeclarationsAndCallsInStatement, (, theStatement, ,, theStatement, ., getCondition, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, theStatement, ., getOthercontent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (TRY ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, theStatement, ., getContent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, theStatement, ., getOthercontent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getResources ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, theStatement, ., getResources, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getCatchedExceptions ( ) ! = null ) with if-block:
										ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[Map, <, List, <, WordInFile, >, ,, List, <, JavaFileContent, >, >, resultMap, =, new, HashMap, , List, , WordInFile, , , List, , JavaFileContent, , , (, ), ;]
										FOR - ControlStatement / declaring 1 variables / calling 2 methods / Enhanced version scanning: (List < WordInFile > theStatement . getCatchedExceptions ( ) . keySet ( ) ) with content:
											ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 2 methods:[List, <, JavaFileContent, >, exceptioncontent, =, theStatement, ., getCatchedExceptions, (, ), ., get, (, exception, ), ;]
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[parseDeclarationsAndCalls, (, exceptioncontent, ), ;]
											METHODCALL - Statement / referencing 4 variables / calling 2 methods:[resultMap, ., put, (, parseDeclarationsAndCallsInStatement, (, theStatement, ,, exception, ), ,, exceptioncontent, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[theStatement, ., setCatchedExceptions, (, resultMap, ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (BLOCK ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseDeclarationsAndCalls, (, theStatement, ., getContent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (RETURN , ASSERT , THROW ) and content:
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseDeclarationsAndCallsInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (BREAK , CONTINUE ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setDeclaredVariables, (, null, ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setReferencedVariables, (, null, ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setCalledMethods, (, null, ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (default ) and content:
									THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatement ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatement, theStatement, =, (, JavaStatement, ), content, ;]
								SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
									CASE - ControlStatement / for case: (ANNOTATION , IMPORT , PACKAGE ) and content:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setDeclaredVariables, (, null, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setReferencedVariables, (, null, ), ;]
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setCalledMethods, (, null, ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (UNSPECIFIED ) and content:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseDeclarationsAndCallsInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (default ) and content:
										THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: parseReferences, Returntype: void , Parameters: List < JavaFileContent >  contentsSet < String >  declaredVariables and Body:
		IF - ControlStatement / referencing 1 variables / Checking condition: (declaredVariables = = null ) with if-block:
			ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[declaredVariables, =, collectDeclaredVariables, (, contents, ), ;]
		IF - ControlStatement / referencing 4 variables / calling 2 methods / Checking condition: (contents = = null | | contents . isEmpty ( ) | | declaredVariables = = null | | declaredVariables . isEmpty ( ) ) with if-block:
			RETURN - ControlStatement / :[return, ;]
		TRY - ControlStatement / declaring 1 variables / with try-block:
			FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contents ) with content:
				IF - ControlStatement / referencing 2 variables / Checking condition: (content instanceof JavaClass | | content instanceof JavaMethod ) with if-block:
					METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, content, ., getContent, (, ), ,, declaredVariables, ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatementWithAnonymousClass ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatementWithAnonymousClass, theStatement, =, (, JavaStatementWithAnonymousClass, ), content, ;]
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, theStatement, ., getContent, (, ), ,, declaredVariables, ), ;]
						METHODCALL - Statement / referencing 3 variables / calling 2 methods:[parseReferencesInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ,, declaredVariables, ), ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaControlStatement ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaControlStatement, theStatement, =, (, JavaControlStatement, ), content, ;]
							SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
								CASE - ControlStatement / for case: (SWITCH , WHILE , DOWHILE , SYNCHRONIZED , CASE ) and content:
									METHODCALL - Statement / referencing 3 variables / calling 2 methods:[parseReferencesInStatement, (, theStatement, ,, theStatement, ., getCondition, (, ), ,, declaredVariables, ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, theStatement, ., getContent, (, ), ,, declaredVariables, ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (FOR ) and content:
									METHODCALL - Statement / referencing 3 variables / calling 2 methods:[parseReferencesInStatement, (, theStatement, ,, theStatement, ., getCondition, (, ), ,, declaredVariables, ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, theStatement, ., getContent, (, ), ,, declaredVariables, ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getInitialization ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 3 variables / calling 2 methods:[parseReferencesInStatement, (, theStatement, ,, theStatement, ., getInitialization, (, ), ,, declaredVariables, ), ;]
										METHODCALL - Statement / referencing 3 variables / calling 2 methods:[parseReferencesInStatement, (, theStatement, ,, theStatement, ., getIncrement, (, ), ,, declaredVariables, ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (IF ) and content:
									METHODCALL - Statement / referencing 3 variables / calling 2 methods:[parseReferencesInStatement, (, theStatement, ,, theStatement, ., getCondition, (, ), ,, declaredVariables, ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, theStatement, ., getContent, (, ), ,, declaredVariables, ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, theStatement, ., getOthercontent, (, ), ,, declaredVariables, ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (TRY ) and content:
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, theStatement, ., getContent, (, ), ,, declaredVariables, ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, theStatement, ., getOthercontent, (, ), ,, declaredVariables, ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getResources ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, theStatement, ., getResources, (, ), ,, declaredVariables, ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getCatchedExceptions ( ) ! = null ) with if-block:
										FOR - ControlStatement / declaring 1 variables / calling 2 methods / Enhanced version scanning: (List < WordInFile > theStatement . getCatchedExceptions ( ) . keySet ( ) ) with content:
											METHODCALL - Statement / referencing 3 variables / calling 3 methods:[parseReferences, (, theStatement, ., getCatchedExceptions, (, ), ., get, (, exception, ), ,, declaredVariables, ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (BLOCK ) and content:
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseReferences, (, theStatement, ., getContent, (, ), ,, declaredVariables, ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (RETURN , ASSERT , THROW ) and content:
									METHODCALL - Statement / referencing 3 variables / calling 2 methods:[parseReferencesInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ,, declaredVariables, ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (BREAK , CONTINUE ) and content:
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (default ) and content:
									THROW - ControlStatement / referencing 1 variables / calling 2 methods / :[throw, new, ParsingException, (, ", +, theStatement, ., getType, (, ), +, ", ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatement ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatement, theStatement, =, (, JavaStatement, ), content, ;]
								SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
									CASE - ControlStatement / for case: (ANNOTATION , IMPORT , PACKAGE ) and content:
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (UNSPECIFIED ) and content:
										METHODCALL - Statement / referencing 3 variables / calling 2 methods:[parseReferencesInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ,, declaredVariables, ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (default ) and content:
										THROW - ControlStatement / referencing 1 variables / calling 2 methods / :[throw, new, ParsingException, (, ", +, theStatement, ., getType, (, ), +, ", ), ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: parseAssignments, Returntype: void , Parameters: List < JavaFileContent >  contents and Body:
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (contents = = null | | contents . isEmpty ( ) ) with if-block:
			RETURN - ControlStatement / :[return, ;]
		TRY - ControlStatement / declaring 1 variables / with try-block:
			FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contents ) with content:
				IF - ControlStatement / referencing 2 variables / Checking condition: (content instanceof JavaClass | | content instanceof JavaMethod ) with if-block:
					METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseAssignments, (, content, ., getContent, (, ), ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatementWithAnonymousClass ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatementWithAnonymousClass, theStatement, =, (, JavaStatementWithAnonymousClass, ), content, ;]
						METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseAssignments, (, theStatement, ., getContent, (, ), ), ;]
						ASSIGNMENT - Statement / referencing 3 variables / calling 2 methods:[content, =, parseAssignmentsInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ), ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaControlStatement ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaControlStatement, theStatement, =, (, JavaControlStatement, ), content, ;]
							SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
								CASE - ControlStatement / for case: (SWITCH , WHILE , DOWHILE , SYNCHRONIZED , CASE , FOR , BLOCK ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseAssignments, (, theStatement, ., getContent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (IF ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseAssignments, (, theStatement, ., getContent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseAssignments, (, theStatement, ., getOthercontent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (TRY ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseAssignments, (, theStatement, ., getContent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseAssignments, (, theStatement, ., getOthercontent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getResources ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseAssignments, (, theStatement, ., getResources, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getCatchedExceptions ( ) ! = null ) with if-block:
										FOR - ControlStatement / declaring 1 variables / calling 2 methods / Enhanced version scanning: (List < WordInFile > theStatement . getCatchedExceptions ( ) . keySet ( ) ) with content:
											METHODCALL - Statement / referencing 2 variables / calling 3 methods:[parseAssignments, (, theStatement, ., getCatchedExceptions, (, ), ., get, (, exception, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (RETURN , ASSERT , THROW , BREAK , CONTINUE ) and content:
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (default ) and content:
									THROW - ControlStatement / referencing 1 variables / calling 2 methods / :[throw, new, ParsingException, (, ", +, theStatement, ., getType, (, ), +, ", ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatement ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatement, theStatement, =, (, JavaStatement, ), content, ;]
								SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
									CASE - ControlStatement / for case: (ANNOTATION , IMPORT , PACKAGE ) and content:
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (UNSPECIFIED ) and content:
										ASSIGNMENT - Statement / referencing 3 variables / calling 2 methods:[content, =, parseAssignmentsInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ), ;]
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (default ) and content:
										THROW - ControlStatement / referencing 1 variables / calling 2 methods / :[throw, new, ParsingException, (, ", +, theStatement, ., getType, (, ), +, ", ), ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: parseRemainingStatementTypes, Returntype: void , Parameters: List < JavaFileContent >  contents and Body:
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (contents = = null | | contents . isEmpty ( ) ) with if-block:
			RETURN - ControlStatement / :[return, ;]
		TRY - ControlStatement / declaring 1 variables / with try-block:
			FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contents ) with content:
				IF - ControlStatement / referencing 2 variables / Checking condition: (content instanceof JavaClass | | content instanceof JavaMethod ) with if-block:
					METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseRemainingStatementTypes, (, content, ., getContent, (, ), ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatementWithAnonymousClass ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatementWithAnonymousClass, theStatement, =, (, JavaStatementWithAnonymousClass, ), content, ;]
						METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseRemainingStatementTypes, (, theStatement, ., getContent, (, ), ), ;]
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (theStatement . getType ( ) . equals ( StatementType . UNSPECIFIED ) ) with if-block:
							IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getCalledMethods ( ) ! = null & & ! theStatement . getCalledMethods ( ) . isEmpty ( ) ) with if-block:
								METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setStatementType, (, StatementType, ., METHODCALL, ), ;]
							ELSE - block:
								IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getDeclaredVariables ( ) ! = null & & ! theStatement . getDeclaredVariables ( ) . isEmpty ( ) ) with if-block:
									METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setStatementType, (, StatementType, ., VARDECLARATION, ), ;]
								ELSE - block:
									ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[List, <, WordInFile, >, text, =, theStatement, ., getStatementText, (, ), ;]
									FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < text . size ( ) ) increment: (i + + ) and content:
										IF - ControlStatement / referencing 6 variables / calling 5 methods / Checking condition: (text . get ( i ) . equals ( KeyWord . ADD ) & & i < text . size ( ) - 1 & & text . get ( i + 1 ) . equals ( KeyWord . ADD ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setStatementType, (, StatementType, ., INCREMENT, ), ;]
											BREAK - ControlStatement / :[break, ;]
										ELSE - block:
											IF - ControlStatement / referencing 6 variables / calling 5 methods / Checking condition: (text . get ( i ) . equals ( KeyWord . SUB ) & & i < text . size ( ) - 1 & & text . get ( i + 1 ) . equals ( KeyWord . SUB ) ) with if-block:
												METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setStatementType, (, StatementType, ., DECREMENT, ), ;]
												BREAK - ControlStatement / :[break, ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaControlStatement ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaControlStatement, theStatement, =, (, JavaControlStatement, ), content, ;]
							SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
								CASE - ControlStatement / for case: (SWITCH , WHILE , DOWHILE , SYNCHRONIZED , CASE , FOR , BLOCK ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseRemainingStatementTypes, (, theStatement, ., getContent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (IF ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseRemainingStatementTypes, (, theStatement, ., getContent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseRemainingStatementTypes, (, theStatement, ., getOthercontent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (TRY ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseRemainingStatementTypes, (, theStatement, ., getContent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseRemainingStatementTypes, (, theStatement, ., getOthercontent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getResources ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseRemainingStatementTypes, (, theStatement, ., getResources, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getCatchedExceptions ( ) ! = null ) with if-block:
										FOR - ControlStatement / declaring 1 variables / calling 2 methods / Enhanced version scanning: (List < WordInFile > theStatement . getCatchedExceptions ( ) . keySet ( ) ) with content:
											METHODCALL - Statement / referencing 2 variables / calling 3 methods:[parseRemainingStatementTypes, (, theStatement, ., getCatchedExceptions, (, ), ., get, (, exception, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (default ) and content:
									BREAK - ControlStatement / :[break, ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatement ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatement, theStatement, =, (, JavaStatement, ), content, ;]
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (theStatement . getType ( ) . equals ( StatementType . UNSPECIFIED ) ) with if-block:
									IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getCalledMethods ( ) ! = null & & ! theStatement . getCalledMethods ( ) . isEmpty ( ) ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setStatementType, (, StatementType, ., METHODCALL, ), ;]
									ELSE - block:
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theStatement . getDeclaredVariables ( ) ! = null & & ! theStatement . getDeclaredVariables ( ) . isEmpty ( ) ) with if-block:
											METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setStatementType, (, StatementType, ., VARDECLARATION, ), ;]
										ELSE - block:
											ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[List, <, WordInFile, >, text, =, theStatement, ., getStatementText, (, ), ;]
											FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < text . size ( ) ) increment: (i + + ) and content:
												IF - ControlStatement / referencing 6 variables / calling 5 methods / Checking condition: (text . get ( i ) . equals ( KeyWord . ADD ) & & i < text . size ( ) - 1 & & text . get ( i + 1 ) . equals ( KeyWord . ADD ) ) with if-block:
													METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setStatementType, (, StatementType, ., INCREMENT, ), ;]
													BREAK - ControlStatement / :[break, ;]
												ELSE - block:
													IF - ControlStatement / referencing 6 variables / calling 5 methods / Checking condition: (text . get ( i ) . equals ( KeyWord . SUB ) & & i < text . size ( ) - 1 & & text . get ( i + 1 ) . equals ( KeyWord . SUB ) ) with if-block:
														METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setStatementType, (, StatementType, ., DECREMENT, ), ;]
														BREAK - ControlStatement / :[break, ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: parseComparators, Returntype: void , Parameters: List < JavaFileContent >  contents and Body:
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (contents = = null | | contents . isEmpty ( ) ) with if-block:
			RETURN - ControlStatement / :[return, ;]
		TRY - ControlStatement / declaring 1 variables / with try-block:
			FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contents ) with content:
				IF - ControlStatement / referencing 2 variables / Checking condition: (content instanceof JavaClass | | content instanceof JavaMethod ) with if-block:
					METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, content, ., getContent, (, ), ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatementWithAnonymousClass ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatementWithAnonymousClass, theStatement, =, (, JavaStatementWithAnonymousClass, ), content, ;]
						METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, theStatement, ., getContent, (, ), ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseComparatorsInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ), ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaControlStatement ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaControlStatement, theStatement, =, (, JavaControlStatement, ), content, ;]
							SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
								CASE - ControlStatement / for case: (SWITCH , WHILE , DOWHILE , SYNCHRONIZED , CASE ) and content:
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseComparatorsInStatement, (, theStatement, ,, theStatement, ., getCondition, (, ), ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, theStatement, ., getContent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (FOR ) and content:
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseComparatorsInStatement, (, theStatement, ,, theStatement, ., getCondition, (, ), ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, theStatement, ., getContent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (IF ) and content:
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseComparatorsInStatement, (, theStatement, ,, theStatement, ., getCondition, (, ), ), ;]
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, theStatement, ., getContent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, theStatement, ., getOthercontent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (TRY ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, theStatement, ., getContent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, theStatement, ., getOthercontent, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getResources ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, theStatement, ., getResources, (, ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getCatchedExceptions ( ) ! = null ) with if-block:
										FOR - ControlStatement / declaring 1 variables / calling 2 methods / Enhanced version scanning: (List < WordInFile > theStatement . getCatchedExceptions ( ) . keySet ( ) ) with content:
											METHODCALL - Statement / referencing 2 variables / calling 3 methods:[parseComparators, (, theStatement, ., getCatchedExceptions, (, ), ., get, (, exception, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (BLOCK ) and content:
									METHODCALL - Statement / referencing 1 variables / calling 2 methods:[parseComparators, (, theStatement, ., getContent, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (RETURN , ASSERT , THROW ) and content:
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseComparatorsInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (BREAK , CONTINUE ) and content:
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (default ) and content:
									THROW - ControlStatement / referencing 1 variables / calling 2 methods / :[throw, new, ParsingException, (, ", +, theStatement, ., getType, (, ), +, ", ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatement ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatement, theStatement, =, (, JavaStatement, ), content, ;]
								SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
									CASE - ControlStatement / for case: (ANNOTATION , IMPORT , PACKAGE ) and content:
										BREAK - ControlStatement / :[break, ;]
									CASE - ControlStatement / for case: (default ) and content:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[parseComparatorsInStatement, (, theStatement, ,, theStatement, ., getStatementText, (, ), ), ;]
										BREAK - ControlStatement / :[break, ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: parseComparatorsInStatement, Returntype: void , Parameters: JavaStatement  theStatementList < WordInFile >  textToScan and Body:
		FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < textToScan . size ( ) ) increment: (i + + ) and content:
			IF - ControlStatement / referencing 18 variables / calling 17 methods / Checking condition: (i < textToScan . size ( ) - 1 & & ( textToScan . get ( i ) . equals ( KeyWord . ASSIGN ) & & textToScan . get ( i + 1 ) . equals ( KeyWord . ASSIGN ) ) | | ( textToScan . get ( i ) . equals ( KeyWord . COMP ) & & textToScan . get ( i + 1 ) . equals ( KeyWord . ASSIGN ) ) | | ( textToScan . get ( i ) . equals ( KeyWord . GREATER ) & & textToScan . get ( i + 1 ) . equals ( KeyWord . ASSIGN ) ) | | ( textToScan . get ( i ) . equals ( KeyWord . LESS ) & & textToScan . get ( i + 1 ) . equals ( KeyWord . ASSIGN ) ) ) with if-block:
				METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., COMPARATOR, ), ), ;]
				METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, +, 1, ,, new, WordInFile, (, textToScan, ., get, (, i, +, 1, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., COMPARATOR, ), ), ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ELSE - block:
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (textToScan . get ( i ) . equals ( KeyWord . GREATER ) ) with if-block:
					METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., COMPARATOR, ), ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (textToScan . get ( i ) . equals ( KeyWord . LESS ) ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[int, endofGeneric, =, ModelBuildHelper, ., parseGeneric, (, textToScan, ,, i, +, 1, ), ;]
						IF - ControlStatement / referencing 1 variables / Checking condition: (endofGeneric = = 0 ) with if-block:
							METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., COMPARATOR, ), ), ;]
						ELSE - block:
							ASSIGNMENT - Statement / referencing 2 variables:[i, =, endofGeneric, ;]
	METHOD with name: parseAssignmentsInStatement, Returntype: JavaStatement , Parameters: JavaStatement  theStatementList < WordInFile >  textToScan and Body:
		ASSIGNMENT - Statement / declaring 1 variables:[boolean, assignmentFound, =, false, ;]
		FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < textToScan . size ( ) ) increment: (i + + ) and content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (textToScan . get ( i ) . equals ( KeyWord . ASSIGN ) ) with if-block:
				IF - ControlStatement / referencing 3 variables / calling 2 methods / Checking condition: (i > 1 & & ModelBuildHelper . operators . contains ( textToScan . get ( i - 1 ) ) ) with if-block:
					METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, -, 1, ,, new, WordInFile, (, textToScan, ., get, (, i, -, 1, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., ASSIGNMENT, ), ), ;]
					METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., ASSIGNMENT, ), ), ;]
					ASSIGNMENT - Statement / referencing 1 variables:[assignmentFound, =, true, ;]
				ELSE - block:
					IF - ControlStatement / referencing 9 variables / calling 8 methods / Checking condition: (i > 2 & & ( ( textToScan . get ( i - 1 ) . equals ( KeyWord . GREATER ) & & textToScan . get ( i - 2 ) . equals ( KeyWord . GREATER ) ) | | ( textToScan . get ( i - 1 ) . equals ( KeyWord . LESS ) & & textToScan . get ( i - 2 ) . equals ( KeyWord . LESS ) ) ) ) with if-block:
						METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, -, 2, ,, new, WordInFile, (, textToScan, ., get, (, i, -, 2, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., ASSIGNMENT, ), ), ;]
						METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, -, 1, ,, new, WordInFile, (, textToScan, ., get, (, i, -, 1, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., ASSIGNMENT, ), ), ;]
						METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., ASSIGNMENT, ), ), ;]
						ASSIGNMENT - Statement / referencing 1 variables:[assignmentFound, =, true, ;]
					ELSE - block:
						IF - ControlStatement / referencing 7 variables / calling 6 methods / Checking condition: (i > 1 & & ( textToScan . get ( i - 1 ) . equals ( KeyWord . COMP ) | | textToScan . get ( i - 1 ) . equals ( KeyWord . LESS ) | | textToScan . get ( i - 1 ) . equals ( KeyWord . GREATER ) ) ) with if-block:
							CONTINUE - ControlStatement / :[continue, ;]
						ELSE - block:
							IF - ControlStatement / referencing 4 variables / calling 3 methods / Checking condition: (i < textToScan . size ( ) - 1 & & textToScan . get ( i - 1 ) . equals ( KeyWord . ASSIGN ) ) with if-block:
								INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
								CONTINUE - ControlStatement / :[continue, ;]
							ELSE - block:
								METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., ASSIGNMENT, ), ), ;]
								ASSIGNMENT - Statement / referencing 1 variables:[assignmentFound, =, true, ;]
		IF - ControlStatement / referencing 1 variables / Checking condition: (assignmentFound ) with if-block:
			METHODCALL - Statement / referencing 1 variables / calling 1 methods:[theStatement, ., setStatementType, (, StatementType, ., ASSIGNMENT, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, theStatement, ;]
	METHOD with name: parseWordListToStatements, Returntype: List < JavaFileContent > , Parameters: List < WordInFile >  wordlist and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, result, =, new, ArrayList, , JavaFileContent, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, current, =, new, ArrayList, , WordInFile, , (, ), ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (WordInFile word : wordlist ) with content:
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[current, ., add, (, word, ), ;]
			IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (word . equals ( KeyWord . SEMICOLON ) ) with if-block:
				ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, statement, =, new, ArrayList, , WordInFile, , (, ), ;]
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[statement, ., addAll, (, current, ), ;]
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[current, ., clear, (, ), ;]
				ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaStatement, newStatement, =, new, JavaStatement, (, StatementType, ., UNSPECIFIED, ), ;]
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[newStatement, ., setStatementText, (, statement, ), ;]
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, newStatement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
	METHOD with name: parseReferencesInStatement, Returntype: void , Parameters: JavaStatement  theStatementList < WordInFile >  textToScanSet < String >  declaredVariables and Body:
		FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < textToScan . size ( ) ) increment: (i + + ) and content:
			IF - ControlStatement / referencing 5 variables / calling 6 methods / Checking condition: (textToScan . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) & & declaredVariables . contains ( textToScan . get ( i ) . getWord ( ) ) ) with if-block:
				METHODCALL - Statement / referencing 4 variables / calling 4 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getWord, (, ), ,, KeyWord, ., VARIDENT, ), ), ;]
				METHODCALL - Statement / referencing 3 variables / calling 5 methods:[theStatement, ., getReferencedVariables, (, ), ., add, (, new, JavaVariable, (, textToScan, ., get, (, i, ), ., getWord, (, ), ,, null, ), ), ;]
	METHOD with name: parseDeclarationsAndCallsInStatement, Returntype: List < WordInFile > , Parameters: JavaStatement  statementList < WordInFile >  textToScan and Body:
		FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < textToScan . size ( ) ) increment: (i + + ) and content:
			ASSIGNMENT - Statement / declaring 1 variables / referencing 3 variables / calling 3 methods:[WordInFile, declaredVar, =, ModelBuildHelper, ., isVariableDeclaration, (, textToScan, ., subList, (, i, ,, textToScan, ., size, (, ), ), ,, false, ), ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (declaredVar ! = null ) with if-block:
				ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, datatype, =, new, ArrayList, , WordInFile, , (, ), ;]
				WHILE - ControlStatement / referencing 3 variables / calling 2 methods / Checking condition: (! textToScan . get ( i ) . equals ( declaredVar ) ) with content:
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (textToScan . get ( i ) . getWord ( ) ! = null ) with if-block:
						METHODCALL - Statement / referencing 4 variables / calling 4 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getWord, (, ), ,, KeyWord, ., VARTYPE, ), ), ;]
					ELSE - block:
						IF - ControlStatement / referencing 2 variables / calling 4 methods / Checking condition: (! textToScan . get ( i ) . getKey ( ) . getType ( ) . equals ( WordType . MODIFIER ) ) with if-block:
							METHODCALL - Statement / referencing 4 variables / calling 5 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getKey, (, ), ., toString, (, ), ,, KeyWord, ., VARTYPE, ), ), ;]
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[datatype, ., add, (, textToScan, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				METHODCALL - Statement / referencing 4 variables / calling 4 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getWord, (, ), ,, KeyWord, ., VARIDENT, ), ), ;]
				METHODCALL - Statement / referencing 3 variables / calling 4 methods:[statement, ., getDeclaredVariables, (, ), ., add, (, new, JavaVariable, (, declaredVar, ., getWord, (, ), ,, datatype, ), ), ;]
			ELSE - block:
				IF - ControlStatement / referencing 10 variables / calling 10 methods / Checking condition: (( textToScan . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) | | textToScan . get ( i ) . equals ( KeyWord . THIS ) | | textToScan . get ( i ) . equals ( KeyWord . SUPER ) ) & & ( textToScan . size ( ) > i + 1 & & textToScan . get ( i + 1 ) . equals ( KeyWord . OPENPARANTHESE ) ) ) with if-block:
					METHODCALL - Statement / referencing 4 variables / calling 4 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getWord, (, ), ,, KeyWord, ., METHODREF, ), ), ;]
					METHODCALL - Statement / referencing 3 variables / calling 3 methods:[statement, ., getCalledMethods, (, ), ., add, (, textToScan, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				ELSE - block:
					IF - ControlStatement / referencing 6 variables / calling 6 methods / Checking condition: (textToScan . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) & & textToScan . size ( ) > i + 2 & & textToScan . get ( i + 1 ) . equals ( KeyWord . LESS ) ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[int, endOfGeneric, =, ModelBuildHelper, ., parseGeneric, (, textToScan, ,, i, +, 2, ), ;]
						IF - ControlStatement / referencing 5 variables / calling 4 methods / Checking condition: (endOfGeneric ! = 0 & & textToScan . size ( ) > endOfGeneric + 1 & & textToScan . get ( endOfGeneric + 1 ) . getKey ( ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
							METHODCALL - Statement / referencing 3 variables / calling 3 methods:[statement, ., getCalledMethods, (, ), ., add, (, textToScan, ., get, (, i, ), ), ;]
							WHILE - ControlStatement / referencing 2 variables / Checking condition: (i < = endOfGeneric ) with content:
								METHODCALL - Statement / referencing 4 variables / calling 4 methods:[textToScan, ., set, (, i, ,, new, WordInFile, (, textToScan, ., get, (, i, ), ., getWord, (, ), ,, KeyWord, ., METHODREF, ), ), ;]
								INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, textToScan, ;]
	METHOD with name: collectDeclaredVariables, Returntype: Set < String > , Parameters: List < JavaFileContent >  contents and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[Set, <, String, >, result, =, new, HashSet, , String, , (, ), ;]
		IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (contents = = null | | contents . isEmpty ( ) ) with if-block:
			RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contents ) with content:
			IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaClass ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredVariables, (, content, ., getContent, (, ), ), ), ;]
			ELSE - block:
				IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaMethod ) with if-block:
					METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredVariables, (, content, ., getContent, (, ), ), ), ;]
					IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (( ( JavaMethod ) content ) . getParameters ( ) ! = null ) with if-block:
						FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable var : ( ( JavaMethod ) content ) . getParameters ( ) ) with content:
							METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, var, ., getName, (, ), ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatementWithAnonymousClass ) with if-block:
						IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (( ( JavaStatement ) content ) . getDeclaredVariables ( ) ! = null ) with if-block:
							FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable var : ( ( JavaStatement ) content ) . getDeclaredVariables ( ) ) with content:
								METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, var, ., getName, (, ), ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredVariables, (, content, ., getContent, (, ), ), ), ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaControlStatement ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaControlStatement, theStatement, =, (, JavaControlStatement, ), content, ;]
							SWITCH - ControlStatement / referencing 1 variables / calling 1 methods / over value of : (theStatement . getType ( ) ) and cases:
								CASE - ControlStatement / for case: (SWITCH , WHILE , DOWHILE , SYNCHRONIZED , FOR , BLOCK , CASE ) and content:
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getDeclaredVariables ( ) ! = null ) with if-block:
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable theStatement . getDeclaredVariables ( ) ) with content:
											METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, var, ., getName, (, ), ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredVariables, (, content, ., getContent, (, ), ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (IF ) and content:
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getDeclaredVariables ( ) ! = null ) with if-block:
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable theStatement . getDeclaredVariables ( ) ) with content:
											METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, var, ., getName, (, ), ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredVariables, (, content, ., getContent, (, ), ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredVariables, (, theStatement, ., getOthercontent, (, ), ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (TRY ) and content:
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getDeclaredVariables ( ) ! = null ) with if-block:
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable theStatement . getDeclaredVariables ( ) ) with content:
											METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, var, ., getName, (, ), ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredVariables, (, content, ., getContent, (, ), ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getOthercontent ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredVariables, (, theStatement, ., getOthercontent, (, ), ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getResources ( ) ! = null ) with if-block:
										METHODCALL - Statement / referencing 2 variables / calling 3 methods:[result, ., addAll, (, collectDeclaredVariables, (, theStatement, ., getResources, (, ), ), ), ;]
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getCatchedExceptions ( ) ! = null ) with if-block:
										FOR - ControlStatement / declaring 1 variables / calling 2 methods / Enhanced version scanning: (List < WordInFile > theStatement . getCatchedExceptions ( ) . keySet ( ) ) with content:
											METHODCALL - Statement / referencing 3 variables / calling 4 methods:[result, ., addAll, (, collectDeclaredVariables, (, theStatement, ., getCatchedExceptions, (, ), ., get, (, exception, ), ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (RETURN , ASSERT , THROW , BREAK , CONTINUE ) and content:
									IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getDeclaredVariables ( ) ! = null ) with if-block:
										FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable theStatement . getDeclaredVariables ( ) ) with content:
											METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, var, ., getName, (, ), ), ;]
									BREAK - ControlStatement / :[break, ;]
								CASE - ControlStatement / for case: (default ) and content:
									THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatement ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatement, theStatement, =, (, JavaStatement, ), content, ;]
								IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theStatement . getDeclaredVariables ( ) ! = null ) with if-block:
									FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable var : theStatement . getDeclaredVariables ( ) ) with content:
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, var, ., getName, (, ), ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:038
Arguments: 36.0
If-Statements: 104.0
Literals: 20.0
Classes: 1.0
Methods: 13.0
Branches: 336.0
References: 683.0
Function-Calls: 579.0
Cases: 49.0
Secure Statements: 712.0
Variables: 87.0
Imports: 21.0
Loop-Statements: 30.0
Statements: 712.0
Parameters: 19.0
Return-Statements: 13.0
Results: 56.0
Predicates: 219.0
Constants: 0.0
Foreign-Function-Calls: 481.0
Switch-Statements: 10.0
---------- File: ModelStructureExpander.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:606
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:617
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:622
*** Step 4 - Expand model with details
*** Finished at 13:07:26:629
PACKAGE - Statement:[package, plugin, ., analyser, ;]
IMPORT - Statement:[import, java, ., util, ., ArrayList, ;]
IMPORT - Statement:[import, java, ., util, ., HashMap, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., KeyWord, ;]
IMPORT - Statement:[import, plugin, ., model, ., StatementType, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordList, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaClass, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaControlStatement, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaMethod, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaStatementWithAnonymousClass, ;]
IMPORT - Statement:[import, plugin, ., util, ., Logger, ;]
IMPORT - Statement:[import, plugin, ., util, ., ParsingException, ;]
CLASS with name: ModelStructureExpander and Body:
	METHOD with name: parseStatementStructure, Returntype: List < JavaFileContent > , Parameters: List < JavaFileContent >  contents and Body:
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contents ) with content:
			IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaClass ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 3 methods:[content, ., setContent, (, parseStructuralStatements, (, content, ., getContent, (, ), ), ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 2 methods:[Logger, ., getLogger, (, null, ), ., printModel, (, ", ,, contents, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, contents, ;]
	METHOD with name: parseStructuralStatements, Returntype: List < JavaFileContent > , Parameters: List < JavaFileContent >  contentlist and Body:
		TRY - ControlStatement / declaring 1 variables / with try-block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, result, =, new, ArrayList, , JavaFileContent, , (, ), ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (! ( contentlist = = null ) ) with if-block:
				FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contentlist ) with content:
					IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (content instanceof JavaMethod & & content . getContent ( ) ! = null ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, newMethodContent, =, new, ArrayList, , JavaFileContent, , (, ), ;]
						FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (JavaFileContent methodcontent : content . getContent ( ) ) with content:
							IF - ControlStatement / referencing 2 variables / Checking condition: (methodcontent instanceof JavaClass | | methodcontent instanceof JavaStatementWithAnonymousClass ) with if-block:
								METHODCALL - Statement / referencing 2 variables / calling 3 methods:[methodcontent, ., setContent, (, parseStructuralStatements, (, methodcontent, ., getContent, (, ), ), ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[newMethodContent, ., add, (, methodcontent, ), ;]
							ELSE - block:
								IF - ControlStatement / referencing 1 variables / Checking condition: (methodcontent instanceof WordList ) with if-block:
									METHODCALL - Statement / referencing 2 variables / calling 3 methods:[newMethodContent, ., addAll, (, parseControlStatements, (, (, (, WordList, ), methodcontent, ), ., getWordlist, (, ), ), ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[content, ., setContent, (, newMethodContent, ), ;]
					ELSE - block:
						IF - ControlStatement / referencing 2 variables / Checking condition: (content instanceof JavaClass | | content instanceof JavaStatementWithAnonymousClass ) with if-block:
							METHODCALL - Statement / referencing 2 variables / calling 3 methods:[content, ., setContent, (, parseStructuralStatements, (, content, ., getContent, (, ), ), ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, content, ), ;]
			RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
		CATCH - (Exception e ) And catch-block:
			THROW - ControlStatement / calling 1 methods / :[throw, new, ParsingException, (, ", ), ;]
	METHOD with name: parseControlStatements, Returntype: List < JavaFileContent > , Parameters: List < WordInFile >  content and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, result, =, new, ArrayList, , JavaFileContent, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, otherContent, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, potentialLabels, =, new, ArrayList, , WordInFile, , (, ), ;]
		FOR - ControlStatement / declaring 1 variables / referencing 3 variables / calling 1 methods / With initialization: (int i = 0 ) termination: (i < content . size ( ) ) increment: (i + + ) and content:
			ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 1 methods:[WordInFile, word, =, content, ., get, (, i, ), ;]
			IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (ModelBuildHelper . keywords . contains ( word ) ) with if-block:
				IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! otherContent . isEmpty ( ) ) with if-block:
					ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, wordlist, =, new, ArrayList, , WordInFile, , (, ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[wordlist, ., addAll, (, otherContent, ), ;]
					METHODCALL - Statement / referencing 1 variables / calling 1 methods:[otherContent, ., clear, (, ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordList, (, wordlist, ), ), ;]
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[potentialLabels, ., clear, (, ), ;]
				ASSIGNMENT - Statement / referencing 5 variables / calling 2 methods:[i, =, parseSingleControlStatement, (, word, ., getKey, (, ), ,, i, ,, content, ,, result, ), ;]
			ELSE - block:
				IF - ControlStatement / referencing 6 variables / calling 5 methods / Checking condition: (word . equals ( KeyWord . OPENBRACE ) & & ( i = = 0 | | ( ! content . get ( i - 1 ) . equals ( KeyWord . CLOSEBRACKET ) & & ! content . get ( i - 1 ) . equals ( KeyWord . ASSIGN ) ) ) ) with if-block:
					IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! otherContent . isEmpty ( ) ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, wordlist, =, new, ArrayList, , WordInFile, , (, ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[wordlist, ., addAll, (, otherContent, ), ;]
						METHODCALL - Statement / referencing 1 variables / calling 1 methods:[otherContent, ., clear, (, ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordList, (, wordlist, ), ), ;]
					METHODCALL - Statement / referencing 1 variables / calling 1 methods:[potentialLabels, ., clear, (, ), ;]
					ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[i, =, parseAnonymousBlock, (, content, ,, result, ,, i, ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 3 variables / calling 4 methods / Checking condition: (word . getKey ( ) . equals ( KeyWord . WORD ) & & content . get ( i + 1 ) . equals ( KeyWord . DOUBLEDOT ) ) with if-block:
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[potentialLabels, ., add, (, word, ), ;]
						METHODCALL - Statement / referencing 3 variables / calling 2 methods:[potentialLabels, ., add, (, content, ., get, (, i, +, 1, ), ), ;]
						INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! potentialLabels . isEmpty ( ) ) with if-block:
							METHODCALL - Statement / referencing 2 variables / calling 1 methods:[otherContent, ., addAll, (, potentialLabels, ), ;]
							METHODCALL - Statement / referencing 1 variables / calling 1 methods:[potentialLabels, ., clear, (, ), ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[otherContent, ., add, (, word, ), ;]
		IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! potentialLabels . isEmpty ( ) ) with if-block:
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[otherContent, ., addAll, (, potentialLabels, ), ;]
		IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! otherContent . isEmpty ( ) ) with if-block:
			METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., add, (, new, WordList, (, otherContent, ), ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
	METHOD with name: parseSingleControlStatement, Returntype: int , Parameters: KeyWord  keyint  iList < WordInFile >  contentList < JavaFileContent >  result and Body:
		VARDECLARATION - Statement / declaring 1 variables:[int, endposition, ;]
		SWITCH - ControlStatement / referencing 1 variables / over value of : (key ) and cases:
			CASE - ControlStatement / for case: (SWITCH ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseSwitch, (, content, ,, result, ,, i, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (DO ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseDoWhile, (, content, ,, result, ,, i, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (WHILE ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseWhile, (, content, ,, result, ,, i, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (FOR ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseFor, (, content, ,, result, ,, i, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (IF ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseIf, (, content, ,, result, ,, i, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (TRY ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseTry, (, content, ,, result, ,, i, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (SYNCHRONIZED ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseSynchronized, (, content, ,, result, ,, i, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (RETURN ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseSingleLineStatement, (, content, ,, result, ,, i, ,, StatementType, ., RETURN, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (BREAK ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseSingleLineStatement, (, content, ,, result, ,, i, ,, StatementType, ., BREAK, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (CONTINUE ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseSingleLineStatement, (, content, ,, result, ,, i, ,, StatementType, ., CONTINUE, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (ASSERT ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseSingleLineStatement, (, content, ,, result, ,, i, ,, StatementType, ., ASSERT, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (THROW ) and content:
				ASSIGNMENT - Statement / referencing 4 variables / calling 1 methods:[endposition, =, parseSingleLineStatement, (, content, ,, result, ,, i, ,, StatementType, ., THROW, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (default ) and content:
				ASSIGNMENT - Statement / referencing 2 variables:[endposition, =, i, ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, endposition, ;]
	METHOD with name: parseSingleLineStatement, Returntype: int , Parameters: List < WordInFile >  contentList < JavaFileContent >  resultint  iStatementType  type and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, statementContent, =, new, ArrayList, , WordInFile, , (, ), ;]
		WHILE - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! content . get ( i ) . equals ( KeyWord . SEMICOLON ) ) with content:
			METHODCALL - Statement / referencing 3 variables / calling 2 methods:[statementContent, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		METHODCALL - Statement / referencing 3 variables / calling 2 methods:[statementContent, ., add, (, content, ., get, (, i, ), ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[JavaControlStatement, statement, =, new, JavaControlStatement, (, type, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[statement, ., setStatementText, (, statementContent, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, statement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, ;]
	METHOD with name: parseSynchronized, Returntype: int , Parameters: List < WordInFile >  contentList < JavaFileContent >  resultint  i and Body:
		ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaControlStatement, synchronizedStatement, =, new, JavaControlStatement, (, StatementType, ., SYNCHRONIZED, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, condition, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openParanthesis, =, 1, ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis > 0 ) with content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openParanthesis, -, -, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openParanthesis, +, +, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis ! = 0 ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[condition, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[synchronizedStatement, ., setCondition, (, condition, ), ;]
		INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 1, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, blockcontent, =, new, ArrayList, , WordInFile, , (, ), ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[blockcontent, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[synchronizedStatement, ., setContent, (, parseControlStatements, (, blockcontent, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, synchronizedStatement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, -, 1, ;]
	METHOD with name: parseSwitch, Returntype: int , Parameters: List < WordInFile >  contentList < JavaFileContent >  resultint  i and Body:
		ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaControlStatement, switchStatement, =, new, JavaControlStatement, (, StatementType, ., SWITCH, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, condition, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openParanthesis, =, 1, ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis > 0 ) with content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openParanthesis, -, -, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openParanthesis, +, +, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis ! = 0 ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[condition, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[switchStatement, ., setCondition, (, condition, ), ;]
		INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, switchContent, =, new, ArrayList, , JavaFileContent, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 1, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, casecontent, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, casecondition, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaControlStatement, currentCase, =, new, JavaControlStatement, (, StatementType, ., CASE, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 2 methods:[currentCase, ., setCondition, (, new, ArrayList, , WordInFile, , (, ), ), ;]
		IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
			DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
		ELSE - block:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
			WHILE - ControlStatement / referencing 5 variables / calling 4 methods / Checking condition: (openBraces = = 1 & & ( content . get ( i ) . equals ( KeyWord . CASE ) | | content . get ( i ) . equals ( KeyWord . DEFAULT ) ) ) with content:
				IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (! casecontent . isEmpty ( ) ) with if-block:
					ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, onecase, =, new, ArrayList, , WordInFile, , (, ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[onecase, ., addAll, (, casecontent, ), ;]
					METHODCALL - Statement / referencing 1 variables / calling 1 methods:[casecontent, ., clear, (, ), ;]
					ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[List, <, JavaFileContent, >, parsedCaseContent, =, parseControlStatements, (, onecase, ), ;]
					IF - ControlStatement / referencing 3 variables / calling 5 methods / Checking condition: (parsedCaseContent . size ( ) = = 1 & & parsedCaseContent . get ( 0 ) instanceof JavaControlStatement & & ( ( JavaControlStatement ) parsedCaseContent . get ( 0 ) ) . getType ( ) . equals ( StatementType . BLOCK ) ) with if-block:
						METHODCALL - Statement / referencing 2 variables / calling 3 methods:[currentCase, ., setContent, (, parsedCaseContent, ., get, (, 0, ), ., getContent, (, ), ), ;]
					ELSE - block:
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[currentCase, ., setContent, (, parsedCaseContent, ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 4 methods:[currentCase, ., getCondition, (, ), ., remove, (, currentCase, ., getCondition, (, ), ., size, (, ), -, 1, ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[switchContent, ., add, (, currentCase, ), ;]
					ASSIGNMENT - Statement / referencing 1 variables / calling 1 methods:[currentCase, =, new, JavaControlStatement, (, StatementType, ., CASE, ), ;]
					METHODCALL - Statement / referencing 1 variables / calling 2 methods:[currentCase, ., setCondition, (, new, ArrayList, , WordInFile, , (, ), ), ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
					ASSIGNMENT - Statement / referencing 1 variables:[openParanthesis, =, 1, ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
					WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis > 0 ) with content:
						IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
							DECREMENT - Statement / referencing 1 variables:[openParanthesis, -, -, ;]
						IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
							INCREMENT - Statement / referencing 1 variables:[openParanthesis, +, +, ;]
						IF - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis ! = 0 ) with if-block:
							METHODCALL - Statement / referencing 3 variables / calling 2 methods:[casecondition, ., add, (, content, ., get, (, i, ), ), ;]
						INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				WHILE - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! content . get ( i ) . equals ( KeyWord . DOUBLEDOT ) ) with content:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[casecondition, ., add, (, content, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (casecondition . isEmpty ( ) ) with if-block:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[casecondition, ., add, (, content, ., get, (, i, -, 1, ), ), ;]
				METHODCALL - Statement / referencing 2 variables / calling 2 methods:[currentCase, ., getCondition, (, ), ., addAll, (, casecondition, ), ;]
				METHODCALL - Statement / referencing 1 variables / calling 3 methods:[currentCase, ., getCondition, (, ), ., add, (, new, WordInFile, (, null, ,, KeyWord, ., COMMA, ), ), ;]
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[casecondition, ., clear, (, ), ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			WHILE - ControlStatement / referencing 4 variables / calling 5 methods / Checking condition: (content . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) & & content . get ( i + 1 ) . equals ( KeyWord . DOUBLEDOT ) ) with content:
				ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
			ELSE - block:
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[casecontent, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, onecase, =, new, ArrayList, , WordInFile, , (, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[onecase, ., addAll, (, casecontent, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[casecontent, ., clear, (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[List, <, JavaFileContent, >, parsedCaseContent, =, parseControlStatements, (, onecase, ), ;]
		IF - ControlStatement / referencing 3 variables / calling 5 methods / Checking condition: (parsedCaseContent . size ( ) = = 1 & & parsedCaseContent . get ( 0 ) instanceof JavaControlStatement & & ( ( JavaControlStatement ) parsedCaseContent . get ( 0 ) ) . getType ( ) . equals ( StatementType . BLOCK ) ) with if-block:
			METHODCALL - Statement / referencing 2 variables / calling 3 methods:[currentCase, ., setContent, (, parsedCaseContent, ., get, (, 0, ), ., getContent, (, ), ), ;]
			METHODCALL - Statement / referencing 1 variables / calling 1 methods:[currentCase, ., setContentInBlock, (, true, ), ;]
		ELSE - block:
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[currentCase, ., setContent, (, parsedCaseContent, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 4 methods:[currentCase, ., getCondition, (, ), ., remove, (, currentCase, ., getCondition, (, ), ., size, (, ), -, 1, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[switchContent, ., add, (, currentCase, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[switchStatement, ., setContent, (, switchContent, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, switchStatement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, -, 1, ;]
	METHOD with name: parseAnonymousBlock, Returntype: int , Parameters: List < WordInFile >  contentList < JavaFileContent >  resultint  i and Body:
		INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 1, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, blockcontent, =, new, ArrayList, , WordInFile, , (, ), ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[blockcontent, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaControlStatement, blockstatement, =, new, JavaControlStatement, (, StatementType, ., BLOCK, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[blockstatement, ., setContent, (, parseControlStatements, (, blockcontent, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, blockstatement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, -, 1, ;]
	METHOD with name: parseTry, Returntype: int , Parameters: List < WordInFile >  contentList < JavaFileContent >  resultint  i and Body:
		INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[List, <, WordInFile, >, resources, =, null, ;]
		IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
			ASSIGNMENT - Statement / declaring 1 variables:[int, openParantheses, =, 1, ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ASSIGNMENT - Statement / referencing 1 variables / calling 1 methods:[resources, =, new, ArrayList, , WordInFile, , (, ), ;]
			WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParantheses > 0 ) with content:
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
					DECREMENT - Statement / referencing 1 variables:[openParantheses, -, -, ;]
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[openParantheses, +, +, ;]
				IF - ControlStatement / referencing 1 variables / Checking condition: (openParantheses ! = 0 ) with if-block:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[resources, ., add, (, content, ., get, (, i, ), ), ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, tryblock, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 1, ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[tryblock, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaControlStatement, tryStatement, =, new, JavaControlStatement, (, StatementType, ., TRY, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[tryStatement, ., setContent, (, parseControlStatements, (, tryblock, ), ), ;]
		IF - ControlStatement / referencing 1 variables / Checking condition: (resources ! = null ) with if-block:
			METHODCALL - Statement / referencing 2 variables / calling 2 methods:[tryStatement, ., setResources, (, parseControlStatements, (, resources, ), ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 2 methods:[tryStatement, ., setCatchedExceptions, (, new, HashMap, , List, , WordInFile, , , List, , JavaFileContent, , , (, ), ), ;]
		WHILE - ControlStatement / referencing 4 variables / calling 3 methods / Checking condition: (content . size ( ) > i & & content . get ( i ) . equals ( KeyWord . CATCH ) ) with content:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, exception, =, new, ArrayList, , WordInFile, , (, ), ;]
			ASSIGNMENT - Statement / declaring 1 variables:[int, openParanthesis, =, 1, ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis > 0 ) with content:
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
					DECREMENT - Statement / referencing 1 variables:[openParanthesis, -, -, ;]
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[openParanthesis, +, +, ;]
				IF - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis ! = 0 ) with if-block:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[exception, ., add, (, content, ., get, (, i, ), ), ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, catchblock, =, new, ArrayList, , WordInFile, , (, ), ;]
			ASSIGNMENT - Statement / referencing 1 variables:[openBraces, =, 1, ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
					DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
				IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[catchblock, ., add, (, content, ., get, (, i, ), ), ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			METHODCALL - Statement / referencing 3 variables / calling 3 methods:[tryStatement, ., getCatchedExceptions, (, ), ., put, (, exception, ,, parseControlStatements, (, catchblock, ), ), ;]
		IF - ControlStatement / referencing 4 variables / calling 3 methods / Checking condition: (content . size ( ) > i & & content . get ( i ) . equals ( KeyWord . FINALLY ) ) with if-block:
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, finallyblock, =, new, ArrayList, , WordInFile, , (, ), ;]
			ASSIGNMENT - Statement / referencing 1 variables:[openBraces, =, 1, ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
					DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
					INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
				IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[finallyblock, ., add, (, content, ., get, (, i, ), ), ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			METHODCALL - Statement / referencing 2 variables / calling 2 methods:[tryStatement, ., setOthercontent, (, parseControlStatements, (, finallyblock, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, tryStatement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, -, 1, ;]
	METHOD with name: parseIf, Returntype: int , Parameters: List < WordInFile >  contentList < JavaFileContent >  resultint  i and Body:
		ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaControlStatement, ifStatement, =, new, JavaControlStatement, (, StatementType, ., IF, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, condition, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openParanthesis, =, 1, ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis > 0 ) with content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openParanthesis, -, -, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openParanthesis, +, +, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis ! = 0 ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[condition, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[ifStatement, ., setCondition, (, condition, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, ifContent, =, new, ArrayList, , JavaFileContent, , (, ), ;]
		WHILE - ControlStatement / referencing 4 variables / calling 5 methods / Checking condition: (content . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) & & content . get ( i + 1 ) . equals ( KeyWord . DOUBLEDOT ) ) with content:
			ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (ModelBuildHelper . keywords . contains ( content . get ( i ) ) ) with if-block:
			ASSIGNMENT - Statement / referencing 6 variables / calling 3 methods:[i, =, parseSingleControlStatement, (, content, ., get, (, i, ), ., getKey, (, ), ,, i, ,, content, ,, ifContent, ), +, 1, ;]
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[ifStatement, ., setContent, (, ifContent, ), ;]
		ELSE - block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, ifblock, =, new, ArrayList, , WordInFile, , (, ), ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[ifStatement, ., setContentInBlock, (, true, ), ;]
				ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 1, ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
						DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
						INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
					IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
						METHODCALL - Statement / referencing 3 variables / calling 2 methods:[ifblock, ., add, (, content, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ELSE - block:
				DOWHILE - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! content . get ( i - 1 ) . equals ( KeyWord . SEMICOLON ) ) with content:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[ifblock, ., add, (, content, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			METHODCALL - Statement / referencing 2 variables / calling 2 methods:[ifStatement, ., setContent, (, parseControlStatements, (, ifblock, ), ), ;]
		IF - ControlStatement / referencing 4 variables / calling 3 methods / Checking condition: (content . size ( ) > i & & content . get ( i ) . equals ( KeyWord . ELSE ) ) with if-block:
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, elseContent, =, new, ArrayList, , JavaFileContent, , (, ), ;]
			WHILE - ControlStatement / referencing 4 variables / calling 5 methods / Checking condition: (content . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) & & content . get ( i + 1 ) . equals ( KeyWord . DOUBLEDOT ) ) with content:
				ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (ModelBuildHelper . keywords . contains ( content . get ( i ) ) ) with if-block:
				ASSIGNMENT - Statement / referencing 6 variables / calling 3 methods:[i, =, parseSingleControlStatement, (, content, ., get, (, i, ), ., getKey, (, ), ,, i, ,, content, ,, elseContent, ), +, 1, ;]
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[ifStatement, ., setOthercontent, (, elseContent, ), ;]
			ELSE - block:
				ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, elseblock, =, new, ArrayList, , WordInFile, , (, ), ;]
				IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
					METHODCALL - Statement / referencing 1 variables / calling 1 methods:[ifStatement, ., setOtherContentInBlock, (, true, ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
					ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 1, ;]
					WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
						IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
							DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
						IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
							INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
						IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
							METHODCALL - Statement / referencing 3 variables / calling 2 methods:[elseblock, ., add, (, content, ., get, (, i, ), ), ;]
						INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				ELSE - block:
					DOWHILE - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! content . get ( i - 1 ) . equals ( KeyWord . SEMICOLON ) ) with content:
						METHODCALL - Statement / referencing 3 variables / calling 2 methods:[elseblock, ., add, (, content, ., get, (, i, ), ), ;]
						INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				METHODCALL - Statement / referencing 2 variables / calling 2 methods:[ifStatement, ., setOthercontent, (, parseControlStatements, (, elseblock, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, ifStatement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, -, 1, ;]
	METHOD with name: parseFor, Returntype: int , Parameters: List < WordInFile >  contentList < JavaFileContent >  resultint  i and Body:
		ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaControlStatement, forStatement, =, new, JavaControlStatement, (, StatementType, ., FOR, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, declaration, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openParanthesis, =, 1, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, state, =, 0, ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis > 0 ) with content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openParanthesis, -, -, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openParanthesis, +, +, ;]
			IF - ControlStatement / referencing 3 variables / calling 2 methods / Checking condition: (openParanthesis ! = 0 & & ! content . get ( i ) . equals ( KeyWord . SEMICOLON ) ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[declaration, ., add, (, content, ., get, (, i, ), ), ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . SEMICOLON ) ) with if-block:
				ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, temp, =, new, ArrayList, , WordInFile, , (, ), ;]
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[temp, ., addAll, (, declaration, ), ;]
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[declaration, ., clear, (, ), ;]
				INCREMENT - Statement / referencing 1 variables:[state, +, +, ;]
				IF - ControlStatement / referencing 1 variables / Checking condition: (state = = 1 ) with if-block:
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[forStatement, ., setInitialization, (, temp, ), ;]
				ELSE - block:
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[forStatement, ., setCondition, (, temp, ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		IF - ControlStatement / referencing 1 variables / Checking condition: (state = = 0 ) with if-block:
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[forStatement, ., setCondition, (, declaration, ), ;]
		ELSE - block:
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[forStatement, ., setIncrement, (, declaration, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, forContent, =, new, ArrayList, , JavaFileContent, , (, ), ;]
		WHILE - ControlStatement / referencing 4 variables / calling 5 methods / Checking condition: (content . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) & & content . get ( i + 1 ) . equals ( KeyWord . DOUBLEDOT ) ) with content:
			ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (ModelBuildHelper . keywords . contains ( content . get ( i ) ) ) with if-block:
			ASSIGNMENT - Statement / referencing 6 variables / calling 3 methods:[i, =, parseSingleControlStatement, (, content, ., get, (, i, ), ., getKey, (, ), ,, i, ,, content, ,, forContent, ), +, 1, ;]
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[forStatement, ., setContent, (, forContent, ), ;]
		ELSE - block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, forblock, =, new, ArrayList, , WordInFile, , (, ), ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[forStatement, ., setContentInBlock, (, true, ), ;]
				ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 1, ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
						DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
						INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
					IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
						METHODCALL - Statement / referencing 3 variables / calling 2 methods:[forblock, ., add, (, content, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ELSE - block:
				DOWHILE - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! content . get ( i - 1 ) . equals ( KeyWord . SEMICOLON ) ) with content:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[forblock, ., add, (, content, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			METHODCALL - Statement / referencing 2 variables / calling 2 methods:[forStatement, ., setContent, (, parseControlStatements, (, forblock, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, forStatement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, -, 1, ;]
	METHOD with name: parseWhile, Returntype: int , Parameters: List < WordInFile >  contentList < JavaFileContent >  resultint  i and Body:
		ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaControlStatement, whileStatement, =, new, JavaControlStatement, (, StatementType, ., WHILE, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, condition, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openParanthesis, =, 1, ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis > 0 ) with content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openParanthesis, -, -, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openParanthesis, +, +, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis ! = 0 ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[condition, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[whileStatement, ., setCondition, (, condition, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, whileContent, =, new, ArrayList, , JavaFileContent, , (, ), ;]
		WHILE - ControlStatement / referencing 4 variables / calling 5 methods / Checking condition: (content . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) & & content . get ( i + 1 ) . equals ( KeyWord . DOUBLEDOT ) ) with content:
			ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (ModelBuildHelper . keywords . contains ( content . get ( i ) ) ) with if-block:
			ASSIGNMENT - Statement / referencing 6 variables / calling 3 methods:[i, =, parseSingleControlStatement, (, content, ., get, (, i, ), ., getKey, (, ), ,, i, ,, content, ,, whileContent, ), +, 1, ;]
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[whileStatement, ., setContent, (, whileContent, ), ;]
		ELSE - block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, whileblock, =, new, ArrayList, , WordInFile, , (, ), ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[whileStatement, ., setContentInBlock, (, true, ), ;]
				ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 1, ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
						DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
						INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
					IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
						METHODCALL - Statement / referencing 3 variables / calling 2 methods:[whileblock, ., add, (, content, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ELSE - block:
				DOWHILE - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! content . get ( i - 1 ) . equals ( KeyWord . SEMICOLON ) ) with content:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[whileblock, ., add, (, content, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			METHODCALL - Statement / referencing 2 variables / calling 2 methods:[whileStatement, ., setContent, (, parseControlStatements, (, whileblock, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, whileStatement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, -, 1, ;]
	METHOD with name: parseDoWhile, Returntype: int , Parameters: List < WordInFile >  contentList < JavaFileContent >  resultint  i and Body:
		INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[JavaControlStatement, whileStatement, =, new, JavaControlStatement, (, StatementType, ., DOWHILE, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, JavaFileContent, >, whileContent, =, new, ArrayList, , JavaFileContent, , (, ), ;]
		WHILE - ControlStatement / referencing 4 variables / calling 5 methods / Checking condition: (content . get ( i ) . getKey ( ) . equals ( KeyWord . WORD ) & & content . get ( i + 1 ) . equals ( KeyWord . DOUBLEDOT ) ) with content:
			ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (ModelBuildHelper . keywords . contains ( content . get ( i ) ) ) with if-block:
			ASSIGNMENT - Statement / referencing 6 variables / calling 3 methods:[i, =, parseSingleControlStatement, (, content, ., get, (, i, ), ., getKey, (, ), ,, i, ,, content, ,, whileContent, ), +, 1, ;]
			METHODCALL - Statement / referencing 2 variables / calling 1 methods:[whileStatement, ., setContent, (, whileContent, ), ;]
		ELSE - block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, whileblock, =, new, ArrayList, , WordInFile, , (, ), ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[whileStatement, ., setContentInBlock, (, true, ), ;]
				ASSIGNMENT - Statement / declaring 1 variables:[int, openBraces, =, 1, ;]
				INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
				WHILE - ControlStatement / referencing 1 variables / Checking condition: (openBraces > 0 ) with content:
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSEBRACE ) ) with if-block:
						DECREMENT - Statement / referencing 1 variables:[openBraces, -, -, ;]
					IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENBRACE ) ) with if-block:
						INCREMENT - Statement / referencing 1 variables:[openBraces, +, +, ;]
					IF - ControlStatement / referencing 1 variables / Checking condition: (openBraces ! = 0 ) with if-block:
						METHODCALL - Statement / referencing 3 variables / calling 2 methods:[whileblock, ., add, (, content, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			ELSE - block:
				DOWHILE - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (! content . get ( i - 1 ) . equals ( KeyWord . SEMICOLON ) ) with content:
					METHODCALL - Statement / referencing 3 variables / calling 2 methods:[whileblock, ., add, (, content, ., get, (, i, ), ), ;]
					INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
			METHODCALL - Statement / referencing 2 variables / calling 2 methods:[whileStatement, ., setContent, (, parseControlStatements, (, whileblock, ), ), ;]
		ASSIGNMENT - Statement / referencing 1 variables:[i, +, =, 2, ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[List, <, WordInFile, >, condition, =, new, ArrayList, , WordInFile, , (, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables:[int, openParanthesis, =, 1, ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis > 0 ) with content:
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . CLOSPARANTHESE ) ) with if-block:
				DECREMENT - Statement / referencing 1 variables:[openParanthesis, -, -, ;]
			IF - ControlStatement / referencing 2 variables / calling 2 methods / Checking condition: (content . get ( i ) . equals ( KeyWord . OPENPARANTHESE ) ) with if-block:
				INCREMENT - Statement / referencing 1 variables:[openParanthesis, +, +, ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (openParanthesis ! = 0 ) with if-block:
				METHODCALL - Statement / referencing 3 variables / calling 2 methods:[condition, ., add, (, content, ., get, (, i, ), ), ;]
			INCREMENT - Statement / referencing 1 variables:[i, +, +, ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[whileStatement, ., setCondition, (, condition, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., add, (, whileStatement, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, i, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:645
If-Statements: 99.0
Arguments: 74.0
Literals: 2.0
Classes: 1.0
Methods: 13.0
Branches: 303.0
References: 812.0
Function-Calls: 465.0
Cases: 13.0
Secure Statements: 711.0
Variables: 109.0
Reusable Methods: 1.0
Imports: 15.0
Loop-Statements: 39.0
Statements: 711.0
Parameters: 35.0
Return-Statements: 13.0
Results: 119.0
Predicates: 244.0
Constants: 0.0
Foreign-Function-Calls: 429.0
Switch-Statements: 1.0
---------- File: JavaClass.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:651
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:653
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:653
*** Step 4 - Expand model with details
*** Finished at 13:07:26:654
PACKAGE - Statement:[package, plugin, ., model, ., components, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., KeyWord, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
CLASS with name: JavaClass extending: [JavaFileContent] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, final, String, name, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, List, <, WordInFile, >, modifiers, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, KeyWord, type, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, String, >, extending, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, String, >, implementing, ;]
	METHOD with name: JavaClass, Parameters: String  nameList < JavaFileContent >  contentKeyWord  typeList < WordInFile >  modifiersList < String >  extendingList < String >  implementing and Body:
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[, (, content, ), ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., name, =, name, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., type, =, type, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., modifiers, =, modifiers, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., extending, =, extending, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., implementing, =, implementing, ;]
	METHOD with name: getModifiers, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, modifiers, ;]
	METHOD with name: getType, Returntype: KeyWord  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, type, ;]
	METHOD with name: getExtending, Returntype: List < String >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, extending, ;]
	METHOD with name: getImplementing, Returntype: List < String >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, implementing, ;]
	METHOD with name: getName, Returntype: String  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, name, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:656
Arguments: 5.0
Literals: 0.0
Classes: 1.0
Methods: 6.0
Branches: 5.0
References: 27.0
Function-Calls: 1.0
Secure Statements: 34.0
Variables: 11.0
Reusable Methods: 5.0
Imports: 5.0
Statements: 35.0
Parameters: 6.0
Return-Statements: 5.0
Results: 10.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: JavaControlStatement.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:668
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:670
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:671
*** Step 4 - Expand model with details
*** Finished at 13:07:26:672
PACKAGE - Statement:[package, plugin, ., model, ., components, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, java, ., util, ., Map, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., StatementType, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
CLASS with name: JavaControlStatement extending: [JavaStatement] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, WordInFile, >, condition, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, WordInFile, >, initialization, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, WordInFile, >, increment, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, JavaFileContent, >, othercontent, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, JavaFileContent, >, resources, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, Map, <, List, <, WordInFile, >, ,, List, <, JavaFileContent, >, >, catchedExceptions, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, boolean, contentInBlock, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, boolean, otherContentInBlock, ;]
	METHOD with name: JavaControlStatement, Parameters: StatementType  type and Body:
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[, (, type, ), ;]
		ASSIGNMENT - Statement / referencing 1 variables:[condition, =, null, ;]
		ASSIGNMENT - Statement / referencing 1 variables:[initialization, =, null, ;]
		ASSIGNMENT - Statement / referencing 1 variables:[increment, =, null, ;]
		ASSIGNMENT - Statement / referencing 1 variables:[othercontent, =, null, ;]
		METHODCALL - Statement / calling 1 methods:[setCatchedExceptions, (, null, ), ;]
		METHODCALL - Statement / calling 1 methods:[setResources, (, null, ), ;]
		METHODCALL - Statement / calling 1 methods:[setContentInBlock, (, false, ), ;]
		METHODCALL - Statement / calling 1 methods:[setOtherContentInBlock, (, false, ), ;]
	METHOD with name: getCondition, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, condition, ;]
	METHOD with name: setCondition, Returntype: void , Parameters: List < WordInFile >  condition and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., condition, =, condition, ;]
	METHOD with name: getInitialization, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, initialization, ;]
	METHOD with name: setInitialization, Returntype: void , Parameters: List < WordInFile >  initialization and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., initialization, =, initialization, ;]
	METHOD with name: getIncrement, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, increment, ;]
	METHOD with name: setIncrement, Returntype: void , Parameters: List < WordInFile >  increment and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., increment, =, increment, ;]
	METHOD with name: getOthercontent, Returntype: List < JavaFileContent >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, othercontent, ;]
	METHOD with name: setOthercontent, Returntype: void , Parameters: List < JavaFileContent >  elsecontent and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., othercontent, =, elsecontent, ;]
	METHOD with name: getResources, Returntype: List < JavaFileContent >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, resources, ;]
	METHOD with name: setResources, Returntype: void , Parameters: List < JavaFileContent >  resources and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., resources, =, resources, ;]
	METHOD with name: getCatchedExceptions, Returntype: Map < List < WordInFile > , List < JavaFileContent > >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, catchedExceptions, ;]
	METHOD with name: setCatchedExceptions, Returntype: void , Parameters: Map < List < WordInFile > , List < JavaFileContent > >  catchedExceptions and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., catchedExceptions, =, catchedExceptions, ;]
	METHOD with name: isContentInBlock, Returntype: boolean  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, contentInBlock, ;]
	METHOD with name: setContentInBlock, Returntype: void , Parameters: boolean  contentInBlock and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., contentInBlock, =, contentInBlock, ;]
	METHOD with name: isOtherContentInBlock, Returntype: boolean  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, otherContentInBlock, ;]
	METHOD with name: setOtherContentInBlock, Returntype: void , Parameters: boolean  otherContentInBlock and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., otherContentInBlock, =, otherContentInBlock, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:675
Arguments: 8.0
Literals: 0.0
Classes: 1.0
Methods: 17.0
Branches: 8.0
References: 46.0
Function-Calls: 5.0
Secure Statements: 74.0
Variables: 17.0
Reusable Methods: 16.0
Imports: 6.0
Statements: 75.0
Parameters: 9.0
Return-Statements: 8.0
Results: 20.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: JavaEnumValues.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:679
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:681
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:682
*** Step 4 - Expand model with details
*** Finished at 13:07:26:682
PACKAGE - Statement:[package, plugin, ., model, ., components, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
CLASS with name: JavaEnumValues extending: [JavaFileContent] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, List, <, WordInFile, >, >, values, ;]
	METHOD with name: JavaEnumValues, Parameters: List < List < WordInFile > >  values and Body:
		METHODCALL - Statement / calling 1 methods:[, (, null, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[this, ., setValues, (, values, ), ;]
	METHOD with name: getValues, Returntype: List < List < WordInFile > >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, values, ;]
	METHOD with name: setValues, Returntype: void , Parameters: List < List < WordInFile > >  values and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., values, =, values, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:683
Arguments: 1.0
Literals: 0.0
Classes: 1.0
Methods: 3.0
Branches: 1.0
References: 7.0
Function-Calls: 2.0
Secure Statements: 16.0
Variables: 3.0
Reusable Methods: 2.0
Imports: 4.0
Statements: 17.0
Parameters: 2.0
Return-Statements: 1.0
Results: 2.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: JavaMethod.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:688
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:689
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:690
*** Step 4 - Expand model with details
*** Finished at 13:07:26:700
PACKAGE - Statement:[package, plugin, ., model, ., components, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
CLASS with name: JavaMethod extending: [JavaFileContent] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, final, String, name, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, List, <, WordInFile, >, modifiers, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, List, <, JavaVariable, >, parameters, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, List, <, WordInFile, >, returntype, ;]
	METHOD with name: JavaMethod, Parameters: String  nameList < WordInFile >  returntypeList < WordInFile >  modifiersList < JavaVariable >  parametersList < JavaFileContent >  body and Body:
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[, (, body, ), ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., returntype, =, returntype, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., modifiers, =, modifiers, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., name, =, name, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., parameters, =, parameters, ;]
	METHOD with name: getParameters, Returntype: List < JavaVariable >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, parameters, ;]
	METHOD with name: getName, Returntype: String  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, name, ;]
	METHOD with name: getModifiers, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, modifiers, ;]
	METHOD with name: getReturntype, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, returntype, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:701
Arguments: 4.0
Literals: 0.0
Classes: 1.0
Methods: 5.0
Branches: 4.0
References: 22.0
Function-Calls: 1.0
Secure Statements: 28.0
Variables: 9.0
Reusable Methods: 4.0
Imports: 4.0
Statements: 29.0
Parameters: 5.0
Return-Statements: 4.0
Results: 8.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: JavaStatement.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:711
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:784
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:785
*** Step 4 - Expand model with details
*** Finished at 13:07:26:786
PACKAGE - Statement:[package, plugin, ., model, ., components, ;]
IMPORT - Statement:[import, java, ., util, ., ArrayList, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., StatementType, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
CLASS with name: JavaStatement extending: [JavaFileContent] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, WordInFile, >, statementText, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, StatementType, type, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, JavaVariable, >, declaredVariables, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, JavaVariable, >, referencedVariables, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, WordInFile, >, calledMethods, ;]
	METHOD with name: JavaStatement, Parameters: StatementType  type and Body:
		METHODCALL - Statement / calling 1 methods:[, (, null, ), ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., type, =, type, ;]
		ASSIGNMENT - Statement / referencing 1 variables:[this, ., statementText, =, null, ;]
		ASSIGNMENT - Statement / referencing 1 variables / calling 1 methods:[this, ., declaredVariables, =, new, ArrayList, , JavaVariable, , (, ), ;]
		ASSIGNMENT - Statement / referencing 1 variables / calling 1 methods:[this, ., referencedVariables, =, new, ArrayList, , JavaVariable, , (, ), ;]
		ASSIGNMENT - Statement / referencing 1 variables / calling 1 methods:[this, ., calledMethods, =, new, ArrayList, , WordInFile, , (, ), ;]
	METHOD with name: getStatementText, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, statementText, ;]
	METHOD with name: setStatementText, Returntype: void , Parameters: List < WordInFile >  statementText and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., statementText, =, statementText, ;]
	METHOD with name: getType, Returntype: StatementType  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, type, ;]
	METHOD with name: setStatementType, Returntype: void , Parameters: StatementType  type and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., type, =, type, ;]
	METHOD with name: getDeclaredVariables, Returntype: List < JavaVariable >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, declaredVariables, ;]
	METHOD with name: setDeclaredVariables, Returntype: void , Parameters: List < JavaVariable >  declaredVariables and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., declaredVariables, =, declaredVariables, ;]
	METHOD with name: getReferencedVariables, Returntype: List < JavaVariable >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, referencedVariables, ;]
	METHOD with name: setReferencedVariables, Returntype: void , Parameters: List < JavaVariable >  referencedVariables and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., referencedVariables, =, referencedVariables, ;]
	METHOD with name: getCalledMethods, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, calledMethods, ;]
	METHOD with name: setCalledMethods, Returntype: void , Parameters: List < WordInFile >  calledMethods and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., calledMethods, =, calledMethods, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:788
Arguments: 6.0
Literals: 0.0
Classes: 1.0
Methods: 11.0
Branches: 5.0
References: 32.0
Function-Calls: 4.0
Secure Statements: 50.0
Variables: 11.0
Reusable Methods: 10.0
Imports: 6.0
Statements: 51.0
Parameters: 6.0
Return-Statements: 5.0
Results: 15.0
Constants: 0.0
Foreign-Function-Calls: 4.0
---------- File: JavaStatementWithAnonymousClass.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:795
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:796
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:796
*** Step 4 - Expand model with details
*** Finished at 13:07:26:796
PACKAGE - Statement:[package, plugin, ., model, ., components, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., StatementType, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
CLASS with name: JavaStatementWithAnonymousClass extending: [JavaStatement] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, final, List, <, WordInFile, >, statementBeforeClass, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, WordInFile, >, statementAfterClass, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, List, <, WordInFile, >, classType, ;]
	METHOD with name: JavaStatementWithAnonymousClass, Parameters: List < WordInFile >  statementBeforeClassList < WordInFile >  classType and Body:
		METHODCALL - Statement / calling 1 methods:[, (, StatementType, ., UNSPECIFIED, ), ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., statementBeforeClass, =, statementBeforeClass, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., classType, =, classType, ;]
	METHOD with name: getStatementBeforeClass, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, statementBeforeClass, ;]
	METHOD with name: getStatementAfterClass, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, statementAfterClass, ;]
	METHOD with name: setStatementAfterClass, Returntype: void , Parameters: List < WordInFile >  statementAfterClass and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., statementAfterClass, =, statementAfterClass, ;]
	METHOD with name: getClassType, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, classType, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:797
Arguments: 3.0
Literals: 0.0
Classes: 1.0
Methods: 5.0
Branches: 3.0
References: 15.0
Function-Calls: 1.0
Secure Statements: 25.0
Variables: 6.0
Reusable Methods: 4.0
Imports: 4.0
Statements: 26.0
Parameters: 3.0
Return-Statements: 3.0
Results: 6.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: JavaVariable.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:799
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:801
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:801
*** Step 4 - Expand model with details
*** Finished at 13:07:26:802
PACKAGE - Statement:[package, plugin, ., model, ., components, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
CLASS with name: JavaVariable extending: [JavaFileContent] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, final, String, name, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, List, <, WordInFile, >, type, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, String, value, ;]
	METHOD with name: JavaVariable, Parameters: String  nameList < WordInFile >  type and Body:
		METHODCALL - Statement / calling 1 methods:[, (, null, ), ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., name, =, name, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., type, =, type, ;]
	METHOD with name: getName, Returntype: String  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, name, ;]
	METHOD with name: getType, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, type, ;]
	METHOD with name: getValue, Returntype: String  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, value, ;]
	METHOD with name: setValue, Returntype: void , Parameters: String  value and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., value, =, value, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:802
Arguments: 3.0
Literals: 0.0
Classes: 1.0
Methods: 5.0
Branches: 3.0
References: 15.0
Function-Calls: 1.0
Secure Statements: 25.0
Variables: 6.0
Reusable Methods: 4.0
Imports: 4.0
Statements: 26.0
Parameters: 3.0
Return-Statements: 3.0
Results: 6.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: JavaFileContent.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:804
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:805
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:807
*** Step 4 - Expand model with details
*** Finished at 13:07:26:807
PACKAGE - Statement:[package, plugin, ., model, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
CLASS with name: JavaFileContent and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, JavaFileContent, >, content, ;]
	METHOD with name: JavaFileContent, Parameters: List < JavaFileContent >  content and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., content, =, content, ;]
	METHOD with name: getContent, Returntype: List < JavaFileContent >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, this, ., content, ;]
	METHOD with name: setContent, Returntype: void , Parameters: List < JavaFileContent >  content and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., content, =, content, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:807
Arguments: 2.0
Literals: 0.0
Classes: 1.0
Methods: 3.0
Branches: 1.0
References: 8.0
Function-Calls: 0.0
Secure Statements: 14.0
Variables: 3.0
Reusable Methods: 3.0
Imports: 2.0
Statements: 14.0
Parameters: 2.0
Return-Statements: 1.0
Results: 3.0
Constants: 0.0
---------- File: KeyWord.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:829
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:830
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:830
*** Step 4 - Expand model with details
*** Finished at 13:07:26:834
PACKAGE - Statement:[package, plugin, ., model, ;]
ENUM with name: KeyWord and Body:
	Enum-Values: 
		[ABSTRACT, (, ", ,, WordType, ., MODIFIER, )]
		[ASSERT, (, ", ,, WordType, ., STATEMENT, )]
		[BOOLEAN, (, ", ,, WordType, ., DATATYPE, )]
		[BREAK, (, ", ,, WordType, ., STATEMENT, )]
		[BYTE, (, ", ,, WordType, ., DATATYPE, )]
		[CASE, (, ", ,, WordType, ., STATEMENT, )]
		[CATCH, (, ", ,, WordType, ., STATEMENT, )]
		[CHAR, (, ", ,, WordType, ., DATATYPE, )]
		[CLASS, (, ", ,, WordType, ., DECLARATOR, )]
		[CONTINUE, (, ", ,, WordType, ., STATEMENT, )]
		[DEFAULT, (, ", ,, WordType, ., STATEMENT, )]
		[DO, (, ", ,, WordType, ., STATEMENT, )]
		[DOUBLE, (, ", ,, WordType, ., DATATYPE, )]
		[ELSE, (, ", ,, WordType, ., STATEMENT, )]
		[ENUM, (, ", ,, WordType, ., DECLARATOR, )]
		[EXTENDS, (, ", ,, WordType, ., SPECIFIER, )]
		[FINAL, (, ", ,, WordType, ., MODIFIER, )]
		[FINALLY, (, ", ,, WordType, ., STATEMENT, )]
		[FLOAT, (, ", ,, WordType, ., DATATYPE, )]
		[FOR, (, ", ,, WordType, ., STATEMENT, )]
		[IF, (, ", ,, WordType, ., STATEMENT, )]
		[IMPLEMENTS, (, ", ,, WordType, ., SPECIFIER, )]
		[IMPORT, (, ", ,, WordType, ., STATEMENT, )]
		[INSTANCEOF, (, ", ,, WordType, ., OPERATOR, )]
		[INT, (, ", ,, WordType, ., DATATYPE, )]
		[INTERFACE, (, ", ,, WordType, ., DECLARATOR, )]
		[LONG, (, ", ,, WordType, ., DATATYPE, )]
		[NATIVE, (, ", ,, WordType, ., MODIFIER, )]
		[NEW, (, ", ,, WordType, ., OPERATOR, )]
		[PACKAGE, (, ", ,, WordType, ., STATEMENT, )]
		[PRIVATE, (, ", ,, WordType, ., MODIFIER, )]
		[PROTECTED, (, ", ,, WordType, ., MODIFIER, )]
		[PUBLIC, (, ", ,, WordType, ., MODIFIER, )]
		[RETURN, (, ", ,, WordType, ., STATEMENT, )]
		[SHORT, (, ", ,, WordType, ., DATATYPE, )]
		[STATIC, (, ", ,, WordType, ., MODIFIER, )]
		[STRICTFP, (, ", ,, WordType, ., MODIFIER, )]
		[SUPER, (, ", ,, WordType, ., STATEMENT, )]
		[SWITCH, (, ", ,, WordType, ., STATEMENT, )]
		[SYNCHRONIZED, (, ", ,, WordType, ., STATEMENTORMODIFIER, )]
		[THIS, (, ", ,, WordType, ., STATEMENTOROBJECT, )]
		[THROW, (, ", ,, WordType, ., STATEMENT, )]
		[THROWS, (, ", ,, WordType, ., SPECIFIER, )]
		[TRANSIENT, (, ", ,, WordType, ., MODIFIER, )]
		[TRY, (, ", ,, WordType, ., STATEMENT, )]
		[VOID, (, ", ,, WordType, ., DATATYPE, )]
		[VOLATILE, (, ", ,, WordType, ., MODIFIER, )]
		[WHILE, (, ", ,, WordType, ., STATEMENT, )]
		[TRUE, (, ", ,, WordType, ., LITERAL, )]
		[FALSE, (, ", ,, WordType, ., LITERAL, )]
		[NULL, (, ", ,, WordType, ., LITERAL, )]
		[ADD, (, ", ,, WordType, ., OPERATOR, )]
		[SUB, (, ", ,, WordType, ., OPERATOR, )]
		[MULT, (, ", ,, WordType, ., OPERATOR, )]
		[DIV, (, ", ,, WordType, ., OPERATOR, )]
		[MOD, (, ", ,, WordType, ., OPERATOR, )]
		[COMP, (, ", ,, WordType, ., OPERATOR, )]
		[GREATER, (, ", ,, WordType, ., OPERATOR, )]
		[LESS, (, ", ,, WordType, ., OPERATOR, )]
		[AND, (, ", ,, WordType, ., OPERATOR, )]
		[OR, (, ", ,, WordType, ., OPERATOR, )]
		[BITCOMP, (, ", ,, WordType, ., OPERATOR, )]
		[BITXOR, (, ", ,, WordType, ., OPERATOR, )]
		[ASSIGN, (, ", ,, WordType, ., OPERATOR, )]
		[STRINGLITERAL, (, ", ,, WordType, ., LITERAL, )]
		[CHARLITERAL, (, ", ,, WordType, ., LITERAL, )]
		[OPENPARANTHESE, (, ", ,, WordType, ., BREAK, )]
		[CLOSPARANTHESE, (, ", ,, WordType, ., BREAK, )]
		[OPENBRACE, (, ", ,, WordType, ., BREAK, )]
		[CLOSEBRACE, (, ", ,, WordType, ., BREAK, )]
		[OPENBRACKET, (, ", ,, WordType, ., BREAK, )]
		[CLOSEBRACKET, (, ", ,, WordType, ., BREAK, )]
		[SEMICOLON, (, ", ,, WordType, ., BREAK, )]
		[COMMA, (, ", ,, WordType, ., BREAK, )]
		[DOT, (, ", ,, WordType, ., BREAK, )]
		[ANNOTATION, (, ", ,, WordType, ., BREAK, )]
		[ANNOTATIONINTERFACE, (, ", ,, WordType, ., DECLARATOR, )]
		[QUESTIONMARK, (, ", ,, WordType, ., BREAK, )]
		[DOUBLEDOT, (, ", ,, WordType, ., BREAK, )]
		[WORD, (, ", ,, WordType, ., FREEWORD, )]
		[VARIDENT, (, ", ,, WordType, ., VARIDENT, )]
		[VARTYPE, (, ", ,, WordType, ., VARTYPE, )]
		[METHODREF, (, ", ,, WordType, ., METHODREF, )]
		[ASSIGNMENT, (, ", ,, WordType, ., ASSIGNMENT, )]
		[CONSTANT, (, ", ,, WordType, ., NUMBER, )]
		[COMPARATOR, (, ", ,, WordType, ., COMPARATOR, )]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, String, word, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, WordType, type, ;]
	METHOD with name: KeyWord, Parameters: String  wordWordType  type and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., word, =, word, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., type, =, type, ;]
	METHOD with name: toString, Returntype: String  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, this, ., word, ;]
	METHOD with name: findKeyword, Returntype: WordInFile , Parameters: String  word and Body:
		FOR - ControlStatement / declaring 1 variables / calling 1 methods / Enhanced version scanning: (KeyWord key : KeyWord . values ( ) ) with content:
			IF - ControlStatement / referencing 3 variables / calling 1 methods / Checking condition: (key . word . equals ( word ) ) with if-block:
				RETURN - ControlStatement / referencing 1 variables / calling 1 methods / :[return, new, WordInFile, (, null, ,, key, ), ;]
		RETURN - ControlStatement / referencing 1 variables / calling 1 methods / :[return, new, WordInFile, (, word, ,, KeyWord, ., WORD, ), ;]
	METHOD with name: getType, Returntype: WordType  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, type, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:836
Literals: 172.0
Arguments: 2.0
If-Statements: 1.0
Classes: 1.0
Methods: 4.0
Branches: 8.0
References: 17.0
Function-Calls: 4.0
Secure Statements: 24.0
Variables: 6.0
Reusable Methods: 3.0
Imports: 1.0
Loop-Statements: 1.0
Statements: 24.0
Parameters: 3.0
Return-Statements: 4.0
Results: 6.0
Predicates: 3.0
Constants: 0.0
Foreign-Function-Calls: 4.0
---------- File: StatementType.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:838
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:838
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:839
*** Step 4 - Expand model with details
*** Finished at 13:07:26:839
PACKAGE - Statement:[package, plugin, ., model, ;]
ENUM with name: StatementType and Body:
	Enum-Values: 
		[BREAK]
		[CONTINUE]
		[ASSERT]
		[THROW]
		[TRY]
		[IF]
		[FOR]
		[WHILE]
		[DOWHILE]
		[RETURN]
		[BLOCK]
		[SWITCH]
		[CASE]
		[SYNCHRONIZED]
		[ANNOTATION]
		[PACKAGE]
		[IMPORT]
		[ASSIGNMENT]
		[VARDECLARATION]
		[UNSPECIFIED]
		[INCREMENT]
		[DECREMENT]
		[METHODCALL]
		[ELSE]
		[FINALLY]
		[CATCH]
		[METHODDECLARATION]
		[CLASSDECLARATION]
		[INTERFACEDECLARATION]
		[ENUMDECLARATION]
		[ENUMVALUES]
		[TRYWITHRESOURCES]
		[ENHANCEDFOR]
*** Step 5 - Count measures
*** Finished at 13:07:26:839
Literals: 33.0
Imports: 1.0
Statements: 4.0
Constants: 0.0
Secure Statements: 4.0
---------- File: WordInFile.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:842
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:843
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:843
*** Step 4 - Expand model with details
*** Finished at 13:07:26:851
PACKAGE - Statement:[package, plugin, ., model, ;]
CLASS with name: WordInFile extending: [JavaFileContent] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, final, String, word, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, KeyWord, key, ;]
	METHOD with name: WordInFile, Parameters: String  wordKeyWord  key and Body:
		METHODCALL - Statement / calling 1 methods:[, (, null, ), ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., word, =, word, ;]
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., key, =, key, ;]
	ANNOTATION
	METHOD with name: toString, Returntype: String  and Body:
		IF - ControlStatement / referencing 1 variables / Checking condition: (word = = null ) with if-block:
			RETURN - ControlStatement / referencing 1 variables / calling 1 methods / :[return, this, ., key, ., toString, (, ), ;]
		RETURN - ControlStatement / calling 1 methods / :[return, this, ., getWord, (, ), ;]
	ANNOTATION
	METHOD with name: equals, Returntype: boolean , Parameters: Object  o and Body:
		IF - ControlStatement / referencing 1 variables / Checking condition: (o instanceof WordInFile ) with if-block:
			ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[WordInFile, test, =, (, WordInFile, ), o, ;]
			IF - ControlStatement / referencing 8 variables / calling 8 methods / Checking condition: (( test . getWord ( ) = = null & & test . getKey ( ) . equals ( this . key ) ) | | ( test . getWord ( ) ! = null & & test . getWord ( ) . equals ( this . word ) & & test . getKey ( ) . equals ( this . key ) ) ) with if-block:
				RETURN - ControlStatement / :[return, true, ;]
		ELSE - block:
			IF - ControlStatement / referencing 1 variables / Checking condition: (o instanceof KeyWord ) with if-block:
				ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[KeyWord, test, =, (, KeyWord, ), o, ;]
				IF - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (test . equals ( this . key ) ) with if-block:
					RETURN - ControlStatement / :[return, true, ;]
		RETURN - ControlStatement / :[return, false, ;]
	METHOD with name: getWord, Returntype: String  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, this, ., word, ;]
	METHOD with name: getKey, Returntype: KeyWord  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, this, ., key, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:852
Arguments: 4.0
If-Statements: 5.0
Literals: 0.0
Classes: 1.0
Methods: 5.0
Branches: 17.0
References: 29.0
Function-Calls: 12.0
Secure Statements: 37.0
Variables: 7.0
Reusable Methods: 4.0
Imports: 1.0
Statements: 38.0
Parameters: 3.0
Return-Statements: 7.0
Results: 11.0
Predicates: 13.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: WordList.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:858
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:858
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:858
*** Step 4 - Expand model with details
*** Finished at 13:07:26:859
PACKAGE - Statement:[package, plugin, ., model, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
CLASS with name: WordList extending: [JavaFileContent] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, List, <, WordInFile, >, wordlist, ;]
	METHOD with name: WordList, Parameters: List < WordInFile >  wordlist and Body:
		METHODCALL - Statement / calling 1 methods:[, (, null, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[this, ., setWordlist, (, wordlist, ), ;]
	METHOD with name: getWordlist, Returntype: List < WordInFile >  and Body:
		RETURN - ControlStatement / referencing 1 variables / :[return, wordlist, ;]
	METHOD with name: setWordlist, Returntype: void , Parameters: List < WordInFile >  wordlist and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., wordlist, =, wordlist, ;]
*** Step 5 - Count measures
*** Finished at 13:07:26:859
Arguments: 1.0
Literals: 0.0
Classes: 1.0
Methods: 3.0
Branches: 1.0
References: 7.0
Function-Calls: 2.0
Secure Statements: 14.0
Variables: 3.0
Reusable Methods: 2.0
Imports: 2.0
Statements: 15.0
Parameters: 2.0
Return-Statements: 1.0
Results: 2.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: WordType.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:26:861
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:26:861
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:26:861
*** Step 4 - Expand model with details
*** Finished at 13:07:26:861
PACKAGE - Statement:[package, plugin, ., model, ;]
ENUM with name: WordType and Body:
	Enum-Values: 
		[MODIFIER]
		[STATEMENT]
		[DATATYPE]
		[OPERATOR]
		[SPECIFIER]
		[DECLARATOR]
		[STATEMENTORMODIFIER]
		[STATEMENTOROBJECT]
		[LITERAL]
		[BREAK]
		[FREEWORD]
		[VARIDENT]
		[VARTYPE]
		[METHODREF]
		[ASSIGNMENT]
		[NUMBER]
		[COMPARATOR]
*** Step 5 - Count measures
*** Finished at 13:07:26:862
Literals: 17.0
Imports: 1.0
Statements: 4.0
Constants: 0.0
Secure Statements: 4.0
---------- File: SoftAuditMetrics.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:27:362
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:27:365
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:27:366
*** Step 4 - Expand model with details
*** Finished at 13:07:27:378
PACKAGE - Statement:[package, plugin, ;]
IMPORT - Statement:[import, java, ., util, ., Arrays, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., measures, ., CoreMetrics, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., measures, ., Metric, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., measures, ., Metrics, ;]
CLASS with name: SoftAuditMetrics implementing: [Metrics] and Body:
	ASSIGNMENT - Statement / declaring 1 variables:[private, static, final, Integer, level, =, 2, ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, ARG, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, BRA, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, CAS, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, CLA, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, CON, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, IFS, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, INT, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, LIT, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, LOP, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, MAD, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, MED, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, MET, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, MID, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, PAR, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, PRE, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, REF, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, RES, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, RET, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, SED, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, STM, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, SWI, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, VAR, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, DTY, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, FFC, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, FUC, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, IMP, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, RUM, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, SRC, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, SST, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, STY, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, OMS, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, DBA, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, DBS, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, DEF, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, FIA, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, FIL, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, INP, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, OUT, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, PAN, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, REP, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, UFM, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, VIE, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, OBP, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, DCO, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, DFC, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, CFC, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, COC, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, ACB, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, TST, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, FLE, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, COF, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, MAB, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, AQB, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, ICO, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, BRC, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, LCM, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, ACM, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, MOD, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, REU, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, SEC, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, MAM, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, AQM, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, DAP, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, FUP, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., INT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_NONE, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, DAC, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, LCF, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, ACF, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_WORST, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, POR, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, MAF, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	ASSIGNMENT - Statement / declaring 1 variables / calling 6 methods:[public, static, final, Metric, <, Integer, >, AQF, =, new, Metric, ., Builder, (, ", ,, ", ,, Metric, ., ValueType, ., FLOAT, ), ., setDescription, (, ", ), ., setDirection, (, Metric, ., DIRECTION_BETTER, ), ., setQualitative, (, false, ), ., setDomain, (, CoreMetrics, ., DOMAIN_GENERAL, ), ., create, (, ), ;]
	METHOD with name: SoftAuditMetrics and Body:
		METHODCALL - Statement / calling 1 methods:[, (, ), ;]
	ANNOTATION
	METHOD with name: getMetrics, Returntype: List < Metric >  and Body:
		SWITCH - ControlStatement / referencing 1 variables / over value of : (level ) and cases:
			CASE - ControlStatement / for case: (1 ) and content:
				RETURN - ControlStatement / referencing 33 variables / calling 1 methods / :[return, Arrays, ., asList, (, ARG, ,, BRA, ,, CAS, ,, CLA, ,, CON, ,, IFS, ,, INT, ,, LIT, ,, LOP, ,, MAD, ,, MED, ,, MET, ,, MID, ,, PAR, ,, PRE, ,, REF, ,, RES, ,, RET, ,, SED, ,, STM, ,, SWI, ,, VAR, ,, OBP, ,, DCO, ,, DFC, ,, CFC, ,, COC, ,, ACB, ,, TST, ,, FLE, ,, COF, ,, MAB, ,, AQB, ), ;]
			CASE - ControlStatement / for case: (2 ) and content:
				RETURN - ControlStatement / referencing 48 variables / calling 1 methods / :[return, Arrays, ., asList, (, ARG, ,, BRA, ,, CAS, ,, CLA, ,, CON, ,, IFS, ,, INT, ,, LIT, ,, LOP, ,, MAD, ,, MED, ,, MET, ,, MID, ,, PAR, ,, PRE, ,, REF, ,, RES, ,, RET, ,, SED, ,, STM, ,, SWI, ,, VAR, ,, DTY, ,, FFC, ,, FUC, ,, IMP, ,, RUM, ,, SRC, ,, SST, ,, STY, ,, OMS, ,, OBP, ,, DCO, ,, DFC, ,, CFC, ,, COC, ,, ICO, ,, BRC, ,, LCM, ,, ACM, ,, TST, ,, FLE, ,, COF, ,, MOD, ,, REU, ,, SEC, ,, MAM, ,, AQM, ), ;]
			CASE - ControlStatement / for case: (3 ) and content:
				RETURN - ControlStatement / referencing 63 variables / calling 1 methods / :[return, Arrays, ., asList, (, ARG, ,, BRA, ,, CAS, ,, CLA, ,, CON, ,, IFS, ,, INT, ,, LIT, ,, LOP, ,, MAD, ,, MED, ,, MET, ,, MID, ,, PAR, ,, PRE, ,, REF, ,, RES, ,, RET, ,, SED, ,, STM, ,, SWI, ,, VAR, ,, DTY, ,, FFC, ,, FUC, ,, IMP, ,, RUM, ,, SRC, ,, SST, ,, STY, ,, OMS, ,, DBA, ,, DBS, ,, DEF, ,, FIA, ,, FIL, ,, INP, ,, OUT, ,, PAN, ,, REP, ,, UFM, ,, VIE, ,, OBP, ,, DAP, ,, FUP, ,, DCO, ,, DFC, ,, CFC, ,, COC, ,, ICO, ,, BRC, ,, DAC, ,, LCF, ,, ACF, ,, TST, ,, FLE, ,, COF, ,, MOD, ,, REU, ,, SEC, ,, POR, ,, MAF, ,, AQF, ), ;]
			CASE - ControlStatement / for case: (default ) and content:
				RETURN - ControlStatement / :[return, null, ;]
*** Step 5 - Count measures
*** Finished at 13:07:27:383
Arguments: 45.0
Literals: 210.0
Classes: 1.0
Methods: 2.0
Branches: 8.0
References: 261.0
Function-Calls: 424.0
Cases: 4.0
Secure Statements: 24.0
Variables: 71.0
Imports: 6.0
Statements: 94.0
Parameters: 0.0
Return-Statements: 4.0
Results: 75.0
Constants: 1.0
Foreign-Function-Calls: 424.0
Switch-Statements: 1.0
---------- File: SoftAuditPlugin.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:27:393
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:27:393
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:27:394
*** Step 4 - Expand model with details
*** Finished at 13:07:27:395
PACKAGE - Statement:[package, plugin, ;]
IMPORT - Statement:[import, java, ., util, ., Arrays, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., Extension, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., SonarPlugin, ;]
CLASS with name: SoftAuditPlugin extending: [SonarPlugin] and Body:
	METHOD with name: SoftAuditPlugin and Body:
		METHODCALL - Statement / calling 1 methods:[, (, ), ;]
	METHOD with name: getExtensions, Returntype: List < Class < ? extends Extension > >  and Body:
		RETURN - ControlStatement / calling 1 methods / :[return, Arrays, ., asList, (, SoftAuditMetrics, ., class, ,, SoftAuditSensor, ., class, ,, SoftAuditWidget, ., class, ), ;]
*** Step 5 - Count measures
*** Finished at 13:07:27:395
Literals: 0.0
Classes: 1.0
Methods: 2.0
Branches: 1.0
References: 0.0
Function-Calls: 2.0
Secure Statements: 12.0
Variables: 0.0
Imports: 5.0
Statements: 13.0
Parameters: 0.0
Return-Statements: 1.0
Results: 1.0
Constants: 0.0
Foreign-Function-Calls: 2.0
---------- File: SoftAuditSensor.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:27:426
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:27:427
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:27:428
*** Step 4 - Expand model with details
*** Finished at 13:07:27:436
PACKAGE - Statement:[package, plugin, ;]
IMPORT - Statement:[import, java, ., io, ., File, ;]
IMPORT - Statement:[import, java, ., io, ., IOException, ;]
IMPORT - Statement:[import, java, ., util, ., HashMap, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, java, ., util, ., Map, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., batch, ., Sensor, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., batch, ., SensorContext, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., batch, ., fs, ., FileSystem, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., measures, ., Measure, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., measures, ., Metric, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., resources, ., Project, ;]
IMPORT - Statement:[import, plugin, ., analyser, ., FileNormalizer, ;]
IMPORT - Statement:[import, plugin, ., analyser, ., MetricCalculator, ;]
IMPORT - Statement:[import, plugin, ., analyser, ., ModelAnalyser, ;]
IMPORT - Statement:[import, plugin, ., analyser, ., ModelBuilder, ;]
IMPORT - Statement:[import, plugin, ., analyser, ., ModelDetailExpander, ;]
IMPORT - Statement:[import, plugin, ., analyser, ., ModelStructureExpander, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
IMPORT - Statement:[import, plugin, ., util, ., AnalyzeException, ;]
IMPORT - Statement:[import, plugin, ., util, ., Logger, ;]
IMPORT - Statement:[import, plugin, ., util, ., ParsingException, ;]
CLASS with name: SoftAuditSensor implementing: [Sensor] and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, final, FileSystem, fileSystem, ;]
	METHOD with name: SoftAuditSensor, Parameters: String  loggername and Body:
		ASSIGNMENT - Statement / referencing 1 variables:[this, ., fileSystem, =, null, ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[Logger, ., getLogger, (, loggername, ), ;]
	METHOD with name: SoftAuditSensor, Parameters: FileSystem  fileSystem and Body:
		ASSIGNMENT - Statement / referencing 2 variables:[this, ., fileSystem, =, fileSystem, ;]
		METHODCALL - Statement / calling 1 methods:[Logger, ., getLogger, (, null, ), ;]
	METHOD with name: shouldExecuteOnProject, Returntype: boolean , Parameters: Project  project and Body:
		IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (fileSystem . languages ( ) . contains ( " ) ) with if-block:
			RETURN - ControlStatement / :[return, true, ;]
		RETURN - ControlStatement / :[return, false, ;]
	METHOD with name: analyse, Returntype: void , Parameters: Project  projectSensorContext  sensorContext and Body:
		ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 4 methods:[Map, <, Metric, <, ?, >, ,, Double, >, measures, =, doAnalyse, (, fileSystem, ., files, (, fileSystem, ., predicates, (, ), ., hasLanguage, (, ", ), ), ), ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (Metric < ? > measure : measures . keySet ( ) ) with content:
			METHODCALL - Statement / referencing 4 variables / calling 3 methods:[sensorContext, ., saveMeasure, (, new, Measure, , Integer, , (, measure, ,, measures, ., get, (, measure, ), ,, 0, ), ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[Map, <, Metric, <, ?, >, ,, Double, >, metrics, =, MetricCalculator, ., calculate, (, measures, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 2 methods:[Logger, ., getLogger, (, null, ), ., printMetrics, (, metrics, ), ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (Metric < ? > metric : metrics . keySet ( ) ) with content:
			METHODCALL - Statement / referencing 4 variables / calling 3 methods:[sensorContext, ., saveMeasure, (, new, Measure, , Integer, , (, metric, ,, metrics, ., get, (, metric, ), ,, 3, ), ), ;]
		METHODCALL - Statement / calling 2 methods:[Logger, ., getLogger, (, null, ), ., close, (, ), ;]
	METHOD with name: doAnalyse, Returntype: Map < Metric < ? > , Double > , Parameters: Iterable < File >  files and Body:
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[Map, <, Metric, <, ?, >, ,, Double, >, result, =, new, HashMap, , Metric, , , , , Double, , (, ), ;]
		FOR - ControlStatement / declaring 1 variables / calling 2 methods / Enhanced version scanning: (Metric < ? > metric : new SoftAuditMetrics ( ) . getMetrics ( ) ) with content:
			IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (metric . getKey ( ) . startsWith ( " ) ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[result, ., put, (, metric, ,, 0d, ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / calling 1 methods:[ModelAnalyser, analyser, =, new, ModelAnalyser, (, ), ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (File file : files ) with content:
			ASSIGNMENT - Statement / declaring 1 variables:[List, <, JavaFileContent, >, fileModel, =, null, ;]
			TRY - ControlStatement / declaring 1 variables / with try-block:
				METHODCALL - Statement / referencing 1 variables / calling 2 methods:[Logger, ., getLogger, (, null, ), ., printFile, (, file, ), ;]
			CATCH - (IOException exceptionInStepZero ) And catch-block:
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[exceptionInStepZero, ., printStackTrace, (, ), ;]
				CONTINUE - ControlStatement / :[continue, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[List, <, WordInFile, >, wordList, =, null, ;]
			TRY - ControlStatement / declaring 1 variables / with try-block:
				ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[wordList, =, FileNormalizer, ., doFileNormalization, (, file, ), ;]
			CATCH - (ParsingException exceptionInStepOne ) And catch-block:
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[exceptionInStepOne, ., printStackTrace, (, ), ;]
				CONTINUE - ControlStatement / :[continue, ;]
			TRY - ControlStatement / declaring 1 variables / with try-block:
				ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[fileModel, =, ModelBuilder, ., parseBasicModel, (, wordList, ), ;]
			CATCH - (ParsingException exceptionInStepTwo ) And catch-block:
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[exceptionInStepTwo, ., printStackTrace, (, ), ;]
				CONTINUE - ControlStatement / :[continue, ;]
			ASSIGNMENT - Statement / declaring 1 variables:[boolean, structureParsed, =, false, ;]
			TRY - ControlStatement / declaring 1 variables / with try-block:
				ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[fileModel, =, ModelStructureExpander, ., parseStatementStructure, (, fileModel, ), ;]
				ASSIGNMENT - Statement / referencing 1 variables:[structureParsed, =, true, ;]
			CATCH - (ParsingException exceptionInStepThree ) And catch-block:
				METHODCALL - Statement / referencing 1 variables / calling 1 methods:[exceptionInStepThree, ., printStackTrace, (, ), ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (structureParsed ) with if-block:
				TRY - ControlStatement / declaring 1 variables / with try-block:
					ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[fileModel, =, ModelDetailExpander, ., parseModelDetails, (, fileModel, ), ;]
				CATCH - (ParsingException exceptionInStepFour ) And catch-block:
					METHODCALL - Statement / referencing 1 variables / calling 1 methods:[exceptionInStepFour, ., printStackTrace, (, ), ;]
			IF - ControlStatement / referencing 1 variables / Checking condition: (fileModel ! = null ) with if-block:
				TRY - ControlStatement / declaring 1 variables / with try-block:
					ASSIGNMENT - Statement / declaring 1 variables / referencing 3 variables / calling 1 methods:[Map, <, Metric, <, ?, >, ,, Double, >, partialResult, =, analyser, ., doFileModelAnalysis, (, fileModel, ,, wordList, ), ;]
					FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (Metric < ? > metric : partialResult . keySet ( ) ) with content:
						METHODCALL - Statement / referencing 6 variables / calling 3 methods:[result, ., put, (, metric, ,, result, ., get, (, metric, ), +, partialResult, ., get, (, metric, ), ), ;]
				CATCH - (AnalyzeException exceptionInStepFive ) And catch-block:
					METHODCALL - Statement / referencing 1 variables / calling 1 methods:[exceptionInStepFive, ., printStackTrace, (, ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., put, (, SoftAuditMetrics, ., SRC, ,, analyser, ., getScannedSourceFiles, (, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., put, (, SoftAuditMetrics, ., OMS, ,, analyser, ., getOptimalModuleSize, (, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., put, (, SoftAuditMetrics, ., DTY, ,, analyser, ., getNumberOfDataTypes, (, ), ), ;]
		METHODCALL - Statement / referencing 2 variables / calling 2 methods:[result, ., put, (, SoftAuditMetrics, ., STY, ,, analyser, ., getNumberOfStatementTypes, (, ), ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 2 methods:[Logger, ., getLogger, (, null, ), ., printCumulatedMeasures, (, result, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, result, ;]
	METHOD with name: toString, Returntype: String  and Body:
		RETURN - ControlStatement / :[return, ", ;]
*** Step 5 - Count measures
*** Finished at 13:07:27:438
Arguments: 11.0
If-Statements: 10.0
Literals: 4.0
Classes: 1.0
Methods: 6.0
Branches: 40.0
References: 81.0
Function-Calls: 55.0
Secure Statements: 121.0
Variables: 26.0
Reusable Methods: 1.0
Imports: 23.0
Loop-Statements: 5.0
Statements: 122.0
Parameters: 6.0
Return-Statements: 4.0
Results: 19.0
Predicates: 4.0
Constants: 2.0
Foreign-Function-Calls: 54.0
---------- File: SoftAuditWidget.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:27:443
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:27:444
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:27:444
*** Step 4 - Expand model with details
*** Finished at 13:07:27:444
PACKAGE - Statement:[package, plugin, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., web, ., AbstractRubyTemplate, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., web, ., Description, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., web, ., RubyRailsWidget, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., web, ., UserRole, ;]
ANNOTATION
ANNOTATION
CLASS with name: SoftAuditWidget extending: [AbstractRubyTemplate] implementing: [RubyRailsWidget] and Body:
	METHOD with name: SoftAuditWidget and Body:
		METHODCALL - Statement / calling 1 methods:[, (, ), ;]
	METHOD with name: getId, Returntype: String  and Body:
		RETURN - ControlStatement / :[return, ", ;]
	METHOD with name: getTitle, Returntype: String  and Body:
		RETURN - ControlStatement / :[return, ", ;]
	ANNOTATION
	METHOD with name: getTemplatePath, Returntype: String  and Body:
		ASSIGNMENT - Statement / declaring 1 variables:[String, templatePath, =, ", ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, templatePath, ;]
*** Step 5 - Count measures
*** Finished at 13:07:27:446
Literals: 3.0
Classes: 1.0
Methods: 4.0
Branches: 3.0
References: 2.0
Function-Calls: 1.0
Secure Statements: 19.0
Variables: 1.0
Reusable Methods: 3.0
Imports: 5.0
Statements: 20.0
Parameters: 0.0
Return-Statements: 3.0
Results: 4.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: AnalyzeException.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:27:452
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:27:454
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:27:455
*** Step 4 - Expand model with details
*** Finished at 13:07:27:462
PACKAGE - Statement:[package, plugin, ., util, ;]
CLASS with name: AnalyzeException extending: [Exception] and Body:
	ASSIGNMENT - Statement / declaring 1 variables:[private, static, final, long, serialVersionUID, =, 7528883914220182044L, ;]
	METHOD with name: AnalyzeException, Parameters: String  message and Body:
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[, (, message, ), ;]
*** Step 5 - Count measures
*** Finished at 13:07:27:463
Literals: 0.0
Classes: 1.0
Methods: 1.0
References: 3.0
Function-Calls: 1.0
Secure Statements: 6.0
Variables: 2.0
Imports: 1.0
Statements: 7.0
Parameters: 1.0
Results: 1.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- File: Logger.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:27:665
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:27:667
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:27:670
*** Step 4 - Expand model with details
*** Finished at 13:07:27:674
PACKAGE - Statement:[package, plugin, ., util, ;]
IMPORT - Statement:[import, java, ., io, ., BufferedReader, ;]
IMPORT - Statement:[import, java, ., io, ., File, ;]
IMPORT - Statement:[import, java, ., io, ., FileReader, ;]
IMPORT - Statement:[import, java, ., io, ., IOException, ;]
IMPORT - Statement:[import, java, ., io, ., PrintWriter, ;]
IMPORT - Statement:[import, java, ., text, ., SimpleDateFormat, ;]
IMPORT - Statement:[import, java, ., util, ., Date, ;]
IMPORT - Statement:[import, java, ., util, ., List, ;]
IMPORT - Statement:[import, java, ., util, ., Map, ;]
IMPORT - Statement:[import, org, ., sonar, ., api, ., measures, ., Metric, ;]
IMPORT - Statement:[import, plugin, ., model, ., JavaFileContent, ;]
IMPORT - Statement:[import, plugin, ., model, ., StatementType, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordInFile, ;]
IMPORT - Statement:[import, plugin, ., model, ., WordList, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaClass, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaControlStatement, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaEnumValues, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaMethod, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaStatement, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaStatementWithAnonymousClass, ;]
IMPORT - Statement:[import, plugin, ., model, ., components, ., JavaVariable, ;]
CLASS with name: Logger and Body:
	VARDECLARATION - Statement / declaring 1 variables:[private, static, Logger, logger, ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, FILE_HEAD, =, ", ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, MEASURES, =, ", ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, METRICS, =, ", ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, STEP_1, =, ", ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, STEP_2, =, ", ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, STEP_3, =, ", ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, STEP_4, =, ", ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, STEP_5, =, ", ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, TIME, =, ", ;]
	ASSIGNMENT - Statement / declaring 1 variables:[private, final, String, INPUT_ERROR, =, ", ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, final, int, loglevel, ;]
	VARDECLARATION - Statement / declaring 1 variables:[private, PrintWriter, writer, ;]
	METHOD with name: Logger, Parameters: String  filename and Body:
		IF - ControlStatement / referencing 1 variables / Checking condition: (filename = = null ) with if-block:
			ASSIGNMENT - Statement / referencing 1 variables:[filename, =, ", ;]
		ASSIGNMENT - Statement / referencing 1 variables:[loglevel, =, 2, ;]
		TRY - ControlStatement / declaring 1 variables / with try-block:
			ASSIGNMENT - Statement / declaring 1 variables / calling 3 methods:[String, timestamp, =, (, new, SimpleDateFormat, (, ", ), ), ., format, (, new, Date, (, ), ), ;]
			ASSIGNMENT - Statement / referencing 3 variables / calling 1 methods:[writer, =, new, PrintWriter, (, ", +, timestamp, +, filename, +, ", ,, ", ), ;]
		CATCH - (Exception e ) And catch-block:
			METHODCALL - Statement / referencing 1 variables / calling 1 methods:[e, ., printStackTrace, (, ), ;]
	METHOD with name: getLogger, Returntype: Logger , Parameters: String  filename and Body:
		IF - ControlStatement / referencing 1 variables / Checking condition: (logger = = null ) with if-block:
			ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[logger, =, new, Logger, (, filename, ), ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, logger, ;]
	METHOD with name: printFile, Returntype: void , Parameters: File  file and Body:
		METHODCALL - Statement / referencing 3 variables / calling 3 methods:[writer, ., println, (, FILE_HEAD, ., replace, (, ", ,, file, ., getName, (, ), ), ), ;]
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 2 methods:[BufferedReader, br, =, new, BufferedReader, (, new, FileReader, (, file, ), ), ;]
		VARDECLARATION - Statement / declaring 1 variables:[String, fileline, ;]
		WHILE - ControlStatement / referencing 2 variables / calling 1 methods / Checking condition: (( fileline = br . readLine ( ) ) ! = null ) with content:
			IF - ControlStatement / referencing 1 variables / Checking condition: (loglevel > 3 ) with if-block:
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, fileline, ), ;]
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[br, ., close, (, ), ;]
	METHOD with name: printWords, Returntype: void , Parameters: List < WordInFile >  words and Body:
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, STEP_1, ), ;]
		METHODCALL - Statement / calling 1 methods:[addTime, (, ), ;]
		IF - ControlStatement / referencing 1 variables / Checking condition: (loglevel > 2 ) with if-block:
			ASSIGNMENT - Statement / declaring 1 variables:[String, sublist, =, ", ;]
			FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (WordInFile word : words ) with content:
				IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (sublist . length ( ) > 100 ) with if-block:
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, sublist, ), ;]
					ASSIGNMENT - Statement / referencing 1 variables:[sublist, =, ", ;]
				ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[sublist, +, =, word, ., toString, (, ), +, ", ;]
	METHOD with name: printFileMeasures, Returntype: void , Parameters: Map < Metric < ? > , Double >  measures and Body:
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, STEP_5, ), ;]
		METHODCALL - Statement / calling 1 methods:[addTime, (, ), ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (Metric < ? > metric : measures . keySet ( ) ) with content:
			METHODCALL - Statement / referencing 4 variables / calling 3 methods:[writer, ., println, (, metric, ., getName, (, ), +, ", +, measures, ., get, (, metric, ), ), ;]
	METHOD with name: printCumulatedMeasures, Returntype: void , Parameters: Map < Metric < ? > , Double >  measures and Body:
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, MEASURES, ), ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (Metric < ? > metric : measures . keySet ( ) ) with content:
			METHODCALL - Statement / referencing 4 variables / calling 3 methods:[writer, ., println, (, metric, ., getName, (, ), +, ", +, measures, ., get, (, metric, ), ), ;]
	METHOD with name: printMetrics, Returntype: void , Parameters: Map < Metric < ? > , Double >  measures and Body:
		METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, METRICS, ), ;]
		FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (Metric < ? > metric : measures . keySet ( ) ) with content:
			METHODCALL - Statement / referencing 4 variables / calling 3 methods:[writer, ., println, (, metric, ., getName, (, ), +, ", +, measures, ., get, (, metric, ), ), ;]
	METHOD with name: printModel, Returntype: void , Parameters: String  stepList < JavaFileContent >  contents and Body:
		ASSIGNMENT - Statement / declaring 1 variables:[int, levelToLog, =, 1, ;]
		SWITCH - ControlStatement / referencing 1 variables / over value of : (step ) and cases:
			CASE - ControlStatement / for case: (" ) and content:
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, STEP_2, ), ;]
				ASSIGNMENT - Statement / referencing 1 variables:[levelToLog, =, 2, ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (" ) and content:
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, STEP_3, ), ;]
				ASSIGNMENT - Statement / referencing 1 variables:[levelToLog, =, 2, ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (" ) and content:
				METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, STEP_4, ), ;]
				BREAK - ControlStatement / :[break, ;]
			CASE - ControlStatement / for case: (default ) and content:
				METHODCALL - Statement / referencing 3 variables / calling 3 methods:[writer, ., println, (, INPUT_ERROR, ., replace, (, ", ,, ", ), ., replace, (, ", ,, step, ), ), ;]
				BREAK - ControlStatement / :[break, ;]
		METHODCALL - Statement / calling 1 methods:[addTime, (, ), ;]
		IF - ControlStatement / referencing 2 variables / Checking condition: (loglevel > levelToLog ) with if-block:
			METHODCALL - Statement / referencing 1 variables / calling 1 methods:[printFileContent, (, contents, ,, 0, ), ;]
	METHOD with name: printFileContent, Returntype: void , Parameters: List < JavaFileContent >  contentsint  level and Body:
		IF - ControlStatement / referencing 1 variables / Checking condition: (contents ! = null ) with if-block:
			FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (JavaFileContent content : contents ) with content:
				IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaClass ) with if-block:
					ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaClass, theClass, =, (, JavaClass, ), content, ;]
					ASSIGNMENT - Statement / declaring 1 variables / referencing 3 variables / calling 5 methods:[String, classline, =, addTabs, (, level, ), +, theClass, ., getType, (, ), ., toString, (, ), ., toUpperCase, (, ), +, ", +, theClass, ., getName, (, ), ;]
					IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (! theClass . getExtending ( ) . isEmpty ( ) ) with if-block:
						ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[classline, +, =, ", +, theClass, ., getExtending, (, ), ;]
					IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (! theClass . getImplementing ( ) . isEmpty ( ) ) with if-block:
						ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[classline, +, =, ", +, theClass, ., getImplementing, (, ), ;]
					ASSIGNMENT - Statement / referencing 1 variables:[classline, +, =, ", ;]
					METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, classline, ), ;]
					METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, theClass, ., getContent, (, ), ,, level, +, 1, ), ;]
				ELSE - block:
					IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaMethod ) with if-block:
						ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaMethod, theMethod, =, (, JavaMethod, ), content, ;]
						ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables / calling 1 methods:[String, methodline, =, addTabs, (, level, ), +, ", ;]
						IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theMethod . getContent ( ) = = null ) with if-block:
							ASSIGNMENT - Statement / referencing 1 variables:[methodline, +, =, ", ;]
						ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[methodline, +, =, ", +, theMethod, ., getName, (, ), ;]
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (! theMethod . getReturntype ( ) . isEmpty ( ) ) with if-block:
							ASSIGNMENT - Statement / referencing 1 variables:[methodline, +, =, ", ;]
							FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile returnword : theMethod . getReturntype ( ) ) with content:
								ASSIGNMENT - Statement / referencing 2 variables:[methodline, +, =, returnword, +, ", ;]
						IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (! theMethod . getParameters ( ) . isEmpty ( ) ) with if-block:
							ASSIGNMENT - Statement / referencing 1 variables:[methodline, +, =, ", ;]
							FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (JavaVariable param : theMethod . getParameters ( ) ) with content:
								FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile returnword : param . getType ( ) ) with content:
									ASSIGNMENT - Statement / referencing 2 variables:[methodline, +, =, returnword, +, ", ;]
								ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[methodline, +, =, ", +, param, ., getName, (, ), ;]
						IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (theMethod . getContent ( ) ! = null ) with if-block:
							ASSIGNMENT - Statement / referencing 1 variables:[methodline, +, =, ", ;]
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (theMethod . getContent ( ) . isEmpty ( ) ) with if-block:
								ASSIGNMENT - Statement / referencing 1 variables:[methodline, +, =, ", ;]
							ELSE - block:
								ASSIGNMENT - Statement / referencing 1 variables:[methodline, +, =, ", ;]
						METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, methodline, ), ;]
						IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (theMethod . getContent ( ) ! = null & & ! theMethod . getContent ( ) . isEmpty ( ) ) with if-block:
							METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, theMethod, ., getContent, (, ), ,, level, +, 1, ), ;]
					ELSE - block:
						IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaControlStatement ) with if-block:
							ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaControlStatement, statement, =, (, JavaControlStatement, ), content, ;]
							ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 2 methods:[String, header, =, addTabs, (, level, ), +, statement, ., getType, (, ), +, ", ;]
							IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getDeclaredVariables ( ) ! = null & & ! statement . getDeclaredVariables ( ) . isEmpty ( ) ) with if-block:
								ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[header, +, =, ", +, statement, ., getDeclaredVariables, (, ), ., size, (, ), +, ", ;]
							IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getReferencedVariables ( ) ! = null & & ! statement . getReferencedVariables ( ) . isEmpty ( ) ) with if-block:
								ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[header, +, =, ", +, statement, ., getReferencedVariables, (, ), ., size, (, ), +, ", ;]
							IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getCalledMethods ( ) ! = null & & ! statement . getCalledMethods ( ) . isEmpty ( ) ) with if-block:
								ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[header, +, =, ", +, statement, ., getCalledMethods, (, ), ., size, (, ), +, ", ;]
							IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (statement . getType ( ) . equals ( StatementType . SWITCH ) ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables:[String, condition, =, ", ;]
								FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile conditionWord : statement . getCondition ( ) ) with content:
									ASSIGNMENT - Statement / referencing 2 variables:[condition, +, =, conditionWord, +, ", ;]
								ASSIGNMENT - Statement / referencing 2 variables:[header, +, =, ", +, condition, +, ", ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getContent, (, ), ,, level, +, 1, ), ;]
							ELSE - block:
								IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (statement . getType ( ) . equals ( StatementType . CASE ) ) with if-block:
									ASSIGNMENT - Statement / declaring 1 variables:[String, condition, =, ", ;]
									FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile conditionWord : statement . getCondition ( ) ) with content:
										ASSIGNMENT - Statement / referencing 2 variables:[condition, +, =, conditionWord, +, ", ;]
									ASSIGNMENT - Statement / referencing 2 variables:[header, +, =, ", +, condition, +, ", ;]
									METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
									METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getContent, (, ), ,, level, +, 1, ), ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (statement . getType ( ) . equals ( StatementType . BLOCK ) ) with if-block:
										ASSIGNMENT - Statement / referencing 1 variables:[header, +, =, ", ;]
										METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getContent, (, ), ,, level, +, 1, ), ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (statement . getType ( ) . equals ( StatementType . TRY ) ) with if-block:
											IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (statement . getResources ( ) ! = null ) with if-block:
												ASSIGNMENT - Statement / referencing 1 variables:[header, +, =, ", ;]
												METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
												METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getResources, (, ), ,, level, +, 1, ), ;]
												METHODCALL - Statement / referencing 2 variables / calling 2 methods:[writer, ., println, (, addTabs, (, level, ), +, ", ), ;]
											ELSE - block:
												ASSIGNMENT - Statement / referencing 1 variables:[header, +, =, ", ;]
												METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
											METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getContent, (, ), ,, level, +, 1, ), ;]
											FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 2 methods / Enhanced version scanning: (List < WordInFile > exception : statement . getCatchedExceptions ( ) . keySet ( ) ) with content:
												ASSIGNMENT - Statement / declaring 1 variables:[String, condition, =, ", ;]
												FOR - ControlStatement / declaring 1 variables / referencing 1 variables / Enhanced version scanning: (WordInFile conditionWord : exception ) with content:
													ASSIGNMENT - Statement / referencing 2 variables:[condition, +, =, conditionWord, +, ", ;]
												METHODCALL - Statement / referencing 3 variables / calling 2 methods:[writer, ., println, (, addTabs, (, level, ), +, ", +, condition, +, ", ), ;]
												METHODCALL - Statement / referencing 3 variables / calling 3 methods:[printFileContent, (, statement, ., getCatchedExceptions, (, ), ., get, (, exception, ), ,, level, +, 1, ), ;]
											IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (statement . getOthercontent ( ) ! = null ) with if-block:
												METHODCALL - Statement / referencing 2 variables / calling 2 methods:[writer, ., println, (, addTabs, (, level, ), +, ", ), ;]
												METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getOthercontent, (, ), ,, level, +, 1, ), ;]
										ELSE - block:
											IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (statement . getType ( ) . equals ( StatementType . IF ) ) with if-block:
												ASSIGNMENT - Statement / declaring 1 variables:[String, condition, =, ", ;]
												FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile conditionWord : statement . getCondition ( ) ) with content:
													ASSIGNMENT - Statement / referencing 2 variables:[condition, +, =, conditionWord, +, ", ;]
												ASSIGNMENT - Statement / referencing 2 variables:[header, +, =, ", +, condition, +, ", ;]
												METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
												METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getContent, (, ), ,, level, +, 1, ), ;]
												IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (statement . getOthercontent ( ) ! = null ) with if-block:
													METHODCALL - Statement / referencing 2 variables / calling 2 methods:[writer, ., println, (, addTabs, (, level, ), +, ", ), ;]
													METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getOthercontent, (, ), ,, level, +, 1, ), ;]
											ELSE - block:
												IF - ControlStatement / referencing 2 variables / calling 4 methods / Checking condition: (statement . getType ( ) . equals ( StatementType . WHILE ) | | statement . getType ( ) . equals ( StatementType . DOWHILE ) ) with if-block:
													ASSIGNMENT - Statement / declaring 1 variables:[String, condition, =, ", ;]
													FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile conditionWord : statement . getCondition ( ) ) with content:
														ASSIGNMENT - Statement / referencing 2 variables:[condition, +, =, conditionWord, +, ", ;]
													ASSIGNMENT - Statement / referencing 2 variables:[header, +, =, ", +, condition, +, ", ;]
													METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
													METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getContent, (, ), ,, level, +, 1, ), ;]
												ELSE - block:
													IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (statement . getType ( ) . equals ( StatementType . FOR ) ) with if-block:
														ASSIGNMENT - Statement / declaring 1 variables:[String, condition, =, ", ;]
														FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile conditionWord : statement . getCondition ( ) ) with content:
															ASSIGNMENT - Statement / referencing 2 variables:[condition, +, =, conditionWord, +, ", ;]
														IF - ControlStatement / referencing 1 variables / calling 1 methods / Checking condition: (statement . getInitialization ( ) ! = null ) with if-block:
															ASSIGNMENT - Statement / declaring 1 variables:[String, init, =, ", ;]
															FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile conditionWord : statement . getInitialization ( ) ) with content:
																ASSIGNMENT - Statement / referencing 2 variables:[init, +, =, conditionWord, +, ", ;]
															ASSIGNMENT - Statement / declaring 1 variables:[String, inc, =, ", ;]
															FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile conditionWord : statement . getIncrement ( ) ) with content:
																ASSIGNMENT - Statement / referencing 2 variables:[inc, +, =, conditionWord, +, ", ;]
															ASSIGNMENT - Statement / referencing 4 variables:[header, +, =, ", +, init, +, ", +, condition, +, ", +, inc, +, ", ;]
														ELSE - block:
															ASSIGNMENT - Statement / referencing 2 variables:[header, +, =, ", +, condition, +, ", ;]
														METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
														METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getContent, (, ), ,, level, +, 1, ), ;]
													ELSE - block:
														IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (statement . getType ( ) . equals ( StatementType . SYNCHRONIZED ) ) with if-block:
															ASSIGNMENT - Statement / declaring 1 variables:[String, condition, =, ", ;]
															FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile conditionWord : statement . getCondition ( ) ) with content:
																ASSIGNMENT - Statement / referencing 2 variables:[condition, +, =, conditionWord, +, ", ;]
															ASSIGNMENT - Statement / referencing 2 variables:[header, +, =, ", +, condition, +, ", ;]
															METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
															METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getContent, (, ), ,, level, +, 1, ), ;]
														ELSE - block:
															METHODCALL - Statement / referencing 3 variables / calling 2 methods:[writer, ., println, (, header, +, ", +, statement, ., getStatementText, (, ), ), ;]
						ELSE - block:
							IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatementWithAnonymousClass ) with if-block:
								ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatementWithAnonymousClass, statement, =, (, JavaStatementWithAnonymousClass, ), content, ;]
								ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 2 methods:[String, classline, =, addTabs, (, level, ), +, statement, ., getType, (, ), +, ", ;]
								IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getDeclaredVariables ( ) ! = null & & ! statement . getDeclaredVariables ( ) . isEmpty ( ) ) with if-block:
									ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[classline, +, =, ", +, statement, ., getDeclaredVariables, (, ), ., size, (, ), +, ", ;]
								IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getReferencedVariables ( ) ! = null & & ! statement . getReferencedVariables ( ) . isEmpty ( ) ) with if-block:
									ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[classline, +, =, ", +, statement, ., getReferencedVariables, (, ), ., size, (, ), +, ", ;]
								IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getCalledMethods ( ) ! = null & & ! statement . getCalledMethods ( ) . isEmpty ( ) ) with if-block:
									ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[classline, +, =, ", +, statement, ., getCalledMethods, (, ), ., size, (, ), +, ", ;]
								ASSIGNMENT - Statement / referencing 1 variables:[classline, +, =, ", ;]
								FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile word : statement . getStatementBeforeClass ( ) ) with content:
									ASSIGNMENT - Statement / referencing 2 variables:[classline, +, =, word, +, ", ;]
								ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[classline, +, =, ", +, statement, ., getClassType, (, ), +, ", ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, classline, ), ;]
								METHODCALL - Statement / referencing 2 variables / calling 2 methods:[printFileContent, (, statement, ., getContent, (, ), ,, level, +, 1, ), ;]
								ASSIGNMENT - Statement / referencing 2 variables / calling 1 methods:[classline, =, addTabs, (, level, ), +, ", ;]
								FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (WordInFile word : statement . getStatementAfterClass ( ) ) with content:
									ASSIGNMENT - Statement / referencing 2 variables:[classline, +, =, word, +, ", ;]
								METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, classline, ), ;]
							ELSE - block:
								IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaStatement ) with if-block:
									ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaStatement, statement, =, (, JavaStatement, ), content, ;]
									IF - ControlStatement / referencing 1 variables / calling 2 methods / Checking condition: (statement . getType ( ) . equals ( StatementType . ANNOTATION ) ) with if-block:
										METHODCALL - Statement / referencing 3 variables / calling 3 methods:[writer, ., println, (, addTabs, (, level, ), +, statement, ., getType, (, ), ), ;]
									ELSE - block:
										ASSIGNMENT - Statement / declaring 1 variables / referencing 2 variables / calling 2 methods:[String, header, =, addTabs, (, level, ), +, statement, ., getType, (, ), +, ", ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getDeclaredVariables ( ) ! = null & & ! statement . getDeclaredVariables ( ) . isEmpty ( ) ) with if-block:
											ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[header, +, =, ", +, statement, ., getDeclaredVariables, (, ), ., size, (, ), +, ", ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getReferencedVariables ( ) ! = null & & ! statement . getReferencedVariables ( ) . isEmpty ( ) ) with if-block:
											ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[header, +, =, ", +, statement, ., getReferencedVariables, (, ), ., size, (, ), +, ", ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getCalledMethods ( ) ! = null & & ! statement . getCalledMethods ( ) . isEmpty ( ) ) with if-block:
											ASSIGNMENT - Statement / referencing 2 variables / calling 2 methods:[header, +, =, ", +, statement, ., getCalledMethods, (, ), ., size, (, ), +, ", ;]
										IF - ControlStatement / referencing 2 variables / calling 3 methods / Checking condition: (statement . getStatementText ( ) ! = null & & ! statement . getStatementText ( ) . isEmpty ( ) ) with if-block:
											METHODCALL - Statement / referencing 3 variables / calling 2 methods:[writer, ., println, (, header, +, ", +, statement, ., getStatementText, (, ), ), ;]
										ELSE - block:
											METHODCALL - Statement / referencing 2 variables / calling 1 methods:[writer, ., println, (, header, ), ;]
								ELSE - block:
									IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof JavaEnumValues ) with if-block:
										ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[JavaEnumValues, values, =, (, JavaEnumValues, ), content, ;]
										METHODCALL - Statement / referencing 2 variables / calling 2 methods:[writer, ., println, (, addTabs, (, level, ), +, ", ), ;]
										FOR - ControlStatement / declaring 1 variables / referencing 1 variables / calling 1 methods / Enhanced version scanning: (List < WordInFile > value : values . getValues ( ) ) with content:
											METHODCALL - Statement / referencing 3 variables / calling 2 methods:[writer, ., println, (, addTabs, (, level, +, 1, ), +, value, ), ;]
									ELSE - block:
										IF - ControlStatement / referencing 1 variables / Checking condition: (content instanceof WordList ) with if-block:
											ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[WordList, wordlist, =, (, WordList, ), content, ;]
											METHODCALL - Statement / referencing 4 variables / calling 5 methods:[writer, ., println, (, addTabs, (, level, ), +, ", +, wordlist, ., getWordlist, (, ), ., size, (, ), +, ", +, wordlist, ., getWordlist, (, ), ), ;]
										ELSE - block:
											METHODCALL - Statement / referencing 3 variables / calling 4 methods:[writer, ., println, (, INPUT_ERROR, ., replace, (, ", ,, ", ), ., replace, (, ", ,, content, ., toString, (, ), ), ), ;]
	METHOD with name: close, Returntype: void  and Body:
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[writer, ., close, (, ), ;]
		ASSIGNMENT - Statement / referencing 1 variables:[logger, =, null, ;]
	METHOD with name: addTabs, Returntype: String , Parameters: int  inputlevel and Body:
		ASSIGNMENT - Statement / declaring 1 variables / referencing 1 variables:[int, level, =, inputlevel, ;]
		ASSIGNMENT - Statement / declaring 1 variables:[String, tabs, =, ", ;]
		WHILE - ControlStatement / referencing 1 variables / Checking condition: (level > 0 ) with content:
			ASSIGNMENT - Statement / referencing 1 variables:[tabs, +, =, ", ;]
			DECREMENT - Statement / referencing 1 variables:[level, -, -, ;]
		RETURN - ControlStatement / referencing 1 variables / :[return, tabs, ;]
	METHOD with name: addTime, Returntype: void  and Body:
		METHODCALL - Statement / referencing 2 variables / calling 5 methods:[writer, ., println, (, TIME, ., replaceAll, (, ", ,, (, new, SimpleDateFormat, (, ", ), ), ., format, (, new, Date, (, ), ), ), ), ;]
*** Step 5 - Count measures
*** Finished at 13:07:27:736
If-Statements: 46.0
Arguments: 60.0
Literals: 124.0
Classes: 1.0
Methods: 12.0
Branches: 145.0
References: 407.0
Function-Calls: 243.0
Cases: 4.0
Secure Statements: 386.0
Variables: 75.0
Reusable Methods: 3.0
Imports: 22.0
Loop-Statements: 23.0
Statements: 386.0
Parameters: 12.0
Return-Statements: 2.0
Results: 95.0
Predicates: 61.0
Constants: 2.0
Foreign-Function-Calls: 207.0
Switch-Statements: 1.0
---------- File: ParsingException.java ----------
*** Step 1 - Normalize file to wordlist
*** Finished at 13:07:27:737
*** Step 2 - Build basic model of the file from wordlist
*** Finished at 13:07:27:738
*** Step 3 - Expand model with structural statements
*** Finished at 13:07:27:738
*** Step 4 - Expand model with details
*** Finished at 13:07:27:739
PACKAGE - Statement:[package, plugin, ., util, ;]
CLASS with name: ParsingException extending: [Exception] and Body:
	ASSIGNMENT - Statement / declaring 1 variables:[private, static, final, long, serialVersionUID, =, 8586584750799943766L, ;]
	METHOD with name: ParsingException, Parameters: String  message and Body:
		METHODCALL - Statement / referencing 1 variables / calling 1 methods:[, (, message, ), ;]
*** Step 5 - Count measures
*** Finished at 13:07:27:739
Literals: 0.0
Classes: 1.0
Methods: 1.0
References: 3.0
Function-Calls: 1.0
Secure Statements: 6.0
Variables: 2.0
Imports: 1.0
Statements: 7.0
Parameters: 1.0
Results: 1.0
Constants: 0.0
Foreign-Function-Calls: 1.0
---------- Measured values ----------
--- Arguments: 372.0 / 1312 --> ???
Literals: 690.0 / 513 --> enumvalues as constants
Classes: 25.0 / 24 --> enums as interfaces
Methods: 148.0 / 89 + 3 Procedures --> getter/setter ignorieren
Branches: 1623.0 / 1786
Major Deficiencies: 0.0 / 375
References: 4307.0 / 3773 --- declarations nicht mitzählen
Security Deficiencies: 0.0 / 28
Optimal Module Size: 200.0
Cases: 109.0 / 171 --> mehrere cases hintereinander zählen!
Secure Statements: 4195.0
Variables: 668.0 / 165 --> schleifenvariablen und parameter nicht mitzählen
--- Data Types: 46.0 / 97 --> ???
Statements: 4282.0 / 3825
Parameters: 152.0 / 161
Return-Statements: 125.0 / 137
--- Results: 759.0 / 1267 --> ???
Predicates: 1058.0 / 1033
Foreign-Function-Calls: 2846.0 / 291 --> nicht die im file sammeln sondern alle und dagegen prüfen?
Source-Files: 27.0 / 27
If-Statements: 528.0 / 559
Statement-Types: 25.0 / 1934 --> alles außer control statements als eigener typ zählen
Interfaces: 0.0 / 3 --> siehe classes
Function-Calls: 3169.0 / 2358 --> getter setter calls ignorieren
Minor Deficiencies: 0.0 / 1426
Reusable Methods: 67.0 / 81
Loop-Statements: 156.0 / 156
Imports: 203.0 / 227
Medium Deficiencies: 0.0 / 841
Constants: 98.0 / 543 --> siehe literals
Switch-Statements: 20.0 / 26 --> meins is richtiger...
---------- Calculated Metrics ----------
Modularity: 0.40084210328306397
Data Flow Complexity: 0.6898072904573949
Reuseability: 0.4527027027027027
Data Complexity: 0.431074630341134
Average Complexity: 0.8634091247072433
Language Complexity: 0.03294530629765989
Interface Complexity: 0.8980751025560113
Testability: 0.37532488686232196
Conditional Complexity: 1.375
Security: 0.8164019928382377
Branching Complexity: 2.1277440448388605
Flexibility: 0.8159738439981317
Control Flow Complexity: 0.48921749845964263
Average Quality: 0.6013778230673154
Conformity: 1.0
Object Points: 1212.0 / 534
Maintainability: 0.34839923178674986
